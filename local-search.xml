<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>再见 2021！</title>
    <link href="/2021/12/31/%E5%86%8D%E8%A7%81-2021%EF%BC%81/"/>
    <url>/2021/12/31/%E5%86%8D%E8%A7%81-2021%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>健身完，洗漱后，趁着还有点精力，总结下 2021 这一年把。主要是聚焦在 毕业、工作、生活、2022年的计划，这四部分。</p><h2><span id="毕业">毕业</span></h2><p>由于疫情影响，2020年 的春节假期到 2020年 8 月开学，在五陵老家呆了半年多；应该是从13年来成都读书，在家里呆的最长的一段时间了，也是自闭最为严重的一段时间了。</p><p>在家都要被导师 push，看论文、复现方法、改进、做实验、画图、对比…；有了项目需求，又要去做导师的开发项目。 -&gt; 妥妥一个工具人</p><p>最后的结果是，实验没做出个啥来，净做项目去了。唯一的收获，或许是考了手动挡的驾照，能开车出去耍耍。</p><p>2020 年 8 月回学校后，暂时推开了导师安排的事情，开始找工作。</p><p>造化弄人，凭着 研一自学的 Go语言, docker, k8s 容器化技术，拿到了好几个 offer。当时的选择还是很多，可以去 北京、上海、深圳。考虑了一手，最后还是选择了成都，一个来了就不想走的城市。</p><p>找好了工作，又要开始搞中期检查、写大论文。</p><p>2020 年 11 月份 到 2021 年 6 月，感觉是压力最大的一段时间了。</p><p>当时学院和实验室给的 deadline 是 3 月份送外审，就意味着 1 月份前要写完初稿，2-3月份在初稿基础上反复的改，直到导师满意。</p><p>疫情 + deadline 让我选择了 2021 年的春节在学校过年，好像是8年来第一次没回家过年。父母虽然嘴上没说，但是个中滋味，难以体会。</p><p>年后收假到 3月 15 送审，不晓得大论文改了多少次，最后送审的前一天，不知道 check 了多少遍。</p><p>4月修改意见回来，一个优、一个良，按照意见修改后就准备答辩了。</p><p>5月初参加了答辩，甚至难得的穿上了正装，30min 除了前 15 min 自己讲，都在被怼。最后还是给了通过。</p><p>6月份初参加了毕业典礼，拍了照，吃了实验室和寝室的散伙饭就溜了。</p><p>读研期间，处于一种间断性的自闭；不断地怀疑自己的能力，觉得自己是个 five。但是最后离开学校的时候，好像一切都释然了。</p><h2><span id="工作">工作</span></h2><p>入职前特地回了躺老家，算是弥补了过年没回家，求一个心安理得罢了。</p><p>7月 1号 入职的 Sugon Cloud，做的也是 golang, docker, k8s 方向。一整个月都在熟悉公司的产品，偶尔看 doc 和 wiki 到深夜。</p><p>8 月去北京培训（其实是耍了两周），期间河南遭了水灾 和 疫情，除了打电话问候家人的情况，啥也做不了。</p><p>9 月，还是在学习，review 代码、写脚本、写一些小的模块。</p><p>10 月，国庆回了老家。收假后就去出差了，支持了云平台在 城市云计算中心的落地。</p><p>11 月，还是在学习，啃《Go语言设计与实现》 和 k8s 的书，写 blog, wiki, doc</p><p>12 月，见到了部门经理，完成了转正；此外就是继续学习、翻译 doc、写 blog。</p><h2><span id="生活">生活</span></h2><p>6月份 从学校搬了出来，刚好找到了本科同学 – 曾哥，合租。</p><p>平时和周末 开始自己做饭吃，烧菜、炖菜、炒菜 都在尝试。</p><p>7-8月份，偶尔还要和朋友打下游戏，开开黑；后面忙起来了，时间少了，慢慢的就不玩游戏了。</p><p>11月份的时候，想去健身了；坐久了肩膀和腰不舒服，而且一直有轻度的脂肪肝。</p><p>12 月份，可能是想法转变最大的一个月。中间涉及到了：部门经理谈话、组长谈话、和其他公司技术人员对接时感到的差距感 与 失落感。</p><p>想去做一些积极的改变，做自己想去做的事儿，做自己喜欢做的事儿。</p><p>于是就开始，坚持下班后学习两小时，去健身房运动。</p><p>“鸡胸肉” 开始吃的时候，可真难吃；但是习惯了之后，越吃越想吃。习惯的养成，大概就是这样的一个过程吧。</p><h2><span id="2022-的计划">2022 的计划</span></h2><ol><li>坚持住，每天的运动 和 专业技术学习</li><li>学习完 5 本专业书，包括但不限于：编程语言、架构</li><li>输出 50 篇 技术相关 blog</li><li>一个月组织 1-2 次 技术分享 or code review</li><li>学一门新的语言，暂定为 Rust</li><li>为开源项目贡献一次代码，参与到开源社区（可能会有点难）</li><li>培养一个新的爱好</li></ol>]]></content>
    
    
    <categories>
      
      <category>Record my life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2021 总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 5: 并发编程 -- 上下文 Context</title>
    <link href="/2021/12/31/Cap-5-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%8A%E4%B8%8B%E6%96%87-Context/"/>
    <url>/2021/12/31/Cap-5-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%8A%E4%B8%8B%E6%96%87-Context/</url>
    
    <content type="html"><![CDATA[<h3><span id="1上下文-context">1.上下文 Context</span></h3><p>上下文 context.Context 是用来设置截止日期，同步信号，传递请求相关值的结构体。</p><p>context.Context 在 Go1.7 版本中引入标准库的接口：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// src/context/context.go</span><br><span class="hljs-comment">// A Context carries a deadline, a cancellation signal, and other values across API boundaries.</span><br><span class="hljs-comment">// Context&#x27;s methods may be called by multiple goroutines simultaneously.</span><br><span class="hljs-keyword">type</span> Context interface &#123;<br><span class="hljs-constructor">Deadline()</span> (deadline time.Time, ok <span class="hljs-built_in">bool</span>)<br>    <br><span class="hljs-constructor">Done()</span> &lt;-chan <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-constructor">Err()</span> error<br><br><span class="hljs-constructor">Value(<span class="hljs-params">key</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> interface&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Context定义了4个需要实现的方法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.Deadline</span>() <span class="hljs-selector-tag">-</span> 返回 <span class="hljs-selector-tag">context</span><span class="hljs-selector-class">.Context</span> 被取消的时间，完成工作的截止日期<br><span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.Done</span>() <span class="hljs-selector-tag">-</span> 返回一个 <span class="hljs-selector-tag">Channel</span>, 这个 <span class="hljs-selector-tag">Channel</span> 会在当前工作完成或者上下文被取消之后关闭，多次调用 <span class="hljs-selector-tag">Done</span>() 返回同一个 <span class="hljs-selector-tag">Channel</span><br><span class="hljs-selector-tag">3</span><span class="hljs-selector-class">.Err</span>() <span class="hljs-selector-tag">-</span> 返回 <span class="hljs-selector-tag">context</span><span class="hljs-selector-class">.Context</span> 结束的原因，在 <span class="hljs-selector-tag">Done</span>() 返回的 <span class="hljs-selector-tag">Channel</span> 被关闭时，才会返回非空的值<br><span class="hljs-selector-tag">4</span><span class="hljs-selector-class">.Value</span>() <span class="hljs-selector-tag">-</span> 从 <span class="hljs-selector-tag">context</span><span class="hljs-selector-class">.Context</span> 中获取键对应的值，对于同一个上下文来说，多次调用 <span class="hljs-selector-tag">Value</span>() 并传入相同的 <span class="hljs-selector-tag">Key</span> 会返回相同的结果，可以用来传递请求特定的数据<br></code></pre></td></tr></table></figure><h4><span id="11-设计原理">1.1 设计原理</span></h4><p>context.Context 的最大作用是在 Goroutine构成的树形结构中，对信号进行同步，进而减少计算资源的浪费。</p><p>Go 服务的每一个请求都是通过单独的 Goroutine 处理，这一点在 net/http 包的源码中有体现，HTTP/RPC 请求的处理器会启动新的 Gouroutine 访问数据库和其他服务。</p><p>如下图所示：</p><img src="/2021/12/31/Cap-5-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B8%8A%E4%B8%8B%E6%96%87-Context/golang-context-usage.png" class title="goroutine 使用 context"><p>我们可能会创建多个Goroutine来处理一次请求，而 context.Context 的作用就是在不同 Goroutine 之间同步特定数据取消信号以及处理请求的截止日期。</p><p>每一个 context.Context 都会从最顶层的 Goroutine 一层一层传递到最下层，context.Context 可以在上层 Goroutine 执行出现错误时，将信号及时同步给下层。</p><h4><span id="12-默认上下文">1.2 默认上下文</span></h4><p>context 包中最常用的方法是：context.Background，context.TODO：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Background</span>()</span> <span class="hljs-type">Context</span> &#123;<br><span class="hljs-keyword">return</span> background<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TODO</span>()</span> <span class="hljs-type">Context</span> &#123;<br><span class="hljs-keyword">return</span> todo<br>&#125;<br></code></pre></td></tr></table></figure><p>Background() 返回预先初始化好的私有变量 background，TODO() 返回预先初始化好的私有变量 todo，可以在一个 Go 程序中复用。</p><p>background 和 todo 的初始化如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> (<br>background = <span class="hljs-keyword">new</span><span class="hljs-type"></span>(emptyCtx)<br>todo       = <span class="hljs-keyword">new</span><span class="hljs-type"></span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure><p>本质上是指向 context.emptyCtx 的指针，是最简单，最常用的上下文类型，context.emptyCtx 实现了 Context 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> emptyCtx <span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Deadline</span><span class="hljs-params">()</span> <span class="hljs-params">(deadline time.Time, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Done</span><span class="hljs-params">()</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">struct</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Err</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Value</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从源码上看，context.Background 和 context.TODO 互为别名，没有太大的差别，在使用和语义上有不同：</p><ul><li>context.Background 是上下文的默认值，所有其他的上下文都应该从它衍生出来</li><li>context.TODO 在不确定应该使用那种上下文时使用</li></ul><p>在多数情况下，会使用 context.Background 作为起始的上下文向下传递</p><h4><span id="13-取消信号-withcancelwithdeadlinewithtimeout">1.3 取消信号 withCancel()，withDeadline()，withTimeout()</span></h4><p>context.WithCancel 函数能够从 context.Context 中衍生出一个新的子上下文，并返回用于取消该上下文的函数（CancelFunc）。一旦执行返回的取消函数 CancelFunc() ，当前上下文以及它的子上下文都会被取消，所有的 Goroutine 都会同步收到这一取消信号。</p><h5><span id="131-withcancel">1.3.1 withCancel()：</span></h5><p>withCancel() 函数的实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCancel</span><span class="hljs-params">(parent Context)</span> <span class="hljs-params">(ctx Context, cancel CancelFunc)</span></span> &#123;<br>c := newCancelCtx(parent) <span class="hljs-comment">// 包装成私有结构体 cancelCtx</span><br>propagateCancel(parent, &amp;c) <span class="hljs-comment">// 构建父子上下文之间的关联</span><br><span class="hljs-keyword">return</span> &amp;c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="132-newcancelctx">1.3.2 newCancelCtx()：</span></h5><p>newCancelCtx() 函数的实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 返回一个经过初始化的 cancelCtx 结构体</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newCancelCtx</span>(parent <span class="hljs-type">Context</span>)</span> cancelCtx &#123;<br><span class="hljs-keyword">return</span> cancelCtx&#123;<span class="hljs-type">Context</span>: parent&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="133-cancelctx-结构体">1.3.3 cancelCtx 结构体</span></h5><p>cancelCtx 实现了 context.Context 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;<br>Context     <span class="hljs-comment">// 内嵌Context</span><br>    <br>mu       sync.Mutex            <span class="hljs-comment">// 互斥锁，用于并发访问以下字段</span><br>done     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;         <span class="hljs-comment">// 当前层级的上下文是否取消</span><br>children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// 构建父，子上下文之间的关联，key-后代对象 value-无意义</span><br>err      error                 <span class="hljs-comment">// 错误信息，context 因何原因终止</span><br>&#125;<br><br><span class="hljs-comment">// 重写以下方法 Deadline() 对于 withCancel() 无实际意义，故没有实现，继承 Context 的空 Deadline()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span> <span class="hljs-title">Value</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">if</span> key == &amp;cancelCtxKey &#123;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><span class="hljs-keyword">return</span> c.Context.Value(key)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span> <span class="hljs-title">Done</span><span class="hljs-params">()</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">struct</span></span>&#123;&#125; &#123;<br>c.mu.Lock()<br><span class="hljs-keyword">if</span> c.done == <span class="hljs-literal">nil</span> &#123;<br>c.done = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br>d := c.done<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> d<br>&#125;<br><br><span class="hljs-comment">// 只返回 err，具体的error在 cancel() 中被设定</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span> <span class="hljs-title">Err</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br>c.mu.Lock()<br>err := c.err<br>c.mu.Unlock()<br><span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="134-propagatecancel-的实现">1.3.4 propagateCancel() 的实现：</span></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">propagateCancel</span><span class="hljs-params">(parent Context, child canceler)</span></span> &#123;<br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// 父上下文不会触发取消信号，直接返回</span><br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-done:<br><span class="hljs-comment">// 父上下文已经被取消，取消 child</span><br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>&#125;<br>    <br>    <span class="hljs-comment">// 父上下文没有被取消</span><br><span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;<br>p.mu.Lock()<br><span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<br>child.cancel(<span class="hljs-literal">false</span>, p.err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;<br>p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br><span class="hljs-comment">// child 加入到 parent 的 children 中</span><br>p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>p.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>atomic.AddInt32(&amp;goroutines, +<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 新开一个Goroutine</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 监听 parent.Done()</span><br><span class="hljs-keyword">case</span> &lt;-parent.Done():<br>    <span class="hljs-comment">// 取消 child</span><br>child.cancel(<span class="hljs-literal">false</span>, parent.Err())<br><span class="hljs-comment">// 监听 child.Done()</span><br><span class="hljs-keyword">case</span> &lt;-child.Done():<br>&#125;<br>&#125;()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parentCancelCtx</span><span class="hljs-params">(parent Context)</span> <span class="hljs-params">(*cancelCtx, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>done := parent.Done()<br><span class="hljs-keyword">if</span> done == closedchan || done == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>p, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>p.mu.Lock()<br>ok = p.done == done<br>p.mu.Unlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> p, <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>propagateCancel() 函数逻辑：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 当 parent.Done() == nil，也就是 parent不会触发取消事件时，当前函数会直接返回；<br><span class="hljs-bullet">2.</span> 当 child 的继承链包含可以取消的上下文时，会判断 parent是否已经触发了取消信号；<br><span class="hljs-bullet">    -</span> 如果已经被取消，child 会立刻被取消；<br><span class="hljs-bullet">    -</span> 如果没有被取消，child 会被加入 parent 的 children列表中，等待 parent 释放取消信号；<br><span class="hljs-bullet">3.</span> 在默认情况下<br><span class="hljs-bullet">    -</span> 运行一个新的 Goroutine 同时监听 parent.Done() 和child.Done() 两个 Channel<br><span class="hljs-bullet">    -</span> 在 parent.Done() 关闭时调用 child.cancel 取消子上下文；<br></code></pre></td></tr></table></figure><h5><span id="135-cancelctxcancel">1.3.5 cancelCtx.cancel()：</span></h5><p>cancel() 的实现：</p><p>cancelCtx中最重要的方法，关闭上下文中的 Channel 并向所有的子上下文同步取消信号。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func (c *cancelCtx) cancel(removeFromParent bool, err error) &#123;<br><span class="hljs-keyword">if</span> err == nil &#123;<br>panic(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)<br>&#125;<br>c<span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Lock</span>()<br><span class="hljs-keyword">if</span> c<span class="hljs-selector-class">.err</span> != nil &#123;<br>c<span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Unlock</span>()<br>return <span class="hljs-comment">// already canceled</span><br>&#125;<br><span class="hljs-comment">// 此处设定 context 取消的原因</span><br>c<span class="hljs-selector-class">.err</span> = err<br><span class="hljs-comment">// 关闭 done，通知派生 context</span><br><span class="hljs-keyword">if</span> c<span class="hljs-selector-class">.done</span> == nil &#123;<br>c<span class="hljs-selector-class">.done</span> = closedchan<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>close(c.done)<br>&#125;<br><span class="hljs-comment">// 关闭当前 context 的全部子上下文</span><br><span class="hljs-keyword">for</span> child := range c<span class="hljs-selector-class">.children</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> acquiring the child&#x27;s lock while holding parent&#x27;s lock.</span><br>child<span class="hljs-selector-class">.cancel</span>(false, err)<br>&#125;<br>c<span class="hljs-selector-class">.children</span> = nil<br>c<span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Unlock</span>()<br>    <br>    <span class="hljs-comment">// 除了第一个 context，都需要将其从 parent 的 childern 中移除</span><br><span class="hljs-keyword">if</span> removeFromParent &#123;<br>removeChild(c<span class="hljs-selector-class">.Context</span>, c)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// removeChild removes a context from its parent.</span><br>func removeChild(parent Context, child canceler) &#123;<br><span class="hljs-selector-tag">p</span>, ok := parentCancelCtx(parent)<br><span class="hljs-keyword">if</span> !ok &#123;<br>return<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Lock</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.children</span> != nil &#123;<br>delete(<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.children</span>, child)<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="136-withdeadline">1.3.6 WithDeadline()</span></h5><p>withDeadline() 创建可以被取消的计时器上下文 context.timerCtx，withDeadline() 的具体实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent Context, d time.Time)</span> <span class="hljs-params">(Context, CancelFunc)</span></span> &#123;<br>    <span class="hljs-comment">// 判断父上下文的截止日期，当前日期</span><br><span class="hljs-keyword">if</span> cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) &#123;<br><span class="hljs-comment">// The current deadline is already sooner than the new one.</span><br><span class="hljs-keyword">return</span> WithCancel(parent)<br>&#125;<br><span class="hljs-comment">// 创建 timeCtx</span><br>c := &amp;timerCtx&#123;<br>cancelCtx: newCancelCtx(parent),<br>deadline:  d,<br>&#125;<br><span class="hljs-comment">// 维持父子上下文之间的关联</span><br>propagateCancel(parent, c)<br>dur := time.Until(d)<br><span class="hljs-keyword">if</span> dur &lt;= <span class="hljs-number">0</span> &#123;<br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded) <span class="hljs-comment">// deadline has already passed</span><br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">false</span>, Canceled) &#125;<br>&#125;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-comment">// 创建 定时器</span><br>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 超过deadline，同步取消信号</span><br>c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded)<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>timerCtx 结构体的定义如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">type timerCtx struct &#123;<br>cancelCtx   <span class="hljs-comment">// 内嵌 cancelCtx，继承了变量和方法</span><br><br>timer *<span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Timer</span> <span class="hljs-comment">// 定时器</span><br><br>deadline <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Time</span>  <span class="hljs-comment">// 过期时间</span><br>&#125;<br><br><span class="hljs-comment">// 重写 Deadline()</span><br>func (c *timerCtx) Deadline() (deadline <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Time</span>, ok bool) &#123;<br>return c<span class="hljs-selector-class">.deadline</span>, true<br>&#125;<br><br><span class="hljs-comment">// timerCtx.cancel()</span><br>func (c *timerCtx) cancel(removeFromParent bool, err error) &#123;<br>    <span class="hljs-comment">// 调用cancelCtx.cancel()</span><br>c<span class="hljs-selector-class">.cancelCtx</span><span class="hljs-selector-class">.cancel</span>(false, err)<br><span class="hljs-keyword">if</span> removeFromParent &#123;<br><span class="hljs-comment">// Remove this timerCtx from its parent cancelCtx&#x27;s children.</span><br>removeChild(c<span class="hljs-selector-class">.cancelCtx</span><span class="hljs-selector-class">.Context</span>, c)<br>&#125;<br>c<span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Lock</span>()<br><span class="hljs-keyword">if</span> c<span class="hljs-selector-class">.timer</span> != nil &#123;<br>    <span class="hljs-comment">// 停止 定时器</span><br>c<span class="hljs-selector-class">.timer</span><span class="hljs-selector-class">.Stop</span>()<br>c<span class="hljs-selector-class">.timer</span> = nil<br>&#125;<br>c<span class="hljs-selector-class">.mu</span><span class="hljs-selector-class">.Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="137-withtimeout">1.3.7 withTimeout()</span></h5><p>withTimeout() 实际上调用了 WithDeadlione()：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithTimeout(<span class="hljs-params">parent</span> Context, <span class="hljs-params">timeout</span> <span class="hljs-params">time</span>.Duration)</span> (Context, CancelFunc) &#123;<br>return <span class="hljs-constructor">WithDeadline(<span class="hljs-params">parent</span>, <span class="hljs-params">time</span>.Now()</span>.<span class="hljs-constructor">Add(<span class="hljs-params">timeout</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="14-传值方法-withvalue">1.4 传值方法 withValue()</span></h4><p>context.withValue() 提供了父子上下文之间传值的可能：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithValue(<span class="hljs-params">parent</span> Context, <span class="hljs-params">key</span>, <span class="hljs-params">val</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> Context &#123;<br><span class="hljs-keyword">if</span> key<span class="hljs-operator"> == </span>nil &#123;<br>panic(<span class="hljs-string">&quot;nil key&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> !reflectlite.<span class="hljs-constructor">TypeOf(<span class="hljs-params">key</span>)</span>.<span class="hljs-constructor">Comparable()</span> &#123;<br>panic(<span class="hljs-string">&quot;key is not comparable&quot;</span>)<br>&#125;<br>return &amp;valueCtx&#123;parent, key, <span class="hljs-keyword">val</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>valueCtx 结构体的实现：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;<br>Context <span class="hljs-comment">// 内嵌 Context</span><br><span class="hljs-built_in">key</span>, val interface&#123;&#125;<br>&#125;<br><span class="hljs-comment">// 重写 Value()</span><br><span class="hljs-built_in">func</span> (c *valueCtx) <span class="hljs-built_in">Value</span>(<span class="hljs-built_in">key</span> interface&#123;&#125;) interface&#123;&#125; &#123;<br>    <span class="hljs-comment">// 与 valueCtx 中存储的键值对匹配</span><br><span class="hljs-keyword">if</span> c.key == <span class="hljs-built_in">key</span> &#123;<br><span class="hljs-keyword">return</span> c.val<br>&#125;<br><span class="hljs-comment">// 若不匹配，从 parent 中查找对应的值，不存在返回 nil</span><br><span class="hljs-keyword">return</span> c.Context.<span class="hljs-built_in">Value</span>(<span class="hljs-built_in">key</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>context.valueCtx 结构体会将除了 Value 之外的 Err、Deadline等方法代理到父上下文中，它只会响应context.valueCtx.Value 方法。</p><p>Value() 执行逻辑：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">1</span>. 匹配valueCtx中的 <span class="hljs-built_in">key</span> <span class="hljs-keyword">and</span> val<br><span class="hljs-number">2</span>. 如果 <span class="hljs-built_in">context</span>.valueCtx 中存储的键值对与 <span class="hljs-built_in">context</span>.valueCtx.Value 方法中传入的参数不匹配，<br>就会从父上下文中查找该键对应的值直到在某个父上下文中返回 nil 或者查找到对应的值<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 4: 内存管理 -- 垃圾回收器</title>
    <link href="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
    <url>/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>TODO:<br>图、内容较多，待更新</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 4: 内存管理 -- 内存分配器</title>
    <link href="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/"/>
    <url>/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3><span id="1内存分配器">1.内存分配器</span></h3><p>编程语言的内存分配和操作系统的内存分配，是有很大差别的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.OS的内存管理包括两部分：物理内存管理，虚拟内存管理<br>2.编程语言侧重于对程序所在的虚拟内存的管理，其中包括堆和栈<br></code></pre></td></tr></table></figure><h4><span id="11-os的内存管理-编程语言内存分配的基础">1.1 OS的内存管理 – 编程语言内存分配的基础</span></h4><p>参考链接： <a href="https://blog.csdn.net/hguisu/article/details/5713164">操作系统内存管理</a></p><p>包括物理内存管理和虚拟内存管理两部分，其中：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.物理内存管理：<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">1</span> 程序装入(局部性原理)<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> 交换技术<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">3</span> 连续分配管理<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">4</span> 非连续分配管理(分页，分段，段页式)<br><span class="hljs-attribute">2</span>.虚拟内存管理<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> 虚拟内存<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> 请求分页管理<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">3</span> 页面置换算法(FIFO,LRU等)<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">4</span> 页面分配策略<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">5</span> 工作集<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">6</span> 抖动<br></code></pre></td></tr></table></figure><h5><span id="111-物理内存">1.1.1 物理内存</span></h5><h6><span id="分类">分类</span></h6><p>真实插在计算机上的存储设备，按照功能将其分为以下类别：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1.CPU Cache：<br><span class="hljs-bullet">- </span>位于CPU与内存之间的临时存储器，容量很小，但是交换速度高于内存。<br><span class="hljs-bullet">- </span>缓存的出现主要是为了解决CPU运算速度与内存读写速度不匹配的矛盾，实际上是CPU计算太快了，现有的内存读写速度太慢了，使得CPU需要等待数据到来或者把数据写入内存<br><br>2.RAM，内存，主存：Random Access Memory 随机存取存储器<br><span class="hljs-bullet">- </span>与CPU直接交换数据的内部存储器，特性包括：随机读写，速度较快<br><span class="hljs-bullet">- </span>通常作为操作系统或者其他正在运行中的程序的临时数据存储介质<br><span class="hljs-bullet">- </span>断电后，RAM中的数据会丢失<br><br>3.磁盘：<br><span class="hljs-bullet">- </span>与主存直接交换数据的外部存储器，容量很大，但是读/写磁盘较慢<br><span class="hljs-bullet">- </span>断电后，磁盘的数据不会丢失<br></code></pre></td></tr></table></figure><h6><span id="覆盖交换技术">覆盖+交换技术</span></h6><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">覆盖：<br>将程序分为多个段，常用的段常驻内存，其他不常用的段存储于外存<span class="hljs-comment">(磁盘)</span>，在使用的时候调入内存<br><br>交换：<br>内存空间紧张时，系统将内存中的某些进程暂时换出到外存，把外存中的已具备运行条件的进程换入内存<br></code></pre></td></tr></table></figure><h6><span id="连续分配管理">连续分配管理</span></h6><p>包含以下几种：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.单一连续分配<br><span class="hljs-attribute">2</span>.固定分区分配<br><span class="hljs-attribute">3</span>.动态分区分配（<span class="hljs-number">4</span>种动态分配算法）<br></code></pre></td></tr></table></figure><p>单一连续分配：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">实现：内存分为系统区和用户区，系统区存放操作系统的相关数据，用户区存放用户进程相关数据，内存中只能由一道用户程序，独占整个用户区空间<br>优点：实现简单<br>缺点：只能用户单用户，单任务OS，利用率低，有碎片<br></code></pre></td></tr></table></figure><p>固定分区分配：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">实现：支持多道程序系统，将用户区划分为若干固定大小的分区，在每个分区装入一道作业。且使用一个链表结构，存储分区说明白表，来实现各个分区的分配和回收<br>优点：实现简单<br>缺点：利用率低，有碎片<br></code></pre></td></tr></table></figure><p>动态分区分配：<strong>每个分区不一定连续，用链表存储分区信息</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">实现：在进程装入内存时，根据进程大小动态创建分区，使得分区的大小正好适合进程的需要<br>具体实现包含了4中算法：<br><span class="hljs-bullet">- </span>首次适应<br><span class="hljs-bullet">- </span>最佳适应<br><span class="hljs-bullet">- </span>最坏适应<br><span class="hljs-bullet">- </span>邻近适应<br></code></pre></td></tr></table></figure><p>首次适应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">每次都从低地址开始查找, 找到第一个能满足大小的空闲分区<br>实现：把空闲分区按地址递增的次序排列<br>每次分配内存时顺序地查找空闲分区链, 找到大小能满足要求的第一个空闲分区<br></code></pre></td></tr></table></figure><p>最佳适应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">实现：空闲分区按容量递增次序链接，每次分配内存时顺序查找空闲分区链,找到大小能满足要求的第一个空闲分区<br>缺点：每次都选择最小的分区进行分配, 会留下越来越多的容量很小难以利用的内存块,即产生很多的外部碎片<br></code></pre></td></tr></table></figure><p>最坏适应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">优先使用大的空闲分区<br>实现：空闲分区按容量递减次序链接<br>缺点：每次都选用最大的分区进行分配, 当较大的连续空闲区被小号之后, 如果有大进程到来则没有内存分区可以利用<br></code></pre></td></tr></table></figure><p>邻近适应：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">在首次适应算法的基础上, 每次都从上次查找结束的位置开始查找空闲分区链<span class="hljs-comment">(表)</span>,找到大小能满足的第一个空闲分区<br>缺点：邻近适应算法导致无论低地址还是高地址的空闲分区都有相同的概率被使用, 也就导致了高地址部分的大分区更可能被使用划分为小分区, 最后导致没有大分区可用<br></code></pre></td></tr></table></figure><p>几种方法的比较：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">综合来看, 首次适应算法的性能最好<br>算法开销大：最佳适应法, 最坏适应法 <span class="hljs-comment">( 需要经常排序)</span><br>算法开销小：首次适应算法, 邻近适应算法<br></code></pre></td></tr></table></figure><h6><span id="非连续分配管理-离散不连续逻辑地址-gt-物理地址">非连续分配管理 – 离散，不连续，逻辑地址 -&gt; 物理地址</span></h6><p>引入非连续分配管理，是为了解决连续内存管理存在的一些问题：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>分配给程序的物理内存必须连续<br><span class="hljs-bullet">- </span>存在外碎片和内碎片<br><span class="hljs-bullet">- </span>内存分配的动态修改困难<br><span class="hljs-bullet">- </span>内存利用率较低<br></code></pre></td></tr></table></figure><p>非连续内存分配管理主要分为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 段式存储管理<br><span class="hljs-bullet">2.</span> 页式存储管理<br><span class="hljs-bullet">3.</span> 段页式存储管理<br></code></pre></td></tr></table></figure><h5><span id="112-地址空间-虚拟地址">1.1.2 地址空间 – 虚拟地址</span></h5><p>在没有引入内存地址之前，系统or程序直接访问和操作物理内存，内存的管理非常简单，但是带来了很多的问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 用户程序可以访问任意内存，容易破坏操作系统，造成崩溃<br><span class="hljs-bullet">2.</span> 同时运行多个程序特别困难<br></code></pre></td></tr></table></figure><p>上述问题的解决：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1.</span>引入了多进程技术 - 某一时刻只运行一个进程，ready态的进程间相互切换<br><span class="hljs-number">2.</span>引入了地址空间 Address Space， 对物理内存的抽象 - 每一个具体的进程的内存空间，包含了该进程所有相关内存，如：code/stack/heap<br></code></pre></td></tr></table></figure><p>地址空间本质上是，虚拟地址 – 虚拟内存上分配的地址</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-number">1</span>.进程执行时，看到和使用到的内存地址都是虚拟地址<br><span class="hljs-number">2</span>.OS中的MMU(内存管理单元-Memory Management <span class="hljs-keyword">Unit</span>)，将虚拟地址转换为物理地址<br></code></pre></td></tr></table></figure><h5><span id="112-虚拟内存-覆盖交换局部性原理">1.1.2 虚拟内存 – 覆盖，交换，局部性原理</span></h5><p>虚拟内存是一种运行进程部分装入内存就可以执行的技术，基于局部性原理实现，只需要把当前需要执行的程序内容装入内存即可。这个时候用户看到的逻辑地址空间远大于物理地址空间，需要通过页面的频繁换入，换出实现。</p><h6><span id="基本思想">基本思想：</span></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">每个进程有独立的逻辑地址空间，内存被分为大小相等的多个块，称为页。<br>每个页都是一段连续的地址。<br>对于进程而言，逻辑上有很大的内存空间，其中一部分对应物理内存上的一块，还有一些没有加载在内存中，对应在硬盘上。<br></code></pre></td></tr></table></figure><h6><span id="请求调页">请求调页</span></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.依照程序局部性原理，取出要使用的页，将其装入内存<br>2.当发生缺页时，产生缺页中断，将外存上的页调入内存<br>3.内存中无空间时，将部分页面换出内存<br></code></pre></td></tr></table></figure><h6><span id="页面调入策略">页面调入策略</span></h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>预调页策略：主动的页面调入策略<br>即把那些预计很快会被访问的程序或数据所在的页面，预先调入内存；这个策略的性能取决于预测的准确率，预测的准确率不高（<span class="hljs-number">50</span><span class="hljs-operator">%</span>），主要用于进程的首次调入。也有的系统将预调页策略用于请求调页。<br><span class="hljs-number">2.</span>请求调页策略：<br>当进程在运行中发生缺页时，由系统将缺页调入内存；<br>目前虚拟存储器系统大多采用此策略；但在调页时须花费较大的系统开销，如需频繁启动磁盘<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>。<br></code></pre></td></tr></table></figure><h6><span id="页面置换算法">页面置换算法</span></h6><p>常用页面置换算法如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.最佳算法 <span class="hljs-meta">OPT</span><br><span class="hljs-number">2</span>.先进先出置换算法 FITO<br><span class="hljs-number">3</span>.最近最久未使用置换算法 LRU<br></code></pre></td></tr></table></figure><p>最佳算法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">思想：最佳算法中被置换的页将是之后最长时间不被使用的页<br>用处：最佳算法只是理论上最优的算法，现实中是无法实现的，我们通常用它来衡量其他算法的性能<br></code></pre></td></tr></table></figure><p>先进先出置换算法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">思想：选择最近最少使用的页进行置换<br>性能：比最佳算法差了一倍<br></code></pre></td></tr></table></figure><p>LRU：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">思想：按照内存先来先得，先进来的先出去这种方式来选择置换的页<br>性能：性能最好，且能实现<br></code></pre></td></tr></table></figure><h6><span id="抖动">抖动</span></h6><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">抖动 <span class="hljs-comment">(Thrashing)</span>：<br>如果进程分配到的帧数量小于计算机体系结构所要求的最小数量，那么必须暂停进行执行。<br>并将其置换出去，使其所有分配帧空闲。<br>这么做的原因就是如果进程没有这些必需的帧，那么很快会出现缺页，此时需置换某个页，然而，其所有页都在使用，置换出去的页立刻又需要置换进来，因此，会不断的产生缺页。这种频繁的调页行为称作抖动 <span class="hljs-comment">(Thrashing)</span>，也叫颠簸。<br></code></pre></td></tr></table></figure><h3><span id="2设计原理">2.设计原理</span></h3><p>内存管理一般包括三个不同的组件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.用户程序<br>2.分配器<br>3.收集器<br></code></pre></td></tr></table></figure><p>组件间关系如下图：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/mutator-allocator-collector.png" class title="内存分配各组件"><h4><span id="21-堆-amp-栈">2.1 堆 &amp; 栈</span></h4><p>程序中的数据和变量都会被分配到程序所在的虚拟内存中，内存空间包含两个重要区域 — 栈区（Stack）和堆区（Heap）</p><p>两者的比较如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 堆：<br>1.程序运行时申请的动态内存<br>2.不同编程语言使用不同的方式管理堆区的内存：<br><span class="hljs-bullet">    -</span> c/c++等编程语言会由工程师主动申请和释放内存<br><span class="hljs-bullet">    -</span> Golang和Java等编程语言主要交由编译器管理，堆中的对象内存由内存分配器分配并由垃圾收集器回收<br><br><span class="hljs-bullet">-</span> 栈：<br>1.函数调用的参数，返回值，局部变量大都会被分配到栈上<br>2.栈上的内存由编译器进行管理<br></code></pre></td></tr></table></figure><p><strong>我们所说的内存分配和垃圾回收，主要是针对堆上的内存</strong></p><h4><span id="22-分配方法-编程语言的内存分配器">2.2 分配方法 – 编程语言的内存分配器</span></h4><p>编程语言的内存分配器一般包含两种分配方法：</p><ul><li>线性分配器（Sequential Allocator，Bump Allocator）</li><li>空闲链表分配器（Free-List Allocator）</li></ul><p>Golang采用的是分级分配方法</p><h5><span id="221-线性分配器">2.2.1 线性分配器</span></h5><p>思想：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1.在内存中维护一个指向内存特定位置的指针<br>2.程序申请内存时：<br><span class="hljs-bullet">- </span>分配器检查剩余的空闲内存，返回分配的内存区域<br><span class="hljs-bullet">- </span>修改指针的位置<br></code></pre></td></tr></table></figure><p>优点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.执行速度较快<br>2.实现较为简单<br></code></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1.无法重用被释放的内存：没有记录被释放的内存的位置，只能向后继续分配并使用内存<br></code></pre></td></tr></table></figure><p><strong>适用的垃圾回收算法：具有拷贝特性的GC算法，能够通过拷贝的方式整理存活对象的碎片，将空闲空间定期合并</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.标记压缩<br>2.复制回收<br>3.分代回收<br></code></pre></td></tr></table></figure><h5><span id="222-空闲链表分配器">2.2.2 空闲链表分配器</span></h5><p>思想：时间复杂度为O(n)</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1.维护一个关于空闲内存块信息的链表（内存块大小，内存块开始位置等信息）<br>2.程序申请内存时：<br><span class="hljs-bullet">- </span>依次遍历空闲的内存块，找到足够大空间的内存块<br><span class="hljs-bullet">- </span>申请资源<br><span class="hljs-bullet">- </span>修改链表<br></code></pre></td></tr></table></figure><p>联想到上面提到的 <strong>动态分区分配</strong>，常用策略有以下四种：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>首次适应（<span class="hljs-built_in">First</span><span class="hljs-operator">-</span><span class="hljs-built_in">Fit</span>）：<br><span class="hljs-operator">-</span> 从链表头开始遍历，选择第一个大小大于申请内存的内存块<br><span class="hljs-number">2.</span>循环首次适应（<span class="hljs-built_in">Next</span><span class="hljs-operator">-</span><span class="hljs-built_in">Fit</span>）<br><span class="hljs-operator">-</span> 从上次遍历的结束位置开始遍历，选择第一个大小大于申请内存的内存块<br><span class="hljs-number">3.</span>最优适应（<span class="hljs-variable">Best</span><span class="hljs-operator">-</span><span class="hljs-built_in">Fit</span>）<br><span class="hljs-operator">-</span> 从链表头遍历整个链表，选择最合适的内存块<br><span class="hljs-number">4.</span>隔离适应（<span class="hljs-variable">Segregated</span><span class="hljs-operator">-</span><span class="hljs-built_in">Fit</span>）<br><span class="hljs-operator">-</span> 将内存分割成多个链表，每个链表中的内存块大小相同，申请内存时先找到满足条件的链表，再从链表中选择合适的内存块<br></code></pre></td></tr></table></figure><p>需要注意的是：<strong>隔离适应策略</strong>，Golang使用的内存分配策略与隔离适应策略思想相同</p><h5><span id="223-隔离适应策略">2.2.3 隔离适应策略</span></h5><p>思想：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1.将内存分割成4,8,16,32字节的内存块，再将相同大小的内存块组成链表<br>2.程序申请内存时：<br><span class="hljs-bullet">- </span>根据要分配的内存块大小，找到对应的链表<br><span class="hljs-bullet">- </span>在对应的链表上，找到空闲的内存块并返回<br><span class="hljs-bullet">- </span>修改链表信息<br></code></pre></td></tr></table></figure><p>实现示意图：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/segregated-list.png" class title="隔离适应策略对内存块按照 字节分割"><h4><span id="23-分级分配-golang采用的内存分配方法">2.3 分级分配 – Golang采用的内存分配方法</span></h4><p>核心思想：<strong>使用多级缓存，将对象根据大小分类，按照类别实施不同的分配策略</strong></p><h5><span id="231-对象类别和大小">2.3.1 对象类别和大小：</span></h5><table><thead><tr><th>类别</th><th>大小</th></tr></thead><tbody><tr><td>微对象</td><td>(0, 16B)</td></tr><tr><td>小对象</td><td>[16B, 32KB]</td></tr><tr><td>大对象</td><td>(32KB, 无穷大)</td></tr></tbody></table><h5><span id="232-多级缓存">2.3.2 多级缓存</span></h5><p>Golang运行时引入了线程缓存（Thread Cache）、中心缓存（Central Cache）和页堆（Page Heap）三个组件分级管理内存：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/multi-level-cache.png" class title="多级缓存模型"><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>线程缓存属于每一个独立的线程，它能够满足线程上绝大多数的内存分配需求，因为不涉及多线程，所以也不需要使用互斥锁来保护内存，这能够减少锁竞争带来的性能损耗。<br><span class="hljs-bullet">- </span>当线程缓存不能满足需求时，就会使用中心缓存作为补充解决小对象的内存分配问题。<br><span class="hljs-bullet">- </span>在遇到 32KB 以上的对象时，内存分配器就会选择页堆直接分配大量的内存。<br></code></pre></td></tr></table></figure><h4><span id="24-golang的虚拟内存布局-堆区内存地址空间的设计">2.4 Golang的虚拟内存布局 – 堆区内存地址空间的设计</span></h4><p>随着Golang版本的不断更新，Golang在堆区内存地址空间的设计上有了很大的变更：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.Golang</span> <span class="hljs-number">0</span><span class="hljs-selector-class">.x</span> ~ Golang <span class="hljs-number">1.0</span>：<br>- 堆区空间连续设计<br><span class="hljs-number">2</span><span class="hljs-selector-class">.Golang</span> <span class="hljs-number">1.1</span> ~ 至今：<br>- 稀疏的堆内存空间<br></code></pre></td></tr></table></figure><h5><span id="241-线性内存-堆空间连续">2.4.1 线性内存 - 堆空间连续</span></h5><p>Golang程序启动时会初始化整片虚拟内存区域，spans，bitmap，arena分别预留了512MB,16GB以及512GB的虚拟内存空间。</p><p>线性内存布局示意图：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/heap-before-go-1-11.png" class title="线性内存模型"><p>其中：(通过计算可以验证)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.spans</span> 区域存储了指向内存管理单元 runtime<span class="hljs-selector-class">.mspan</span> 的指针，每个内存单元会管理几页的内存空间，每页大小为 <span class="hljs-number">8</span>KB<br><span class="hljs-number">2</span><span class="hljs-selector-class">.bitmap</span> 用于标识 arena 区域中的那些地址保存了对象，位图中的每个字节都会表示堆区中的 <span class="hljs-number">32</span> 字节是否包含空闲 -- 垃圾回收使用<br><span class="hljs-number">3</span><span class="hljs-selector-class">.arena</span> 区域是真正的堆区，运行时会将 <span class="hljs-number">8</span>KB 看做一页，这些内存页中存储了所有在堆上初始化的对象<br><span class="hljs-number">4</span>.对于任意一个地址，我们都可以根据 arena 的基地址计算该地址所在的页数并通过 spans 数组获得管理该片内存的管理单元 runtime.mspan，spans 数组中多个连续的位置可能对应同一个 runtime.mspan。<br></code></pre></td></tr></table></figure><h5><span id="242-稀疏内存-堆空间不连续">2.4.2 稀疏内存 - 堆空间不连续</span></h5><p>Go 1.1中提出的方案，使用稀疏的内存布局不仅能移除堆大小的上限，还能解决C和Go混合使用时的地址空间冲突问题。</p><p>稀疏内存布局：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/heap-after-go-1-11.png" class title="稀疏内存模型"><p>Go runtime使用二维的runtime.headArena数组管理所有的内存，每个单元都会管理64MB的内存空间：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> heapArena <span class="hljs-keyword">struct</span> &#123;<br>bitmap [heapArenaBitmapBytes]<span class="hljs-keyword">byte</span>   <span class="hljs-comment">// 与线性内存中的bitmap对应</span><br>spans [pagesPerArena]*mspan         <span class="hljs-comment">// 与线性内存中的spans对应</span><br>pageInUse [pagesPerArena / <span class="hljs-number">8</span>]<span class="hljs-keyword">uint8</span>  <span class="hljs-comment">// 使用的页</span><br>pageMarks [pagesPerArena / <span class="hljs-number">8</span>]<span class="hljs-keyword">uint8</span>  <span class="hljs-comment">// 被标记的页，用于GC</span><br>zeroedBase <span class="hljs-keyword">uintptr</span>                  <span class="hljs-comment">// 内存基地址</span><br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="25-golang的地址空间-对os内存管理的抽象">2.5 Golang的地址空间 – 对OS内存管理的抽象</span></h4><p>Golang runtime构建了操作系统的内存管理抽象层，该抽象层将运行时管理的地址空间分成以下的四种状态：</p><table><thead><tr><th>状态</th><th>解释</th></tr></thead><tbody><tr><td>None</td><td>内存没有被保留或者映射，是地址空间的默认状态</td></tr><tr><td>Reserved</td><td>运行时持有该地址空间，但是访问该内存会导致错误</td></tr><tr><td>Prepared</td><td>内存被保留，一般没有对应的物理内存访问该片内存的行为是未定义的可以快速转换到Ready 状态</td></tr><tr><td>Ready</td><td>可以被安全访问</td></tr></tbody></table><p>有了内存状态，自然就涉及到地址空间状态的转换：<br>每一个不同的操作系统都会包含一组特定的方法，这些方法可以让内存地址空间在不同的状态之间做出转换：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/memory-regions-states-and-transitions.png" class title="内存区域状态 &amp; 状态之间的转换"><p>golang runtime中设计了多个操作系统对状态转换方法的实现，所有的实现包含在了以mem_开头的文件中，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">mem_linux.<span class="hljs-keyword">go</span>：linux系统的实现<br>mem_windows.<span class="hljs-keyword">go</span>：windows系统的实现<br>mem_darwin.<span class="hljs-keyword">go</span>：Darwin平台上的实现<br></code></pre></td></tr></table></figure><p>查看go runtime代码：<a href="https://github.com/golang/go/tree/383b447e0da5bd1fcdc2439230b5a1d3e3402117/src/runtime">go/src/runtime at 383b447e0da5bd1fcdc2439230b5a1d3e3402117</a></p><p>以Linux平台上的实现为例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>runtime.sysAlloc 会从操作系统中获取一大块可用的内存空间，可能为几百 KB 或者几 MB<br><span class="hljs-bullet">- </span>runtime.sysFree 会在程序发生内存不足（Out-of Memory，OOM）时调用并无条件地返回内存<br><span class="hljs-bullet">- </span>runtime.sysReserve 会保留操作系统中的一片内存区域，对这片内存的访问会触发异常<br><span class="hljs-bullet">- </span>runtime.sysMap 保证内存区域可以快速转换至准备就绪<br><span class="hljs-bullet">- </span>runtime.sysUsed 通知操作系统应用程序需要使用该内存区域，需要保证内存区域可以安全访问<br><span class="hljs-bullet">- </span>runtime.sysUnused 通知操作系统虚拟内存对应的物理内存已经不再需要了，它可以重用物理内存<br><span class="hljs-bullet">- </span>runtime.sysFault 将内存区域转换成保留状态，主要用于运行时的调试<br></code></pre></td></tr></table></figure><h3><span id="3内存管理组件">3.内存管理组件</span></h3><p>Go 语言的内存分配器包含内存管理单元、线程缓存、中心缓存和页堆，对应数据结构：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">内存管理单元：<span class="hljs-keyword">runtime</span>.mspan<br>线程缓存：<span class="hljs-keyword">runtime</span>.mcache<br>中心缓存：<span class="hljs-keyword">runtime</span>.mcentral<br>页堆：<span class="hljs-keyword">runtime</span>.mheap<br></code></pre></td></tr></table></figure><p>Golang内存布局如下：</p><img src="/2021/12/31/Cap-4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/go-memory-layout.png" class title="golang 内存布局"><h4><span id="31-内存管理单元-mspan">3.1 内存管理单元 mspan</span></h4><p>runtime.mspan 是 Go 语言内存管理的基本单元，该结构体中包含 next 和 prev 两个字段，它们分别指向了前一个和后一个 runtime.mspan：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">type mspan struct &#123;<br>    <span class="hljs-keyword">next</span> *mspan         <span class="hljs-regexp">//</span> 前向指针<br>    prev *mspan         <span class="hljs-regexp">//</span> 后向指针<br>    startAddr uintptr   <span class="hljs-regexp">//</span> 起始地址<br>    npages    uintptr   <span class="hljs-regexp">//</span> 管理的页数<br>    freeindex uintptr   <span class="hljs-regexp">//</span> 空闲对象的初始索引<br>    <br>    nelems uintptr      <span class="hljs-regexp">//</span> 块个数，有多少个块可供分配<br>    allocBits *gcBits   <span class="hljs-regexp">//</span> 分配位图（块是否被分配）<br>    gcmarkBits *gcBits  <span class="hljs-regexp">//</span> 标记位图（用于GC）<br>    <br>    allocCount uint16   <span class="hljs-regexp">//</span> 已分配块的个数<br>    spanClass spanClass <span class="hljs-regexp">//</span> 跨度类 - 存储的对象大小和个数<br>    elemsize uintptr    <span class="hljs-regexp">//</span> 块大小<br>    <br>    state mSpanStateBox <span class="hljs-regexp">//</span> 内存管理单元的状态：mSpanDead，mSpanInUse，mSpanManual，mSpanFree<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>通过next和prev串联后，得到双向链表runtime.mSpanList，存储双向链表的头结点和尾节点并在线程缓存以及中心缓存使用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> mSpanList heads a linked list of spans.<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//g</span>o:notinheap<br>type mSpanList struct &#123;<br>first *mspan <span class="hljs-regexp">//</span> first span <span class="hljs-keyword">in</span> list, or nil <span class="hljs-keyword">if</span> none<br>last  *mspan <span class="hljs-regexp">//</span> last span <span class="hljs-keyword">in</span> list, or nil <span class="hljs-keyword">if</span> none<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="311-mspan中管理的-页和内存">3.1.1 mspan中管理的 页和内存</span></h5><p>每个 span 管理 npage 个大小为8KB的页(虚拟内存中的页，实际大小为操作系统页的整数倍)，涉及到的字段如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> mspan <span class="hljs-keyword">struct</span> &#123;<br>startAddr <span class="hljs-keyword">uintptr</span> <span class="hljs-comment">// 起始地址</span><br>npages    <span class="hljs-keyword">uintptr</span> <span class="hljs-comment">// 页数</span><br>freeindex <span class="hljs-keyword">uintptr</span><br><br>allocBits  *gcBits<br>gcmarkBits *gcBits<br>allocCache <span class="hljs-keyword">uint64</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>startAddr 和 npages — 确定该结构体管理的多个页所在的内存，每个页的大小都是 8KB<br><span class="hljs-bullet">- </span>freeindex — 扫描页中空闲对象的初始索引<br><span class="hljs-bullet">- </span>allocBits 和 gcmarkBits — 分别用于标记内存的占用和回收情况<br><span class="hljs-bullet">- </span>allocCache — allocBits 的补码，可以用于快速查找内存中未被使用的内存<br></code></pre></td></tr></table></figure><p>内存分配过程：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">当用户程序或者线程向 runtime<span class="hljs-selector-class">.mspan</span> 申请内存时，<br>该结构会使用 allocCache(allocBits的补码) 字段以对象为单位在管理的内存中快速查找待分配的空间：<br><span class="hljs-number">1</span>.能找到空闲的内存单元，直接返回<br><span class="hljs-number">2</span>.找不到空闲的内存单元，上一级的组件 runtime<span class="hljs-selector-class">.mcache</span> 会为调用 runtime<span class="hljs-selector-class">.mcache</span><span class="hljs-selector-class">.refill</span><br>更新内存管理单元以满足为更多对象分配内存的需求<br></code></pre></td></tr></table></figure><h5><span id="312-mspan的状态">3.1.2 mspan的状态</span></h5><p>运行时会使用 runtime.mSpanStateBox 结构体存储内存管理单元的状态 runtime.mSpanState：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pf">type mspan struct &#123;<br>...<br><span class="hljs-keyword">state</span>       mSpanStateBox<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>mSpanStateBox结构体 与mSpanState：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> mSpanState <span class="hljs-keyword">uint8</span><br><br><span class="hljs-keyword">const</span> (<br>mSpanDead   mSpanState = <span class="hljs-literal">iota</span><br>mSpanInUse             <span class="hljs-comment">// allocated for garbage collected heap</span><br>mSpanManual            <span class="hljs-comment">// allocated for manual management (e.g., stack allocator)</span><br>)<br><br><span class="hljs-comment">// mSpanStateNames are the names of the span states, indexed by mSpanState.</span><br><span class="hljs-keyword">var</span> mSpanStateNames = []<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-string">&quot;mSpanDead&quot;</span>,<br><span class="hljs-string">&quot;mSpanInUse&quot;</span>,<br><span class="hljs-string">&quot;mSpanManual&quot;</span>,<br><span class="hljs-string">&quot;mSpanFree&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">type</span> mSpanStateBox <span class="hljs-keyword">struct</span> &#123;<br>s mSpanState<br>&#125;<br></code></pre></td></tr></table></figure><p>状态间的转换：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1.当 runtime.mspan 在空闲堆中，它会处于 mSpanFree 状态<br>2.当 runtime.mspan 已经被分配时，它会处于 mSpanInUse、mSpanManual状态，这些状态会在遵循以下规则发生转换：<br><span class="hljs-bullet">- </span>在垃圾回收的任意阶段，可能从 mSpanFree 转换到 mSpanInUse 和 mSpanManual；<br><span class="hljs-bullet">- </span>在垃圾回收的清除阶段，可能从 mSpanInUse 和 mSpanManual 转换到 mSpanFree；<br><span class="hljs-bullet">- </span>在垃圾回收的标记阶段，不能从 mSpanInUse 和 mSpanManual 转换到 mSpanFree；<br></code></pre></td></tr></table></figure><h5><span id="313-spanclass-跨度类-mspan中存储对象大小和个数">3.1.3 spanClass 跨度类 - mspan中存储对象大小和个数</span></h5><p>mspan结构体中的spanClass字段：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> mspan struct &#123;<br>...<br>spanclass   spanClass<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>spanClass的定义：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">type</span> spanClass uint<span class="hljs-number">8</span><br><span class="hljs-attribute">uint8</span>: 前<span class="hljs-number">7</span>位存储跨度类ID：<span class="hljs-number">0</span>-<span class="hljs-number">127</span>，最后<span class="hljs-number">1</span>位表示是否包含指针 <span class="hljs-number">0</span>-不包含指针 <span class="hljs-number">1</span>-包含指针）<br></code></pre></td></tr></table></figure><p>Go 语言的内存管理模块中一共包含 67 种跨度类，<br>每一个跨度类都会存储特定大小的对象并且包含特定数量的页数以及对象，<br>所有的数据都会被预选计算好并存储在 runtime.class_to_size 和 runtime.class_to_allocnpages 等变量中：</p><p>超过 32KB 大小的对象由 ID=0 的class表示</p><table><thead><tr><th>class</th><th>bytes/obj</th><th>bytes/span</th><th>objects</th><th>tail waste</th><th>max waste</th></tr></thead><tbody><tr><td>1</td><td>8</td><td>8192</td><td>1024</td><td>0</td><td>87.50%</td></tr><tr><td>2</td><td>16</td><td>8192</td><td>512</td><td>0</td><td>43.75%</td></tr><tr><td>3</td><td>32</td><td>8192</td><td>256</td><td>0</td><td>46.88%</td></tr><tr><td>4</td><td>48</td><td>8192</td><td>170</td><td>32</td><td>31.52%</td></tr><tr><td>5</td><td>64</td><td>8192</td><td>128</td><td>0</td><td>23.44%</td></tr><tr><td>6</td><td>80</td><td>8192</td><td>102</td><td>32</td><td>19.07%</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>66</td><td>32768</td><td>32768</td><td>1</td><td>0</td><td>12.50%</td></tr></tbody></table><p>以ID=10的class为例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">当前页大小为8KB，<span class="hljs-attribute">npages</span>=1<br>每个对象的大小为144 B，<span class="hljs-attribute">elemsize</span>=144 B<br>可以计算出当前页可以存放 8<span class="hljs-number">*1024</span> B/ 144 B = 56.8 取整=56个对象，<span class="hljs-attribute">nelems</span>=56<br>当前页面浪费了 8<span class="hljs-number">*1024</span>-144<span class="hljs-number">*56</span> B = 128 B<br></code></pre></td></tr></table></figure><h4><span id="32-线程缓存-mcache">3.2 线程缓存 mcache</span></h4><p>Golang中的线程缓存会与线程上的处理器一一绑定，缓存用户程序申请的微小对象：(0, 16B)</p><p>mcache结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> mcache <span class="hljs-keyword">struct</span> &#123;<br>    ...<br><span class="hljs-comment">// tiny is a heap pointer. Since mcache is in non-GC&#x27;d memory,</span><br><span class="hljs-comment">// we handle it by clearing it in releaseAll during mark</span><br><span class="hljs-comment">// termination.</span><br>tiny             <span class="hljs-keyword">uintptr</span><br>tinyoffset       <span class="hljs-keyword">uintptr</span><br>local_tinyallocs <span class="hljs-keyword">uintptr</span> <span class="hljs-comment">// number of tiny allocs not counted in other stats</span><br><br><span class="hljs-comment">// The rest is not accessed on every malloc.</span><br>alloc [numSpanClasses]*mspan <span class="hljs-comment">// spans to allocate from, indexed by spanClass</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>线程缓存在刚刚被初始化时是不包含 runtime.mspan 的，<br>只有当用户程序申请内存时才会从上一级组件（central）获取新的 runtime.mspan 满足内存分配的需求。</p><h5><span id="321-初始化">3.2.1 初始化</span></h5><p>运行时在初始化处理器时会调用 runtime.allocmcache 初始化线程缓存，<br>该函数会在系统栈中使用 runtime.mheap 中的线程缓存分配器初始化新的 runtime.mcache 结构体：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// dummy mspan that contains no free objects.</span><br><span class="hljs-selector-tag">var</span> emptymspan mspan<br><br>func allocmcache() *mcache &#123;<br><span class="hljs-selector-tag">var</span> c *mcache<br>systemstack(func() &#123;<br>lock(&amp;mheap_.lock)<br>c = (*mcache)(mheap_<span class="hljs-selector-class">.cachealloc</span><span class="hljs-selector-class">.alloc</span>())<br>c<span class="hljs-selector-class">.flushGen</span> = mheap_<span class="hljs-selector-class">.sweepgen</span><br>unlock(&amp;mheap_.lock)<br>&#125;)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> := range c<span class="hljs-selector-class">.alloc</span> &#123;<br>c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[i]</span> = &amp;emptymspan<br>&#125;<br>return c<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化后的 runtime.mcache 中的所有 runtime.mspan 都是空的占位符 emptymspan。</p><h5><span id="322-替换">3.2.2 替换</span></h5><p>runtime.mcache.refill() 方法会为线程缓存获取一个指定跨度类的内存管理单元，被替换的单元不能包含空闲的内存空间，而获取的单元中需要至少包含一个空闲对象用于分配内存：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func (c *mcache) refill(spc spanClass) &#123;<br>s := c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[spc]</span><br>s = mheap_<span class="hljs-selector-class">.central</span><span class="hljs-selector-attr">[spc]</span><span class="hljs-selector-class">.mcentral</span><span class="hljs-selector-class">.cacheSpan</span>()<br>c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[spc]</span> = s<br>&#125;<br></code></pre></td></tr></table></figure><p>如上述代码所示，该函数会从中心缓存中申请新的 runtime.mspan 存储到线程缓存中，这也是向线程缓存中插入内存管理单元的唯一方法。</p><h5><span id="323-微分配器">3.2.3 微分配器</span></h5><p>线程缓存中还包含几个用于分配微对象的字段，下面的这三个字段组成了微对象分配器，专门为 16 字节以下的对象申请和管理内存：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> mcache <span class="hljs-keyword">struct</span> &#123;<br>tiny             <span class="hljs-keyword">uintptr</span><br>tinyoffset       <span class="hljs-keyword">uintptr</span><br>local_tinyallocs <span class="hljs-keyword">uintptr</span><br>&#125;<br></code></pre></td></tr></table></figure><p>微分配器只会用于分配非指针类型的内存，上述三个字段中 tiny 会指向堆中的一篇内存，tinyOffset 是下一个空闲内存所在的偏移量，最后的 local_tinyallocs 会记录内存分配器中分配的对象个数。</p><h4><span id="33-中心缓存-mcentral">3.3 中心缓存 mcentral</span></h4><p>runtime.mcentral 是内存分配器的中心缓存，访问中心缓存中的内存管理单元需要使用互斥锁</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">type mcentral struct &#123;<br>lock      mutex <span class="hljs-regexp">//</span> 互斥锁<br>spanclass spanClass <span class="hljs-regexp">//</span> 管理的具体跨度类<br>nonempty  mSpanList <span class="hljs-regexp">//</span> 非空闲对象的链表<br>empty     mSpanList <span class="hljs-regexp">//</span> 空闲对象链表<br>    <br>nmalloc uint64 <span class="hljs-regexp">//</span> 已分配对象的个数<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="331-初始化">3.3.1 初始化</span></h5><p>runtime会调用 runtime.mcentral.init() 方法初始化中心缓存，包括了对中心缓存跨度类和两个链表的初始化：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// Initialize a single central free list.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> (c <span class="hljs-operator">*</span>mcentral)</span> <span class="hljs-function"><span class="hljs-keyword">init</span>(spc spanClass)</span> &#123;<br>c.spanclass <span class="hljs-operator">=</span> spc<br>c.nonempty.<span class="hljs-keyword">init</span>()<br>c.empty.<span class="hljs-keyword">init</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化时，两个链表都不包含任何内存，runtime会扩容结构体持有的两个链表，nmalloc字段也记录了该结构体中分配的对象个数</p><h5><span id="332-内存管理单元">3.3.2 内存管理单元</span></h5><p>调用runtime.mcentral.cacheSpan()方法，获取新的内存管理单元：</p><p>源码逻辑较为复杂：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.从没有空闲对象的 runtime<span class="hljs-selector-class">.mspan</span> 链表中查找可以使用的内存管理单元<br><span class="hljs-number">2</span>.从有空闲对象的 runtime<span class="hljs-selector-class">.mspan</span> 链表中查找可以使用的内存管理单元<br><span class="hljs-number">3</span>.调用 runtime<span class="hljs-selector-class">.mcentral</span><span class="hljs-selector-class">.grow</span> 从堆中申请新的内存管理单元<br><span class="hljs-number">4</span>.更新内存管理单元的 allocCache 等字段帮助快速分配内存<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Allocate a span to use in an mcache.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *mcentral)</span> <span class="hljs-title">cacheSpan</span><span class="hljs-params">()</span> *<span class="hljs-title">mspan</span></span> &#123;<br><span class="hljs-comment">// Deduct credit for this span allocation and sweep if necessary.</span><br>spanBytes := <span class="hljs-keyword">uintptr</span>(class_to_allocnpages[c.spanclass.sizeclass()]) * _PageSize<br>deductSweepCredit(spanBytes, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment">// 加互斥锁</span><br>lock(&amp;c.lock)<br>traceDone := <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGCSweepStart()<br>&#125;<br>sg := mheap_.sweepgen<br>retry:<br>    <span class="hljs-comment">// Step1. 从非空链表，查找可用的mspan，根据sweepgen判断处理逻辑</span><br><span class="hljs-keyword">var</span> s *mspan<br><span class="hljs-keyword">for</span> s = c.nonempty.first; s != <span class="hljs-literal">nil</span>; s = s.next &#123;<br>    <span class="hljs-comment">// 等待回收</span><br><span class="hljs-keyword">if</span> s.sweepgen == sg<span class="hljs-number">-2</span> &amp;&amp; atomic.Cas(&amp;s.sweepgen, sg<span class="hljs-number">-2</span>, sg<span class="hljs-number">-1</span>) &#123;<br>c.nonempty.remove(s)<br>c.empty.insertBack(s)<br><span class="hljs-comment">// 关 互斥锁</span><br>unlock(&amp;c.lock)<br>s.sweep(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">goto</span> havespan<br>&#125;<br><span class="hljs-comment">// 正在回收</span><br><span class="hljs-keyword">if</span> s.sweepgen == sg<span class="hljs-number">-1</span> &#123;<br><span class="hljs-comment">// the span is being swept by background sweeper, skip</span><br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 已经回收 s.sweepgen == sg</span><br><span class="hljs-comment">// we have a nonempty span that does not require sweeping, allocate from it</span><br>c.nonempty.remove(s)<br>c.empty.insertBack(s)<br><span class="hljs-comment">// 关 互斥锁</span><br>unlock(&amp;c.lock)<br><span class="hljs-keyword">goto</span> havespan<br>&#125;<br><br>    <span class="hljs-comment">// Step2. 从空链表，查找可用的mspan，处理逻辑与上面遍历nonempty链表类似</span><br><span class="hljs-keyword">for</span> s = c.empty.first; s != <span class="hljs-literal">nil</span>; s = s.next &#123;<br><span class="hljs-keyword">if</span> s.sweepgen == sg<span class="hljs-number">-2</span> &amp;&amp; atomic.Cas(&amp;s.sweepgen, sg<span class="hljs-number">-2</span>, sg<span class="hljs-number">-1</span>) &#123;<br><span class="hljs-comment">// we have an empty span that requires sweeping,</span><br><span class="hljs-comment">// sweep it and see if we can free some space in it</span><br>c.empty.remove(s)<br><span class="hljs-comment">// swept spans are at the end of the list</span><br>c.empty.insertBack(s)<br>unlock(&amp;c.lock)<br>s.sweep(<span class="hljs-literal">true</span>)<br>freeIndex := s.nextFreeIndex()<br><span class="hljs-keyword">if</span> freeIndex != s.nelems &#123;<br>s.freeindex = freeIndex<br><span class="hljs-keyword">goto</span> havespan<br>&#125;<br>lock(&amp;c.lock)<br><span class="hljs-comment">// the span is still empty after sweep</span><br><span class="hljs-comment">// it is already in the empty list, so just retry</span><br><span class="hljs-keyword">goto</span> retry<br>&#125;<br><span class="hljs-keyword">if</span> s.sweepgen == sg<span class="hljs-number">-1</span> &#123;<br><span class="hljs-comment">// the span is being swept by background sweeper, skip</span><br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// already swept empty span,</span><br><span class="hljs-comment">// all subsequent ones must also be either swept or in process of sweeping</span><br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGCSweepDone()<br>traceDone = <span class="hljs-literal">true</span><br>&#125;<br>unlock(&amp;c.lock)<br><br><span class="hljs-comment">// Replenish central list if empty.</span><br><span class="hljs-comment">// Step3. 如果nonempty和empty链表都找不到可用的内存单元，调用grow()，从堆中申请新的内存</span><br>s = c.grow()<br><span class="hljs-keyword">if</span> s == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>lock(&amp;c.lock)<br>c.empty.insertBack(s)<br>unlock(&amp;c.lock)<br><br><span class="hljs-comment">// At this point s is a non-empty span, queued at the end of the empty list,</span><br><span class="hljs-comment">// c is unlocked.</span><br>havespan:<br>    <span class="hljs-comment">// Step4. 找到了空的mspan，更新内存管理单元的 allocbits，allocCache 等字段帮助快速分配内存</span><br><span class="hljs-keyword">if</span> trace.enabled &amp;&amp; !traceDone &#123;<br>traceGCSweepDone()<br>&#125;<br>n := <span class="hljs-keyword">int</span>(s.nelems) - <span class="hljs-keyword">int</span>(s.allocCount)<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> || s.freeindex == s.nelems || <span class="hljs-keyword">uintptr</span>(s.allocCount) == s.nelems &#123;<br>throw(<span class="hljs-string">&quot;span has no free objects&quot;</span>)<br>&#125;<br><span class="hljs-comment">// Assume all objects from this span will be allocated in the</span><br><span class="hljs-comment">// mcache. If it gets uncached, we&#x27;ll adjust this.</span><br>atomic.Xadd64(&amp;c.nmalloc, <span class="hljs-keyword">int64</span>(n))<br>usedBytes := <span class="hljs-keyword">uintptr</span>(s.allocCount) * s.elemsize<br>atomic.Xadd64(&amp;memstats.heap_live, <span class="hljs-keyword">int64</span>(spanBytes)-<span class="hljs-keyword">int64</span>(usedBytes))<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br><span class="hljs-comment">// heap_live changed.</span><br>traceHeapAlloc()<br>&#125;<br><span class="hljs-keyword">if</span> gcBlackenEnabled != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// heap_live changed.</span><br>gcController.revise()<br>&#125;<br>freeByteBase := s.freeindex &amp;^ (<span class="hljs-number">64</span> - <span class="hljs-number">1</span>)<br>whichByte := freeByteBase / <span class="hljs-number">8</span><br><span class="hljs-comment">// Init alloc bits cache.</span><br>s.refillAllocCache(whichByte)<br><br><span class="hljs-comment">// Adjust the allocCache so that s.freeindex corresponds to the low bit in</span><br><span class="hljs-comment">// s.allocCache.</span><br>s.allocCache &gt;&gt;= s.freeindex % <span class="hljs-number">64</span><br><br><span class="hljs-keyword">return</span> s<br>&#125;<br><br></code></pre></td></tr></table></figure><h5><span id="333-扩容">3.3.3 扩容</span></h5><p>如果在中心缓存的nonempty以及empty中都未找到空的mspan，<br>会调用runtime.mcentral.grow() 方法，根据预先计算出的 class_to_allocnpages 以及 class_to_size 获取待分配的页数以及跨度类并调用 runtime.mheap.alloc() 获取新的mspan：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// grow allocates a new empty span from the heap and initializes it for c&#x27;s size class.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *mcentral)</span> <span class="hljs-title">grow</span><span class="hljs-params">()</span> *<span class="hljs-title">mspan</span></span> &#123;<br>npages := <span class="hljs-keyword">uintptr</span>(class_to_allocnpages[c.spanclass.sizeclass()])<br>size := <span class="hljs-keyword">uintptr</span>(class_to_size[c.spanclass.sizeclass()])<br><br>s := mheap_.alloc(npages, c.spanclass, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> s == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// Use division by multiplication and shifts to quickly compute:</span><br><span class="hljs-comment">// n := (npages &lt;&lt; _PageShift) / size</span><br>n := (npages &lt;&lt; _PageShift) &gt;&gt; s.divShift * <span class="hljs-keyword">uintptr</span>(s.divMul) &gt;&gt; s.divShift2<br>s.limit = s.base() + size*n<br>heapBitsForAddr(s.base()).initSpan(s)<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="34-页堆-mheap">3.4 页堆 mheap</span></h4><p>runtime.mheap 是内存分配的核心结构体，Go语言程序只会存在一个全局的结构，而堆上初始化的所有对象都由该结构体统一管理，该结构体中包含两组非常重要的字段：</p><ul><li>全局的中心缓存列表central</li><li>管理堆区内存区域的 arenas 以及相关字段。</li></ul><p><strong>页堆中包含一个长度为 134 的 runtime.mcentral 数组，其中 67 个为跨度类需要 scan 的中心缓存，另外的 67 个是 noscan 的中心缓存</strong></p><p><strong>scan表示当前对象有指针，需要使用GC进行扫描</strong></p><p><strong>noscan表示当前对象没有指针</strong></p><p>mheap结构体关键字段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">type mheap <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-keyword">lock</span>      mutex     <span class="hljs-comment">// 互斥锁</span><br>...<br>allspans []*mspan   <span class="hljs-comment">// 当前heap的全部mspan</span><br>    ...<br>    <br><span class="hljs-comment">// 二维矩阵heapArena -&gt; 一个headArena管理64MB的空间</span><br>arenas [<span class="hljs-number">1</span> &lt;&lt; arenaL1Bits]*[<span class="hljs-number">1</span> &lt;&lt; arenaL2Bits]*heapArena<br><br><span class="hljs-comment">// 全局的中心缓存列表 numSpanClasses=67*2=134   67表示class类别的个数</span><br>central [numSpanClasses]<span class="hljs-keyword">struct</span> &#123;<br>mcentral mcentral<br>pad      [cpu.CacheLinePadSize - <span class="hljs-keyword">unsafe</span>.Sizeof(mcentral&#123;&#125;)%cpu.CacheLinePadSize]<span class="hljs-built_in">byte</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="341-初始化">3.4.1 初始化</span></h5><p>调用runtime.mheap.init() 方法，对堆区进行初始化：</p><ul><li>初始化spanalloc,cachealloc等空闲链表</li><li>初始化central切片中的中心缓存<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Initialize the heap.</span><br>func (h *mheap) init() &#123;<br>h<span class="hljs-selector-class">.spanalloc</span><span class="hljs-selector-class">.init</span>(unsafe<span class="hljs-selector-class">.Sizeof</span>(mspan&#123;&#125;), recordspan, unsafe<span class="hljs-selector-class">.Pointer</span>(h), &amp;memstats.mspan_sys)<br>h<span class="hljs-selector-class">.cachealloc</span><span class="hljs-selector-class">.init</span>(unsafe<span class="hljs-selector-class">.Sizeof</span>(mcache&#123;&#125;), nil, nil, &amp;memstats.mcache_sys)<br>h<span class="hljs-selector-class">.specialfinalizeralloc</span><span class="hljs-selector-class">.init</span>(unsafe<span class="hljs-selector-class">.Sizeof</span>(specialfinalizer&#123;&#125;), nil, nil, &amp;memstats.other_sys)<br>h<span class="hljs-selector-class">.specialprofilealloc</span><span class="hljs-selector-class">.init</span>(unsafe<span class="hljs-selector-class">.Sizeof</span>(specialprofile&#123;&#125;), nil, nil, &amp;memstats.other_sys)<br>h<span class="hljs-selector-class">.arenaHintAlloc</span><span class="hljs-selector-class">.init</span>(unsafe<span class="hljs-selector-class">.Sizeof</span>(arenaHint&#123;&#125;), nil, nil, &amp;memstats.other_sys)<br><br>h<span class="hljs-selector-class">.spanalloc</span><span class="hljs-selector-class">.zero</span> = false<br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> := range h<span class="hljs-selector-class">.central</span> &#123;<br>h<span class="hljs-selector-class">.central</span><span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.mcentral</span><span class="hljs-selector-class">.init</span>(spanClass(i))<br>&#125;<br><br>h<span class="hljs-selector-class">.pages</span><span class="hljs-selector-class">.init</span>(&amp;h<span class="hljs-selector-class">.lock</span>, &amp;memstats.gc_sys)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5><span id="342-内存管理单元">3.4.2 内存管理单元</span></h5><p>runtime会通过runtime.mheap.alloc() 在系统栈中获取新的mspan：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *mheap)</span> <span class="hljs-title">alloc</span><span class="hljs-params">(npages <span class="hljs-keyword">uintptr</span>, spanclass spanClass, needzero <span class="hljs-keyword">bool</span>)</span> *<span class="hljs-title">mspan</span></span> &#123;<br><span class="hljs-keyword">var</span> s *mspan<br>systemstack(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> h.sweepdone == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// 回收一部分内存</span><br>h.reclaim(npages)<br>&#125;<br><span class="hljs-comment">// 分配新的mspan</span><br>s = h.allocSpan(npages, <span class="hljs-literal">false</span>, spanclass, &amp;memstats.heap_inuse)<br>&#125;)<br>...<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>代码逻辑：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.为了阻止内存的大量占用和堆的增长，我们在分配对应页数的内存前需要先调用 runtime<span class="hljs-selector-class">.mheap</span><span class="hljs-selector-class">.reclaim</span> 方法回收一部分内存<br><span class="hljs-number">2</span>.通过allocSpan() 获取新的mspan<br></code></pre></td></tr></table></figure><p>allocSpan()的执行过程分为两步：</p><ul><li>从堆上分配新的内存页和内存管理单元mspan</li><li>初始化管理内存单元，并将mspan加入到mheap的列表中</li></ul><p>allocSpan() 的实现代码如下：（详细实现间源码）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *mheap)</span> <span class="hljs-title">allocSpan</span><span class="hljs-params">(npages <span class="hljs-keyword">uintptr</span>, manual <span class="hljs-keyword">bool</span>, spanclass spanClass, sysStat *<span class="hljs-keyword">uint64</span>)</span> <span class="hljs-params">(s *mspan)</span></span> &#123;<br>gp := getg()<br>base, scav := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>), <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>)<br>pp := gp.m.p.ptr()<br><span class="hljs-keyword">if</span> pp != <span class="hljs-literal">nil</span> &amp;&amp; npages &lt; pageCachePages/<span class="hljs-number">4</span> &#123;<br>c := &amp;pp.pcache<br>base, scav = c.alloc(npages)<br><span class="hljs-keyword">if</span> base != <span class="hljs-number">0</span> &#123;<br>s = h.tryAllocMSpan()<br><span class="hljs-keyword">if</span> s != <span class="hljs-literal">nil</span> &amp;&amp; gcBlackenEnabled == <span class="hljs-number">0</span> &amp;&amp; (manual || spanclass.sizeclass() != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">goto</span> HaveSpan<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> base == <span class="hljs-number">0</span> &#123;<br>base, scav = h.pages.alloc(npages)<br><span class="hljs-keyword">if</span> base == <span class="hljs-number">0</span> &#123;<br>h.grow(npages)<br>            base, scav = h.pages.alloc(npages)<br><span class="hljs-keyword">if</span> base == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;grew heap, but no adequate free space found&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> s == <span class="hljs-literal">nil</span> &#123;<br>s = h.allocMSpanLocked()<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="343-扩容">3.4.3 扩容</span></h5><p>runtime通过调用 runtime.mheap.grow() 方法，向操作系统申请更多的内存空间。该方法的执行过程分为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.通过传入的页数获取期望分配的内存空间大小以及内存的基地址<br><span class="hljs-number">2</span>.如果 arena 区域没有足够的空间，调用 runtime<span class="hljs-selector-class">.mheap</span><span class="hljs-selector-class">.sysAlloc</span> 从操作系统中申请更多的内存<br><span class="hljs-number">3</span>.扩容 runtime<span class="hljs-selector-class">.mheap</span> 持有的 arena 区域并更新页分配器的元信息<br><span class="hljs-number">4</span>.在某些场景下，调用 runtime<span class="hljs-selector-class">.pageAlloc</span><span class="hljs-selector-class">.scavenge</span> 回收不再使用的空闲内存页<br></code></pre></td></tr></table></figure><p>在页堆扩容的过程中，runtime.mheap.sysAlloc 是页堆用来申请虚拟内存的方法，该方法的实现分为多步：</p><ul><li><p>首先，该方法会尝试在预保留的区域申请内存：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *mheap)</span> <span class="hljs-title">sysAlloc</span><span class="hljs-params">(n <span class="hljs-keyword">uintptr</span>)</span> <span class="hljs-params">(v unsafe.Pointer, size <span class="hljs-keyword">uintptr</span>)</span></span> &#123;<br>n = alignUp(n, heapArenaBytes)<br><br>v = h.arena.alloc(n, heapArenaBytes, &amp;memstats.heap_sys)<br><span class="hljs-keyword">if</span> v != <span class="hljs-literal">nil</span> &#123;<br>size = n<br><span class="hljs-keyword">goto</span> mapped<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用线性分配器的 runtime.linearAlloc.alloc 方法在预先保留的内存中申请一块可以使用的空间。  </p></li><li><p>如果没有可用的空间，会根据页堆的 arenaHints 在目标地址上尝试扩容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func (h *mheap) sysAlloc(n uintptr) (v unsafe<span class="hljs-selector-class">.Pointer</span>, size uintptr) &#123;<br>...<br><span class="hljs-keyword">for</span> h<span class="hljs-selector-class">.arenaHints</span> != nil &#123;<br>hint := h<span class="hljs-selector-class">.arenaHints</span><br><span class="hljs-selector-tag">p</span> := hint<span class="hljs-selector-class">.addr</span><br>v = sysReserve(unsafe<span class="hljs-selector-class">.Pointer</span>(p), n)<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span> == uintptr(v) &#123;<br>hint<span class="hljs-selector-class">.addr</span> = <span class="hljs-selector-tag">p</span><br>size = n<br>break<br>&#125;<br>h<span class="hljs-selector-class">.arenaHints</span> = hint<span class="hljs-selector-class">.next</span><br>h<span class="hljs-selector-class">.arenaHintAlloc</span><span class="hljs-selector-class">.free</span>(unsafe<span class="hljs-selector-class">.Pointer</span>(hint))<br>&#125;<br>...<br>sysMap(v, size, &amp;memstats.heap_sys)<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>runtime.sysReserve 和 runtime.sysMap 会从操作系统中申请内存并将内存转换至 Prepared 状态。</p></li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func (h *mheap) sysAlloc(n uintptr) (v unsafe.Pointer, size uintptr) &#123;<br>...<br><span class="hljs-attribute">mapped</span>:<br>for ri := arenaIndex(uintptr(v)); <span class="hljs-attribute">ri &lt;= arenaIndex(uintptr(v)+size-1); ri++ &#123;</span><br><span class="hljs-attribute">l2</span> := h<span class="hljs-variable">.arenas</span>[ri<span class="hljs-variable">.l</span>1()]<br>r := (*heapArena)(h<span class="hljs-variable">.heapArenaAlloc</span><span class="hljs-variable">.alloc</span>(unsafe<span class="hljs-variable">.Sizeof</span>(*r), sys<span class="hljs-variable">.PtrSize</span>, &amp;memstats<span class="hljs-variable">.gc_sys</span>))<br>...<br>h<span class="hljs-variable">.allArenas</span> = h<span class="hljs-variable">.allArenas</span>[:len(h<span class="hljs-variable">.allArenas</span>)+1]<br>h<span class="hljs-variable">.allArenas</span>[len(h<span class="hljs-variable">.allArenas</span>)-1] = ri<br>atomic<span class="hljs-variable">.StorepNoWB</span>(unsafe<span class="hljs-variable">.Pointer</span>(&amp;l2[ri<span class="hljs-variable">.l</span>2()]), unsafe<span class="hljs-variable">.Pointer</span>(r))<br>&#125;<br>return<br>&#125;<br></code></pre></td></tr></table></figure><p>runtime.mheap.sysAlloc 方法在最后会初始化一个新的 runtime.heapArena 结构体来管理刚刚申请的内存空间，该结构体会被加入页堆的二维矩阵heapArena中。</p><h3><span id="4内存分配">4.内存分配</span></h3><p>堆上所有的对象都会通过调用 runtime.newobject 函数分配内存，该函数会调用 runtime.mallocgc 分配指定大小的内存空间，这也是用户程序向堆上申请内存空间的必经函数：</p><p>runtime.newonject()实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newobject</span>(typ <span class="hljs-operator">*</span>_type)</span> unsafe.<span class="hljs-type">Pointer</span> &#123;<br><span class="hljs-keyword">return</span> mallocgc(typ.size, typ, <span class="hljs-literal">true</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>mallocgc()实现逻辑：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mallocgc</span><span class="hljs-params">(size <span class="hljs-keyword">uintptr</span>, typ *_type, needzero <span class="hljs-keyword">bool</span>)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>mp := acquirem()<br>mp.mallocing = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment">// 获取线程缓存</span><br>c := gomcache()<br><span class="hljs-keyword">var</span> x unsafe.Pointer<br>noscan := typ == <span class="hljs-literal">nil</span> || typ.ptrdata == <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> size &lt;= maxSmallSize &#123;<br>    <span class="hljs-comment">// 根据对象大小判断分配逻辑</span><br><span class="hljs-keyword">if</span> noscan &amp;&amp; size &lt; maxTinySize &#123;<br><span class="hljs-comment">// 微对象分配</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 小对象分配</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 大对象分配</span><br>&#125;<br><br>publicationBarrier()<br>mp.mallocing = <span class="hljs-number">0</span><br>releasem(mp)<br><br><span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure><p>三种对象：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">微对象 (<span class="hljs-number">0</span>, <span class="hljs-number">16</span>B) — 先使用微型分配器，再依次尝试线程缓存、中心缓存和堆分配内存<br>小对象 <span class="hljs-selector-attr">[16B, 32KB]</span> — 依次尝试使用线程缓存、中心缓存和堆分配内存<br>大对象 (<span class="hljs-number">32</span>KB, +∞) — 直接在堆上分配内存<br></code></pre></td></tr></table></figure><h4><span id="41-微对象">4.1 微对象</span></h4><p>微对象的分配策略：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.如果当前块中还包含大小合适的空闲内存，<span class="hljs-keyword">runtime</span>可以直接通过base addr和 offset获取并返回内存<br><span class="hljs-number">2</span>.如果内存块的内存不够用：<br>- 先从线程缓存找到跨度类<span class="hljs-keyword">class</span>对应的内存管理单元mspan，调用<span class="hljs-keyword">runtime</span>.nextFreeFast() 获取空闲的内存<br>- 线程缓存找不到空闲内存时，调用<span class="hljs-keyword">runtime</span>.mcache.nextFree() 从中心缓存或者页堆获取内存块<br></code></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">func <span class="hljs-title">mallocgc</span><span class="hljs-params">(size uintptr, typ *_type, needzero <span class="hljs-keyword">bool</span>)</span> unsafe.Pointer </span>&#123;<br>...<br><span class="hljs-keyword">if</span> size &lt;= maxSmallSize &#123;<br><span class="hljs-keyword">if</span> noscan &amp;&amp; size &lt; maxTinySize &#123; <span class="hljs-comment">// 微对象分配</span><br>    <span class="hljs-comment">// 计算偏移量 offset</span><br>off := c.tinyoffset<br><span class="hljs-comment">// 判断当前块是否够用</span><br><span class="hljs-keyword">if</span> off+size &lt;= maxTinySize &amp;&amp; c.tiny != <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// tiny + off 获取内存</span><br>x = unsafe.<span class="hljs-built_in">Pointer</span>(c.tiny + off)<br>c.tinyoffset = off + size<br>c.local_tinyallocs++<br><span class="hljs-built_in">releasem</span>(mp)<br><span class="hljs-keyword">return</span> x<br>&#125;<br><span class="hljs-comment">// 当前内存块不够用，从线程缓存，中心缓存，页堆中获取</span><br>span := c.alloc[tinySpanClass]<br><span class="hljs-comment">// 是否可以从线程缓存中获取内存块</span><br>v := <span class="hljs-built_in">nextFreeFast</span>(span)<br><span class="hljs-keyword">if</span> v == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// 到中心缓存或者页堆中获取内存块</span><br>v, _, _ = c.<span class="hljs-built_in">nextFree</span>(tinySpanClass)<br>&#125;<br>x = unsafe.<span class="hljs-built_in">Pointer</span>(v)<br>(*[<span class="hljs-number">2</span>]uint64)(x)[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>(*[<span class="hljs-number">2</span>]uint64)(x)[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> size &lt; c.tinyoffset || c.tiny == <span class="hljs-number">0</span> &#123;<br>c.tiny = <span class="hljs-built_in">uintptr</span>(x)<br>c.tinyoffset = size<br>&#125;<br>size = maxTinySize<br>&#125;<br>...<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="42-小对象">4.2 小对象</span></h4><p>小对象的分配策略：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.确定分配对象大小以及跨度类spanClass<br><span class="hljs-number">2</span>.从线程缓存，中心缓存或者页堆中获取内存管理单元，并从内存管理单元找到空闲的内存空间<br><span class="hljs-number">3</span>.调用<span class="hljs-keyword">runtime</span>.memclrNoHeapPointers() 方法清理空闲内存中的所有数据<br></code></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func mallocgc(size uintptr, typ *_type, needzero bool) unsafe<span class="hljs-selector-class">.Pointer</span> &#123;<br>...<br><span class="hljs-keyword">if</span> size &lt;= maxSmallSize &#123;<br>...<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 分配 小对象</span><br>    <span class="hljs-comment">// 计算要分配的对象的大小</span><br><span class="hljs-selector-tag">var</span> sizeclass uint8<br><span class="hljs-keyword">if</span> size &lt;= smallSizeMax-<span class="hljs-number">8</span> &#123;<br>sizeclass = size_to_class8<span class="hljs-selector-attr">[(size+smallSizeDiv-1)/smallSizeDiv]</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>sizeclass = size_to_class128<span class="hljs-selector-attr">[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]</span><br>&#125;<br>size = uintptr(class_to_size<span class="hljs-selector-attr">[sizeclass]</span>)<br><span class="hljs-comment">// 确定spanClass</span><br>spc := makeSpanClass(sizeclass, noscan)<br><span class="hljs-selector-tag">span</span> := c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[spc]</span><br><span class="hljs-comment">// 先去线程缓存获取内存管理单元</span><br>v := nextFreeFast(span)<br><span class="hljs-keyword">if</span> v == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 线程缓存找不到</span><br>    <span class="hljs-comment">// 到中心缓存，页堆中寻找</span><br>v, <span class="hljs-selector-tag">span</span>, _ = c<span class="hljs-selector-class">.nextFree</span>(spc)<br>&#125;<br>x = unsafe<span class="hljs-selector-class">.Pointer</span>(v)<br><span class="hljs-keyword">if</span> needzero &amp;&amp; <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.needzero</span> != <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// 清理空闲内存中的所有数据</span><br>memclrNoHeapPointers(unsafe<span class="hljs-selector-class">.Pointer</span>(v), size)<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>...<br>&#125;<br>...<br>return x<br>&#125;<br></code></pre></td></tr></table></figure><p>nextFreeFast() 实现：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func nextFreeFast(s *mspan) gclinkptr &#123;<br><span class="hljs-attribute">theBit</span> := sys<span class="hljs-variable">.Ctz</span>64(s<span class="hljs-variable">.allocCache</span>)<br>if theBit &lt; 64 &#123;<br>result := s<span class="hljs-variable">.freeindex</span> + uintptr(theBit)<br>if result &lt; s<span class="hljs-variable">.nelems</span> &#123;<br>freeidx := result + 1<br>if freeidx%64 == 0 &amp;&amp; freeidx != s<span class="hljs-variable">.nelems</span> &#123;<br>return 0<br>&#125;<br>s<span class="hljs-variable">.allocCache</span> &gt;&gt;= uint(theBit + 1)<br>s<span class="hljs-variable">.freeindex</span> = freeidx<br>s<span class="hljs-variable">.allocCount</span>++<br>return gclinkptr(result*s<span class="hljs-variable">.elemsize</span> + s<span class="hljs-variable">.base</span>())<br>&#125;<br>&#125;<br>return 0<br>&#125;<br></code></pre></td></tr></table></figure><p>nextFree() 实现：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func (c *mcache) nextFree(spc spanClass) (v gclinkptr, s *mspan, shouldhelpgc bool) &#123;<br>s = c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[spc]</span><br>freeIndex := s<span class="hljs-selector-class">.nextFreeIndex</span>()<br><span class="hljs-keyword">if</span> freeIndex == s<span class="hljs-selector-class">.nelems</span> &#123;<br>c<span class="hljs-selector-class">.refill</span>(spc)<br>s = c<span class="hljs-selector-class">.alloc</span><span class="hljs-selector-attr">[spc]</span><br>freeIndex = s<span class="hljs-selector-class">.nextFreeIndex</span>()<br>&#125;<br><br>v = gclinkptr(freeIndex*s<span class="hljs-selector-class">.elemsize</span> + s<span class="hljs-selector-class">.base</span>())<br>s.allocCount++<br>return<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="43-大对象">4.3 大对象</span></h4><p>大于32KB 的对象直接在系统的栈中调用 runtime.largeAlloc() 分配大片的内存：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func mallocgc(size uintptr, typ *_type, needzero <span class="hljs-built_in">bool</span>) unsafe.Pointer &#123;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span><span class="hljs-keyword">if</span> size &lt;= maxSmallSize &#123;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 判断为 大对象</span><br>var s *mspan<br>systemstack(func<span class="hljs-literal">()</span> &#123;<br>    <span class="hljs-comment">// 调用largeAlloc()</span><br>s = large<span class="hljs-constructor">Alloc(<span class="hljs-params">size</span>, <span class="hljs-params">needzero</span>, <span class="hljs-params">noscan</span>)</span><br>&#125;)<br>s.freeindex = <span class="hljs-number">1</span><br>s.allocCount = <span class="hljs-number">1</span><br>x = unsafe.<span class="hljs-constructor">Pointer(<span class="hljs-params">s</span>.<span class="hljs-params">base</span>()</span>)<br>size = s.elemsize<br>&#125;<br><br>publication<span class="hljs-constructor">Barrier()</span><br>mp.mallocing = <span class="hljs-number">0</span><br>releasem(mp)<br><br>return x<br>&#125;<br></code></pre></td></tr></table></figure><p>largeAlloc() 实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">func <span class="hljs-title">largeAlloc</span><span class="hljs-params">(size uintptr, needzero <span class="hljs-keyword">bool</span>, noscan <span class="hljs-keyword">bool</span>)</span> *mspan </span>&#123;<br>    <span class="hljs-comment">// 大对象跨度类 = 0</span><br>npages := size &gt;&gt; _PageShift<br><span class="hljs-keyword">if</span> size&amp;_PageMask != <span class="hljs-number">0</span> &#123;<br>npages++<br>&#125;<br>...<br>s := mheap_.<span class="hljs-built_in">alloc</span>(npages, <span class="hljs-built_in">makeSpanClass</span>(<span class="hljs-number">0</span>, noscan), needzero)<br>s.limit = s.<span class="hljs-built_in">base</span>() + size<br><span class="hljs-built_in">heapBitsForAddr</span>(s.<span class="hljs-built_in">base</span>()).<span class="hljs-built_in">initSpan</span>(s)<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 3: 协程 goroutine</title>
    <link href="/2021/12/31/Cap-3-%E5%8D%8F%E7%A8%8B-goroutine/"/>
    <url>/2021/12/31/Cap-3-%E5%8D%8F%E7%A8%8B-goroutine/</url>
    
    <content type="html"><![CDATA[<h3><span id="1os内的相关概念">1.OS内的相关概念</span></h3><h4><span id="11基本概念">1.1基本概念</span></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">进程：程序关于某数据结构集合上的一次运行活动，是系统进行资源分配和调度的基本单位。<br><br>线程：OS进行运算调度的最小单位。被包含在进程中，是进程中的实际运行单位。<br><br><span class="hljs-function"><span class="hljs-title">PCB</span><span class="hljs-params">(Process Control Block)</span></span>：进程控制块，OS定义的用来存储进程信息的数据结构<br><br><span class="hljs-function"><span class="hljs-title">TCB</span><span class="hljs-params">(Thread Control Block)</span></span>：线程控制块，OS定义的用来存储线程信息的数据结构<br></code></pre></td></tr></table></figure><h4><span id="12-两者的不同区别-具体语言的实现可能有不同">1.2 两者的不同(区别) – 具体语言的实现可能有不同</span></h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1.</span>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位<br><span class="hljs-number">2.</span>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行单位<br><span class="hljs-number">3.</span>进程间相互独立，但同一进程下的各个线程之间共享程序的内存空间<span class="hljs-comment">(代码段,数据集,堆等)</span>以及进程级的资源<span class="hljs-comment">(如:打开文件，信号等)</span><br><span class="hljs-number">4.</span>某进程的线程对其他进程不可见<br><span class="hljs-number">5.</span>线程上下文切换比进程上下文切换块<br></code></pre></td></tr></table></figure><h4><span id="13-通信方式">1.3 通信方式</span></h4><p>进程间通信：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span>管道<br><span class="hljs-number">2.</span>消息队列<br><span class="hljs-number">3.</span>信号量<span class="hljs-punctuation">(</span><span class="hljs-variable">P</span><span class="hljs-operator">/</span><span class="hljs-variable">V</span>原语<span class="hljs-punctuation">)</span><br><span class="hljs-number">4.</span>共享存储<br><span class="hljs-number">5.</span><span class="hljs-built_in">Socket</span><br><span class="hljs-number">6.</span><span class="hljs-built_in">Streams</span><br></code></pre></td></tr></table></figure><p>线程间通信：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-number">1</span>.锁（互斥锁，读写锁）<br><span class="hljs-number">2</span>.信号量 Semaphore<br><span class="hljs-number">3</span>.信号 <span class="hljs-keyword">Signal</span><br></code></pre></td></tr></table></figure><h4><span id="14-状态">1.4 状态</span></h4><p>进程的状态：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">创建状态：进程创建完成后，进入到就绪状态<br>就绪状态：进程获得除了处理器之外的一切所需资源，需要获取处理器资源<span class="hljs-punctuation">(</span>一般指时间片<span class="hljs-punctuation">)</span>才能进入到运行状态<br>运行状态：进程在处理器上运行<br>阻塞状态：等待状态，进程正在等待某一事件而暂停运行（等待资源，等待<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>）<br>结束状态：进程正常结束<span class="hljs-variable">or</span>其他原因中断退出运行<br></code></pre></td></tr></table></figure><h3><span id="2协程-轻量级线程">2.协程 – 轻量级线程</span></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.与线程相比，协程不受操作系统调度，协程调度器由用户应用程序提供，协程调度器按照调度策略将协程调度到进程中运行<br>2.多个协程分享OS分给线程的时间片，协程调度器决定了协程运行的顺序<br>3.一个线程上，每一时刻只能运行一个协程<br></code></pre></td></tr></table></figure><h3><span id="3调度模型">3.调度模型</span></h3><h4><span id="31-线程模型">3.1 线程模型</span></h4><p>线程可以分为用户线程和内核线程</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">三种线程模型：<br><span class="hljs-number">1.</span><span class="hljs-built_in">N</span><span class="hljs-operator">:</span><span class="hljs-number">1</span>模型：<span class="hljs-built_in">N</span>个用户线程运行在<span class="hljs-number">1</span>个内核线程中<br>优点：用户线程上下文切换快<br>缺点：无法充利用<span class="hljs-variable">CPU</span>算力<br><br><span class="hljs-number">2.1</span><span class="hljs-operator">:</span><span class="hljs-number">1</span>模型：每个用户线程对应一个内核线程<br>优点：充分利用了<span class="hljs-variable">CPU</span>算力<br>缺点：用户进程上下文切换慢<br><br><span class="hljs-number">3.</span><span class="hljs-variable">M</span><span class="hljs-operator">:</span><span class="hljs-built_in">N</span>模型：<span class="hljs-variable">M</span>个用户线程运行在<span class="hljs-built_in">N</span>个内核线程中。<span class="hljs-variable">Golang</span>采用这种模型实现<br>优点：上下文切换快，充分利用了<span class="hljs-variable">CPU</span>算力<br>缺点：调度算法实现复杂<br></code></pre></td></tr></table></figure><h4><span id="32-golang调度器模型-遵循csp模型实现">3.2 Golang调度器模型 – 遵循CSP模型实现</span></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">Golang协程调度模型包含了三个主要的部分：M,<span class="hljs-selector-tag">P</span>,G。其中：<br>M：Machine：工作线程，由操作系统调度<br><span class="hljs-selector-tag">P</span>：Processor：Go定义的一个概念-处理器，包含运行Go代码的必要资源，有调度goroutine的能力<br>G：Goroutine：Go协程<br></code></pre></td></tr></table></figure><p>三者之间的关系：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-number">1</span>.M必须持有G才能执行代码<br><span class="hljs-number">2</span>.<span class="hljs-keyword">P</span>的个数在程序启动时决定，默认等于CPU的核数<br><span class="hljs-number">3</span>.<span class="hljs-keyword">P</span>每一时刻只能执行一个G<br></code></pre></td></tr></table></figure><p>Golang调度器模型图：</p><img src="/2021/12/31/Cap-3-%E5%8D%8F%E7%A8%8B-goroutine/golang-scheduler.png" class title="golang scheduler model"><h3><span id="4调度策略">4.调度策略</span></h3><p>Golang调度器的调度策略随着Golang版本的提升做了很多的优化，发展过程如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>.单线程调度器 · <span class="hljs-number">0</span><span class="hljs-selector-class">.x</span><br>只包含 <span class="hljs-number">40</span> 多行代码；<br>程序中只能存在一个活跃线程，由 G-M 模型组成；<br><br><span class="hljs-number">2</span>.多线程调度器 · <span class="hljs-number">1.0</span><br>允许运行多线程的程序；<br>全局锁导致竞争严重；<br><br><span class="hljs-number">3</span>.任务窃取调度器 · <span class="hljs-number">1.1</span><br>引入了处理器 <span class="hljs-selector-tag">P</span>，构成了目前的 G-M-<span class="hljs-selector-tag">P</span> 模型；<br>在处理器 <span class="hljs-selector-tag">P</span> 的基础上实现了基于工作窃取的调度器；<br>在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；<br>时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；<br><br><span class="hljs-number">4</span>.抢占式调度器 · <span class="hljs-number">1.2</span> ~ 至今<br><span class="hljs-number">4.1</span> 基于协作的抢占式调度器 - <span class="hljs-number">1.2</span> ~ <span class="hljs-number">1.13</span><br>通过编译器在函数调用时插入抢占检查指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；<br>Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；<br><span class="hljs-number">4.2</span> 基于信号的抢占式调度器 - <span class="hljs-number">1.14</span> ~ 至今<br>实现基于信号的真抢占式调度；<br>垃圾回收在扫描栈时会触发抢占调度；<br>抢占的时间点不够多，还不能覆盖全部的边缘情况；<br><br><span class="hljs-number">5</span>.非均匀存储访问调度器 · 提案<br>对运行时的各种资源进行分区；<br>实现非常复杂，到今天还没有提上日程；<br></code></pre></td></tr></table></figure><h3><span id="5-调度器实现-后续找时间详细分析-goroutine-调度器实现">5. 调度器实现 – 后续找时间详细分析 goroutine 调度器实现</span></h3><p>此处内容移步到： <a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#651-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86">《Go语言设计与实现》– 6.5调度器</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 2: 控制结构及其底层实现</title>
    <link href="/2021/12/31/Cap-2-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/12/31/Cap-2-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3><span id="1select">1.select</span></h3><p>select是Golang语言层面提供的多路I/O复用机制，用于检测多个管道是否就绪</p><p>参考链接：<br><a href="https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/">Go 语言 select 的实现原理 | Go 语言设计与实现</a></p><h4><span id="11-特性">1.1 特性</span></h4><h5><span id="管道读写">管道读写</span></h5><p>select只能作用于管道：管道读，写</p><p>Sample Code:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SelectForChan</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> recv <span class="hljs-keyword">string</span><br>    send := <span class="hljs-string">&quot;hello&quot;</span><br>    <br>    <span class="hljs-keyword">select</span>&#123;<br>    <span class="hljs-keyword">case</span> recv= &lt;- c:<br>        fmt.Printf(<span class="hljs-string">&quot;received %s \n&quot;</span>, recv)<br>    <span class="hljs-keyword">case</span> c &lt;- send:<br>        fmt.printf(<span class="hljs-string">&quot;sent %s\n&quot;</span>, send)<br>    &#125;<br>&#125;<br><br>代码的实际打印结果，需要考虑传入channel的情况:<br>case1: 管道没有缓冲区<br>-&gt; 此时管道不可读，不可写，<span class="hljs-keyword">select</span>一直阻塞<br><br>case2：管道有缓冲区且还可以存放至少一个数据 c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>)<br>-&gt; 此时管道可以写入，不可读取，写操作对应的语句可以执行<br><br>case3：管道有缓冲区且缓冲区已放满数据<br>-&gt; 此时管道可以读取，不可写入，读操作对应的语句可以执行<br><br>case4：管道有缓冲区，缓冲区已有部分数据且还可以存入数据<br>-&gt; 此时管道可以读/写，<span class="hljs-keyword">select</span>会随机执行其中一个语句，执行完成后退出<br></code></pre></td></tr></table></figure><h5><span id="返回值">返回值</span></h5><p>在select的case语句中，可以读取管道，且最多可以给两个变量赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SelectAssign</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)</span></span> &#123;<br>    <span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> &lt;-c:<br>        <span class="hljs-comment">// xxx</span><br>    <span class="hljs-keyword">case</span> d := &lt;-c:<br>        <span class="hljs-comment">// xxx</span><br>    <span class="hljs-keyword">case</span> d, ok := &lt;-c:<br>        <span class="hljs-keyword">if</span> !ok &#123;<br>            <span class="hljs-comment">// xxx</span><br>        &#125;<br>        <span class="hljs-comment">// 成功读取逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="default">default</span></h5><p>select的default语句不能处理管道读写操作，当select语句的所有case语句都阻塞时，default语句将被执行</p><p>可以将default看作一种特殊的case</p><h4><span id="12-使用实例">1.2 使用实例</span></h4><h5><span id="永久阻塞">永久阻塞</span></h5><p>select中不加任何case,会导致永久阻塞</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Kubernetes webhook测试组件源码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    server := webhooktesting.NewTestServer(<span class="hljs-literal">nil</span>)<br>    server.StartTLS()<br>    fmt.Println(<span class="hljs-string">&quot;serving on&quot;</span>, server.URL)<br>    <span class="hljs-comment">// 不希望main()退出，此处永久阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="快速检错">快速检错</span></h5><p>当使用channel来传递错误时，可以使用select快速检查管道中是否有错误，避免陷入循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// K8s调度器源码</span><br>errCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> error, active)<br><span class="hljs-comment">// 传入errCh,用于记录错误</span><br>jm.deleteJobPods(&amp;job, activePods, errCh)<br><span class="hljs-comment">// 检查错误</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> manageJobErr = &lt;-errCh:<br>    <span class="hljs-keyword">if</span> manageJobErr != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 没有错误，快速结束检查</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="限时等待">限时等待</span></h5><p>可以使用select创建只有一定时效的管道，适用于需要限定时间的执行情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// K8s控制器源码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">waitForStopOrTimeout</span><span class="hljs-params">(stopCh &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, timeout time.Duraion)</span> &lt;- <span class="hljs-title">chan</span> <span class="hljs-title">struct</span></span>&#123;&#125; &#123;<br>    stopChWithTimeout := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;-stopCh: <span class="hljs-comment">// 自然结束(stopCh控制，当从stopCh读取值时，自然退出)</span><br>        <span class="hljs-keyword">case</span> &lt;-time.After(timeout): <span class="hljs-comment">// 最长等待时间(通过参数传进来)</span><br>        &#125;<br>        <span class="hljs-built_in">close</span>(stopChWithTimeout)<br>    &#125;()<br>    <span class="hljs-keyword">return</span> stopChWithTimeout<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="13-实现原理">1.3 实现原理</span></h4><h5><span id="数据结构">数据结构</span></h5><p>select对应结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hselect <span class="hljs-keyword">struct</span> &#123;<br>    tcase       <span class="hljs-keyword">uint16</span>      <span class="hljs-comment">// 总case数目</span><br>    ncase       <span class="hljs-keyword">uint16</span>      <span class="hljs-comment">// 已经注册的case 数目</span><br>    pollorder   *<span class="hljs-keyword">uint16</span>     <span class="hljs-comment">// 轮询的case序号</span><br>    lockorder   *<span class="hljs-keyword">uint16</span>     <span class="hljs-comment">// channel的锁定顺序</span><br>    <br>    scase       [<span class="hljs-number">1</span>]scase    <span class="hljs-comment">// 当前操作的scase对象</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>select的case语句对应于runtime包中的scase(select-case)数据结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> scase <span class="hljs-keyword">struct</span> &#123;<br>    c               *hchan          <span class="hljs-comment">// 当前case语句对应的channel，只能处理一个</span><br>    kind            <span class="hljs-keyword">uint16</span>          <span class="hljs-comment">// 一类管道操作类型，共4类</span><br>    elem            unsafe.Pointer  <span class="hljs-comment">// 接收/发送数据的变量地址</span><br>    pc              <span class="hljs-keyword">uintptr</span><br>    releasetime     <span class="hljs-keyword">int64</span><br>&#125;<br></code></pre></td></tr></table></figure><p>管道操作类型：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">const (<br>    caseNil     = itoa  <span class="hljs-regexp">//</span> 管道值为nil<br>    caseRecv            <span class="hljs-regexp">//</span> 读管道<br>    caseSend            <span class="hljs-regexp">//</span> 写管道<br>    caseDefault         <span class="hljs-regexp">//</span> default<br>)<br></code></pre></td></tr></table></figure><h5><span id="实现逻辑">实现逻辑</span></h5><p>Golang runtime包提供了selectgo()方法处理select语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//runtime.go</span><br><span class="hljs-comment">//返回值:</span><br><span class="hljs-comment">//int ：选中case的编号</span><br><span class="hljs-comment">//bool：是否成功从channle中读取了数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectgo</span><span class="hljs-params">(cas0 *scase, order0 *<span class="hljs-keyword">uint16</span>, ncases <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> debugSelect &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;select: cas0=&quot;</span>, cas0, <span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br><br>cas1 := (*[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>]scase)(unsafe.Pointer(cas0))<br>order1 := (*[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>]<span class="hljs-keyword">uint16</span>)(unsafe.Pointer(order0))<br><br><span class="hljs-comment">//将cas1从第一个元素开始切片，长度为ncases，容量为ncases</span><br><span class="hljs-comment">//a[x:y:z] 切片长度: y-x 切片容量:z-x</span><br>scases := cas1[:ncases:ncases]<br><span class="hljs-comment">//所有case轮询顺序，占了前面ncase</span><br>pollorder := order1[:ncases:ncases]<br><span class="hljs-comment">//所有case语句中channel序列，占了后面ncase</span><br>lockorder := order1[ncases:][:ncases:ncases]<br><br><span class="hljs-comment">// 将涉及零个通道的发送/接收案例替换为caseNil，因此以下逻辑可以假定为非nil通道。</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> scases &#123;<br>cas := &amp;scases[i]<br><span class="hljs-keyword">if</span> cas.c == <span class="hljs-literal">nil</span> &amp;&amp; cas.kind != caseDefault &#123;<br>*cas = scase&#123;&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> t0 <span class="hljs-keyword">int64</span><br><span class="hljs-keyword">if</span> blockprofilerate &gt; <span class="hljs-number">0</span> &#123;<br>t0 = cputicks()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; ncases; i++ &#123;<br>scases[i].releasetime = <span class="hljs-number">-1</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 生成排列顺序，pollorder重新排序</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; ncases; i++ &#123;<br>j := fastrandn(<span class="hljs-keyword">uint32</span>(i + <span class="hljs-number">1</span>))<br>pollorder[i] = pollorder[j]<br>pollorder[j] = <span class="hljs-keyword">uint16</span>(i)<br>&#125;<br><br><span class="hljs-comment">//通过Hchan地址进行排序以获得锁定顺序</span><br><span class="hljs-comment">//采用简单的堆排序，以确保n log n个时间和恒定的堆栈占用量</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; ncases; i++ &#123;<br>j := i<br><span class="hljs-comment">// 替换相同channel 的case，以达到去重防止对channel加锁时重复加锁的目的</span><br>c := scases[pollorder[i]].c<br><span class="hljs-keyword">for</span> j &gt; <span class="hljs-number">0</span> &amp;&amp; scases[lockorder[(j<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]].c.sortkey() &lt; c.sortkey() &#123;<br>k := (j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span><br>lockorder[j] = lockorder[k]<br>j = k<br>&#125;<br>lockorder[j] = pollorder[i]<br>&#125;<br><span class="hljs-keyword">for</span> i := ncases - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>o := lockorder[i]<br>c := scases[o].c<br>lockorder[i] = lockorder[<span class="hljs-number">0</span>]<br>j := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br>k := j*<span class="hljs-number">2</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> k &gt;= i &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> k+<span class="hljs-number">1</span> &lt; i &amp;&amp; scases[lockorder[k]].c.sortkey() &lt; scases[lockorder[k+<span class="hljs-number">1</span>]].c.sortkey() &#123;<br>k++<br>&#125;<br><span class="hljs-keyword">if</span> c.sortkey() &lt; scases[lockorder[k]].c.sortkey() &#123;<br>lockorder[j] = lockorder[k]<br>j = k<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">break</span><br>&#125;<br>lockorder[j] = o<br>&#125;<br><br><span class="hljs-keyword">if</span> debugSelect &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i+<span class="hljs-number">1</span> &lt; ncases; i++ &#123;<br><span class="hljs-keyword">if</span> scases[lockorder[i]].c.sortkey() &gt; scases[lockorder[i+<span class="hljs-number">1</span>]].c.sortkey() &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i=&quot;</span>, i, <span class="hljs-string">&quot; x=&quot;</span>, lockorder[i], <span class="hljs-string">&quot; y=&quot;</span>, lockorder[i+<span class="hljs-number">1</span>], <span class="hljs-string">&quot;\n&quot;</span>)<br>throw(<span class="hljs-string">&quot;select: broken sort&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//锁住所有的channel</span><br>sellock(scases, lockorder)<br><br><span class="hljs-keyword">var</span> (<br>gp     *g<br>sg     *sudog<br>c      *hchan<br>k      *scase<br>sglist *sudog<br>sgnext *sudog<br>qp     unsafe.Pointer<br>nextp  **sudog<br>)<br><br>loop:<br><span class="hljs-comment">// pass 1 - look for something already waiting</span><br><span class="hljs-comment">// 按照随机顺序检测scase中的channel是否ready</span><br><span class="hljs-keyword">var</span> dfli <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> dfl *scase<br><span class="hljs-keyword">var</span> casi <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> cas *scase<br><span class="hljs-keyword">var</span> recvOK <span class="hljs-keyword">bool</span><br><span class="hljs-comment">//开始遍历case数组了</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; ncases; i++ &#123;<br>casi = <span class="hljs-keyword">int</span>(pollorder[i])<br>cas = &amp;scases[casi]<br>c = cas.c<br><br><span class="hljs-keyword">switch</span> cas.kind &#123;<br><span class="hljs-keyword">case</span> caseNil:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment">// 接收chan</span><br><span class="hljs-keyword">case</span> caseRecv:<br>sg = c.sendq.dequeue()<br><span class="hljs-comment">// 当chan的等待写队列不为空，需要等待</span><br><span class="hljs-keyword">if</span> sg != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">goto</span> recv<br>&#125;<br><span class="hljs-comment">//当chan的缓存队列存在元素时，不需要等待</span><br><span class="hljs-keyword">if</span> c.qcount &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">goto</span> bufrecv<br>&#125;<br><span class="hljs-comment">// 当chan关闭时</span><br><span class="hljs-keyword">if</span> c.closed != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">goto</span> rclose<br>&#125;<br><span class="hljs-comment">//发送chan</span><br><span class="hljs-keyword">case</span> caseSend:<br><span class="hljs-keyword">if</span> raceenabled &#123;<br>racereadpc(c.raceaddr(), cas.pc, chansendpc)<br>&#125;<br><span class="hljs-comment">// 当chan关闭时</span><br><span class="hljs-keyword">if</span> c.closed != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">goto</span> sclose<br>&#125;<br><span class="hljs-comment">//当chan的等待读消息的队列不为空，需要等待</span><br>sg = c.recvq.dequeue()<br><span class="hljs-keyword">if</span> sg != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">goto</span> send<br>&#125;<br><span class="hljs-comment">// chan的缓存队列的元素少于缓存容量时，还有位置，不需要等待</span><br><span class="hljs-keyword">if</span> c.qcount &lt; c.dataqsiz &#123;<br><span class="hljs-keyword">goto</span> bufsend<br>&#125;<br><br><span class="hljs-keyword">case</span> caseDefault:<br>dfli = casi<br>dfl = cas<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> dfl != <span class="hljs-literal">nil</span> &#123;<br>selunlock(scases, lockorder)<br>casi = dfli<br>cas = dfl<br><span class="hljs-keyword">goto</span> retc<br>&#125;<br><br><span class="hljs-comment">// pass 2 - enqueue on all chans</span><br><span class="hljs-comment">//所有case都未ready，且没有default语句</span><br><span class="hljs-comment">//将当前协程加入到所有channel的等待队列</span><br>gp = getg()<br><span class="hljs-keyword">if</span> gp.waiting != <span class="hljs-literal">nil</span> &#123;<br>throw(<span class="hljs-string">&quot;gp.waiting != nil&quot;</span>)<br>&#125;<br>nextp = &amp;gp.waiting<br><span class="hljs-keyword">for</span> _, casei := <span class="hljs-keyword">range</span> lockorder &#123;<br>casi = <span class="hljs-keyword">int</span>(casei)<br>cas = &amp;scases[casi]<br><span class="hljs-keyword">if</span> cas.kind == caseNil &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>c = cas.c<br>sg := acquireSudog()<br>sg.g = gp<br>sg.isSelect = <span class="hljs-literal">true</span><br><span class="hljs-comment">// No stack splits between assigning elem and enqueuing</span><br><span class="hljs-comment">// sg on gp.waiting where copystack can find it.</span><br>sg.elem = cas.elem<br>sg.releasetime = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> t0 != <span class="hljs-number">0</span> &#123;<br>sg.releasetime = <span class="hljs-number">-1</span><br>&#125;<br>sg.c = c<br><span class="hljs-comment">// Construct waiting list in lock order.</span><br>*nextp = sg<br>nextp = &amp;sg.waitlink<br><br><span class="hljs-keyword">switch</span> cas.kind &#123;<br><span class="hljs-keyword">case</span> caseRecv:<br><span class="hljs-comment">// 加入等待接收队列</span><br>c.recvq.enqueue(sg)<br><br><span class="hljs-keyword">case</span> caseSend:<br><span class="hljs-comment">// 加入等待发送队列</span><br>c.sendq.enqueue(sg)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// wait for someone to wake us up</span><br><span class="hljs-comment">//当将协程转入阻塞，等待被唤醒</span><br>gp.param = <span class="hljs-literal">nil</span><br>gopark(selparkcommit, <span class="hljs-literal">nil</span>, waitReasonSelect, traceEvGoBlockSelect, <span class="hljs-number">1</span>)<br><br>sellock(scases, lockorder)<br><br>gp.selectDone = <span class="hljs-number">0</span><br>sg = (*sudog)(gp.param)<br>gp.param = <span class="hljs-literal">nil</span><br><br><span class="hljs-comment">// pass 3 - dequeue from unsuccessful chans</span><br><span class="hljs-comment">// otherwise they stack up on quiet channels</span><br><span class="hljs-comment">// record the successful case, if any.</span><br><span class="hljs-comment">// We singly-linked up the SudoGs in lock order.</span><br><span class="hljs-comment">//唤醒后返回channel对应的case index</span><br>casi = <span class="hljs-number">-1</span><br>cas = <span class="hljs-literal">nil</span><br>sglist = gp.waiting<br><span class="hljs-comment">// Clear all elem before unlinking from gp.waiting.</span><br><span class="hljs-keyword">for</span> sg1 := gp.waiting; sg1 != <span class="hljs-literal">nil</span>; sg1 = sg1.waitlink &#123;<br>sg1.isSelect = <span class="hljs-literal">false</span><br>sg1.elem = <span class="hljs-literal">nil</span><br>sg1.c = <span class="hljs-literal">nil</span><br>&#125;<br>gp.waiting = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">for</span> _, casei := <span class="hljs-keyword">range</span> lockorder &#123;<br>k = &amp;scases[casei]<br><span class="hljs-keyword">if</span> k.kind == caseNil &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> sglist.releasetime &gt; <span class="hljs-number">0</span> &#123;<br>k.releasetime = sglist.releasetime<br>&#125;<br><span class="hljs-keyword">if</span> sg == sglist &#123;<br><span class="hljs-comment">// sg has already been dequeued by the G that woke us up.</span><br>casi = <span class="hljs-keyword">int</span>(casei)<br>cas = k<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c = k.c<br><span class="hljs-keyword">if</span> k.kind == caseSend &#123;<br>c.sendq.dequeueSudoG(sglist)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.recvq.dequeueSudoG(sglist)<br>&#125;<br>&#125;<br>sgnext = sglist.waitlink<br>sglist.waitlink = <span class="hljs-literal">nil</span><br><span class="hljs-comment">//释放所有的锁</span><br>releaseSudog(sglist)<br>sglist = sgnext<br>&#125;<br><br><span class="hljs-comment">//没找到case，重新循环</span><br><span class="hljs-keyword">if</span> cas == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">goto</span> loop<br>&#125;<br><br>c = cas.c<br><br><span class="hljs-keyword">if</span> debugSelect &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wait-return: cas0=&quot;</span>, cas0, <span class="hljs-string">&quot; c=&quot;</span>, c, <span class="hljs-string">&quot; cas=&quot;</span>, cas, <span class="hljs-string">&quot; kind=&quot;</span>, cas.kind, <span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> cas.kind == caseRecv &#123;<br>recvOK = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">if</span> raceenabled &#123;<br><span class="hljs-keyword">if</span> cas.kind == caseRecv &amp;&amp; cas.elem != <span class="hljs-literal">nil</span> &#123;<br>raceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cas.kind == caseSend &#123;<br>raceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> msanenabled &#123;<br><span class="hljs-keyword">if</span> cas.kind == caseRecv &amp;&amp; cas.elem != <span class="hljs-literal">nil</span> &#123;<br>msanwrite(cas.elem, c.elemtype.size)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cas.kind == caseSend &#123;<br>msanread(cas.elem, c.elemtype.size)<br>&#125;<br>&#125;<br><br>selunlock(scases, lockorder)<br><span class="hljs-keyword">goto</span> retc<br><br>bufrecv:<br><span class="hljs-comment">// 可以从缓冲区接收</span><br><span class="hljs-keyword">if</span> raceenabled &#123;<br><span class="hljs-keyword">if</span> cas.elem != <span class="hljs-literal">nil</span> &#123;<br>raceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)<br>&#125;<br>raceacquire(chanbuf(c, c.recvx))<br>racerelease(chanbuf(c, c.recvx))<br>&#125;<br><span class="hljs-keyword">if</span> msanenabled &amp;&amp; cas.elem != <span class="hljs-literal">nil</span> &#123;<br>msanwrite(cas.elem, c.elemtype.size)<br>&#125;<br>recvOK = <span class="hljs-literal">true</span><br>qp = chanbuf(c, c.recvx)<br><span class="hljs-keyword">if</span> cas.elem != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 将chan缓存中的数据拷贝到 case.elem。  eg: a := &lt;-ch, a就是case.elem</span><br>typedmemmove(c.elemtype, cas.elem, qp)<br>&#125;<br>typedmemclr(c.elemtype, qp)<br>c.recvx++<br><span class="hljs-keyword">if</span> c.recvx == c.dataqsiz &#123;<br>c.recvx = <span class="hljs-number">0</span><br>&#125;<br>c.qcount--<br>selunlock(scases, lockorder)<br><span class="hljs-keyword">goto</span> retc<br><br>bufsend:<br><span class="hljs-comment">//可以发送到缓冲区</span><br><span class="hljs-keyword">if</span> raceenabled &#123;<br>raceacquire(chanbuf(c, c.sendx))<br>racerelease(chanbuf(c, c.sendx))<br>raceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)<br>&#125;<br><span class="hljs-keyword">if</span> msanenabled &#123;<br>msanread(cas.elem, c.elemtype.size)<br>&#125;<br><span class="hljs-comment">// 将cas.elem拷贝到chan的缓存中。eg: ch &lt;- a, a 就是 cas.elem</span><br>typedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem)<br>c.sendx++<br><span class="hljs-keyword">if</span> c.sendx == c.dataqsiz &#123;<br>c.sendx = <span class="hljs-number">0</span><br>&#125;<br>c.qcount++<br>selunlock(scases, lockorder)<br><span class="hljs-keyword">goto</span> retc<br><br>recv:<br><span class="hljs-comment">//可以从休眠的发件人（sg）接收</span><br>recv(c, sg, cas.elem, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> debugSelect &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;syncrecv: cas0=&quot;</span>, cas0, <span class="hljs-string">&quot; c=&quot;</span>, c, <span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br>recvOK = <span class="hljs-literal">true</span><br><span class="hljs-keyword">goto</span> retc<br><br>rclose:<br><span class="hljs-comment">//在封闭channel的末尾读取</span><br>selunlock(scases, lockorder)<br>recvOK = <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> cas.elem != <span class="hljs-literal">nil</span> &#123;<br>typedmemclr(c.elemtype, cas.elem)<br>&#125;<br><span class="hljs-keyword">if</span> raceenabled &#123;<br>raceacquire(c.raceaddr())<br>&#125;<br><span class="hljs-keyword">goto</span> retc<br><br>send:<br><span class="hljs-comment">//可以发送到休眠的接收器（sg）</span><br><span class="hljs-keyword">if</span> raceenabled &#123;<br>raceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)<br>&#125;<br><span class="hljs-keyword">if</span> msanenabled &#123;<br>msanread(cas.elem, c.elemtype.size)<br>&#125;<br>send(c, sg, cas.elem, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> debugSelect &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;syncsend: cas0=&quot;</span>, cas0, <span class="hljs-string">&quot; c=&quot;</span>, c, <span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br><span class="hljs-keyword">goto</span> retc<br><br>retc:<br><span class="hljs-keyword">if</span> cas.releasetime &gt; <span class="hljs-number">0</span> &#123;<br>blockevent(cas.releasetime-t0, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> casi, recvOK<br><br>sclose:<br><span class="hljs-comment">//在关闭的channel上发送</span><br>selunlock(scases, lockorder)<br><span class="hljs-built_in">panic</span>(plainError(<span class="hljs-string">&quot;send on closed channel&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>selectgo()实际执行过程：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">1.</span>初始化pollorder切片和lockorder切片，其中pollorder是存放所有<span class="hljs-keyword">case</span>的，lockorder是存放所有channel<br><span class="hljs-number">2.</span>对pollorder进行重排序，打乱所有<span class="hljs-keyword">case</span>的顺序<br><span class="hljs-number">3.</span>锁定scase语句中所有的channel<br><span class="hljs-number">4.</span>按照随机顺序检测pollorder中<span class="hljs-keyword">case</span>对应的channel是否ready：<br>    <span class="hljs-number">4.1</span> 如果<span class="hljs-keyword">case</span>可读，则读取channel中数据，解锁所有的channel，然后返回(<span class="hljs-keyword">case</span> <span class="hljs-keyword">index</span>, <span class="hljs-literal">true</span>)<br>    <span class="hljs-number">4.2</span> 如果<span class="hljs-keyword">case</span>可写，则将数据写入channel，解锁所有的channel，然后返回(<span class="hljs-keyword">case</span> <span class="hljs-keyword">index</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-number">4.3</span> 所有<span class="hljs-keyword">case</span>都未ready，则解锁所有的channel，然后返回（<span class="hljs-literal">default</span> <span class="hljs-keyword">index</span>, <span class="hljs-literal">false</span>）<br><span class="hljs-number">5.</span>所有<span class="hljs-keyword">case</span>都未ready，且没有<span class="hljs-literal">default</span>语句<br>    <span class="hljs-number">5.1</span> 将当前协程加入到所有channel的等待队列<br>    <span class="hljs-number">5.2</span> 当将协程转入阻塞，等待被唤醒<br><span class="hljs-number">6.</span>唤醒后返回channel对应的<span class="hljs-keyword">case</span> <span class="hljs-keyword">index</span><br>    <span class="hljs-number">6.1</span> 如果是读操作，解锁所有的channel，然后返回(<span class="hljs-keyword">case</span> <span class="hljs-keyword">index</span>, <span class="hljs-literal">true</span>)<br>    <span class="hljs-number">6.2</span> 如果是写操作，解锁所有的channel，然后返回(<span class="hljs-keyword">case</span> <span class="hljs-keyword">index</span>, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><h5><span id="参数">参数</span></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span>cas0 *scase：存储当前<span class="hljs-keyword">select</span>语句的全部<span class="hljs-keyword">case</span><br><span class="hljs-number">2.</span>order0 *<span class="hljs-keyword">uint16</span>：指向一个整形数组，这个数组的长度是<span class="hljs-keyword">case</span>个数的<span class="hljs-number">2</span>倍<br><span class="hljs-number">3.</span>ncase <span class="hljs-keyword">int</span>：<span class="hljs-keyword">case</span>的个数<br></code></pre></td></tr></table></figure><h5><span id="返回值">返回值</span></h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span><span class="hljs-built_in">int</span>：就绪<span class="hljs-keyword">case</span>的编号<br><span class="hljs-number">2.</span><span class="hljs-built_in">bool</span>：是否从管道读取了数据 <span class="hljs-literal">true</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h5><span id="随机执行case怎么去实现">随机执行case怎么去实现？</span></h5><p>order0数组是case执行随机性的关键</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang">order0数组被一分为二<br><span class="hljs-number">1</span>.前半部分存放<span class="hljs-keyword">case</span>的随机顺序-pollorder<br><span class="hljs-number">2</span>.后半部分存放管道加锁顺序-lockorder<br><br>源码中，selectgo()将pollorder的顺序完全打乱，这样在检查<span class="hljs-keyword">case</span>是否就绪时就会表现出随机性<br><br><span class="hljs-function"><span class="hljs-title">selectgo</span><span class="hljs-params">()</span>会按照当前管道地址顺序对多个管道加锁，进而避免死锁</span><br></code></pre></td></tr></table></figure><h3><span id="2for-range">2.for-range</span></h3><p>Golang中可以使用for-range遍历集合元素，可以作用于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span>数组<br><span class="hljs-number">2.</span>数组指针<br><span class="hljs-number">3.</span>切片<br><span class="hljs-number">4.</span>string<br><span class="hljs-number">5.</span>map<br><span class="hljs-number">6.</span>channel<br></code></pre></td></tr></table></figure><h4><span id="21-特性">2.1 特性</span></h4><h5><span id="遍历数组">遍历数组</span></h5><p>从下标0开始，依次遍历数组元素，返回元素的下标和元素值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> := [<span class="hljs-number">3</span>]int&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><br>for <span class="hljs-selector-tag">i</span>, v := range a &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="遍历切片">遍历切片</span></h5><p>与遍历数组类似</p><h5><span id="遍历string">遍历string</span></h5><p>从下标0开始，依次遍历数组元素，返回元素的下标和元素值，需要注意的是，这里的下标可能不连续</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;hello,中国&quot;</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> s &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="遍历map">遍历map</span></h5><p>返回每个元素的key-value</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br><span class="hljs-comment">// 胜率初始化</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h5><span id="遍历channel">遍历channel</span></h5><p>返回channel所有的元素(按照入通道顺序)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, <span class="hljs-number">2</span>)<br>c &lt;- <span class="hljs-string">&quot;hello&quot;</span><br>c &lt;- <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-keyword">for</span> e := <span class="hljs-keyword">range</span> c &#123;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h4><span id="22-实现原理">2.2 实现原理</span></h4><p>编译器会将for-range语句处理成传统的for-loop，伪代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> INIT ; COND ; POST &#123;<br>    ITER_INIT<br>    INDEX = INDEX_TEMP  <span class="hljs-regexp">//</span> 下标<br>    VALUE = VALUE_TEMP  <span class="hljs-regexp">//</span> 元素<br>    original statements <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span>-range原始代码<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会从for-range语句中提取出初始化语句INIT，条件语句COND，迭代语句POST。</p><h5><span id="作用于数组">作用于数组</span></h5><p>伪代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">len_temp := <span class="hljs-built_in">len</span>(<span class="hljs-keyword">range</span>) <span class="hljs-comment">// 循环次数在遍历前就已经确定</span><br>range_temp := <span class="hljs-keyword">range</span><br><span class="hljs-keyword">for</span> index_temp = <span class="hljs-number">0</span>; index_temp &lt; len_temp; index_temp++ &#123;<br>       value_temp = range_temp[index_temp]<br>       index = index_temp<br>       value = value_temp<br>       <span class="hljs-comment">// original body</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="作用于切片-与数组操作类似">作用于切片-与数组操作类似</span></h5><p>伪代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">for_temp := <span class="hljs-keyword">range</span><br>len_temp := <span class="hljs-built_in">len</span>(for_temp)<br><span class="hljs-keyword">for</span> index_temp = <span class="hljs-number">0</span>; index_temp &lt; len_temp; index_temp++ &#123;<br>    value_temp = for_temp[index_temp]<br>    index = index_temp<br>    value = value_temp<br>    <span class="hljs-comment">// original body</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="作用于string">作用于string</span></h5><p>需要注意的是，遍历string时，下标可能不连续，需要每次进行判断，这一点在源码中也有体现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">len_temp := <span class="hljs-built_in">len</span>(<span class="hljs-keyword">range</span>) <span class="hljs-comment">// 循环次数在遍历前就已经确定</span><br><span class="hljs-keyword">var</span> next_index_temp <span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> index_temp = <span class="hljs-number">0</span>; index_temp &lt; len_temp; index_temp = next_index_temp &#123;<br>       value_temp = <span class="hljs-keyword">rune</span>(<span class="hljs-keyword">range</span>[index_temp])<br>       <span class="hljs-comment">// 此处判断是否连续</span><br>       <span class="hljs-keyword">if</span> value_temp &lt; utf8.RuneSelf &#123;<br>           next_index_temp = index_temp + <span class="hljs-number">1</span><br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           value_temp, next_index_temp = decoderune(<span class="hljs-keyword">range</span>, index_temp)<br>       &#125;<br>       index = index_temp<br>       value = value_temp<br>       <span class="hljs-comment">// original body</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="作用于map">作用于map</span></h5><p>需要注意的是，map底层用hash实现，插入数据是随机的，尽量避免遍历的过程中插入数据</p><p>伪代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> hiter map_iteration_struct<br><span class="hljs-keyword">for</span> mapiterinit(<span class="hljs-keyword">type</span>, <span class="hljs-keyword">range</span>, &amp;hiter); hiter.key != <span class="hljs-literal">nil</span>; mapiternext(&amp;hiter) &#123;<br>    index_temp = *hiter.key<br>    value_temp = *hiter.val<br>    index = index_temp<br>    value = value_temp<br>    <span class="hljs-comment">// original body</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="作用于channel">作用于channel</span></h5><p>channel基于FIFO队列实现，需要依次读取channel中的数据</p><p>伪代码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> &#123;<br>    index_temp, ok_temp = &lt;-range<br>    <span class="hljs-keyword">if</span> !ok_temp &#123;<br>           <span class="hljs-keyword">break</span><br>    &#125;<br>    index = index_temp<br>    <span class="hljs-regexp">//</span> original body<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 2: 常见数据结构和底层实现原理</title>
    <link href="/2021/12/31/Cap-2-%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/12/31/Cap-2-%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2><span id="1channel-管道">1.Channel 管道</span></h2><p>Golang在语言层面提供的协程通信方式</p><h3><span id="11特性">1.1特性</span></h3><h4><span id="初始化">初始化</span></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>or<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br>or<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h4><span id="管道操作">管道操作</span></h4><p>管道大小</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">()</span></span>:缓冲区数据个数<br><span class="hljs-function"><span class="hljs-title">cap</span><span class="hljs-params">()</span></span>:缓冲区大小<br></code></pre></td></tr></table></figure><p>数据流入&amp;流出</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">流入(写)：<br>ch &lt;- <span class="hljs-number">1</span><br><br>流出(读)：<br>d := &lt;- ch<br><br>d, ok := &lt;- ch<br><span class="hljs-keyword">if</span>(!ok)&#123;<br>    <span class="hljs-comment">// 读取不成功</span><br>&#125;<br><span class="hljs-comment">// 读取成功逻辑</span><br></code></pre></td></tr></table></figure><p>函数间传递channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RW channel</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanRW</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>&#123;<br>    <span class="hljs-comment">// Read and write</span><br>&#125;<br><br><span class="hljs-comment">// R channel</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanRead</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>&#123;<br>    <span class="hljs-comment">// Read only</span><br>&#125;<br><br><span class="hljs-comment">// W channel</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanWrite</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>)</span></span>&#123;<br>    <span class="hljs-comment">// Write only</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关闭管道</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">close</span><span class="hljs-params">(ch)</span></span><br></code></pre></td></tr></table></figure><p>数据读写性质</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span>.读取<span class="hljs-keyword">nil</span>管道，读写均会阻塞<br><span class="hljs-number">2</span>.关闭的管道仍然可读，写数据会panic<br>其中，如果管道缓冲区有数据 -&gt; 可以读取<br>管道缓冲区没数据 -&gt; 返回相应类型的零值<br></code></pre></td></tr></table></figure><h3><span id="12channel实现原理fifo队列数据按照写入的顺序流出管道">1.2Channel实现原理–FIFO队列，数据按照写入的顺序流出管道</span></h3><p>数据结构</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> src<span class="hljs-regexp">/runtime/</span>chan.go:chan<br>type hchan struct &#123;<br>    qcount      uint            <span class="hljs-regexp">//</span> 队列中剩余元素个数<br>    dataqsiz    uint            <span class="hljs-regexp">//</span> 环形队列长度<br>    buf         unsafe.Pointer  <span class="hljs-regexp">//</span> 环形队列指针，指向队列的内存<br>    elemsize    uint16          <span class="hljs-regexp">//</span> 每个元素的大小<br>    elemtype    *_type          <span class="hljs-regexp">//</span> 元素类型<br>    sendx       uint            <span class="hljs-regexp">//</span> 队列下标，指示元素写入时存放到队列中的位置（队尾）<br>    recvx       uint            <span class="hljs-regexp">//</span> 队列下标，指示下一个被读取的元素在队列的位置（队首）<br>    recvq       waitq           <span class="hljs-regexp">//</span> 等待读消息的协程队列<br>    sendq       waitq           <span class="hljs-regexp">//</span> 等待写消息的协程队列<br>    lock        mutex           <span class="hljs-regexp">//</span> 互斥锁，chan不允许并发读写<br>    <br>    <span class="hljs-regexp">//</span> 通道是否关闭<br>    closed      uint32<br>    <br>    <span class="hljs-regexp">//</span> 互斥锁（读写锁）<br>    lock mutex<br>&#125;<br><br><span class="hljs-regexp">//</span> waitq 的定义 -- https:<span class="hljs-regexp">//</span>draveness.me<span class="hljs-regexp">/golang/</span>tree/runtime.waitq<br><span class="hljs-regexp">//</span> 实际上是一个队列（双向链表），由协程组成，协程的定义要到后面章节才能讲到<br>type waitq struct &#123;<br>    first *sudog<br>    last *sudog<br>&#125;<br><br><span class="hljs-regexp">//</span> sudog 的定义（双向链表）<br>type sudog struct &#123;<br>    g *g<br>    <span class="hljs-keyword">next</span> *g<br>    prev *g<br>    elem unsafe.Pointer<br>&#125;<br></code></pre></td></tr></table></figure><p>环形队列–缓冲区</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">chan内部实现了一个环形队列作为缓冲区，队列的长度在创建chan的时候指定<br>-- src<span class="hljs-regexp">/runtime/</span>chan.go line71 <span class="hljs-keyword">func</span> makechan(t *chantype, size int) *hchan &#123;&#125;<br><br>qcount：表示了环形队列中剩余的元素个数<br>datasize：表示了队列的长度，即缓冲区的大小<br><br>buf：一个unsafe.Pointer指针，可以指向任意类型的元素，在这里指向了环形队列的实际内存地址<br>-- 内存由 gc 统一分配，buf 指向 gc 返回的内存地址<br><br><span class="hljs-regexp">//</span> chan.go 中，并未简单的使用 sendx 和 recvx 来判断队列的 full 和 empty<br><span class="hljs-regexp">//</span> 判断 channel empty 的函数：src<span class="hljs-regexp">/runtime/</span>chan.go line <span class="hljs-number">128</span> <span class="hljs-keyword">func</span> full(c *hchan) bool &#123;&#125;<br><span class="hljs-regexp">//</span> 判断 channel full 的函数：src<span class="hljs-regexp">/runtime/</span>chan.go line <span class="hljs-number">422</span> <span class="hljs-keyword">func</span> empty(c *hchan) bool &#123;&#125;<br>sendx：下一个写入的值，在环形队列中的位置（循环写，如何判断队满）<br>recvx：下一个读取的值，在环形队列中的位置（循环读，如何判断队空）<br></code></pre></td></tr></table></figure><p>等待队列: recvq / sendq</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">管道发送数据的源代码：src/runtime/<span class="hljs-keyword">chan</span>.<span class="hljs-keyword">go</span> Line <span class="hljs-number">157</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanSend</span><span class="hljs-params">()</span></span><br>管道接收数据的源代码：src/runtime/<span class="hljs-keyword">chan</span>.<span class="hljs-keyword">go</span> Line <span class="hljs-number">448</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chanRecv</span><span class="hljs-params">()</span></span><br><br>其中涉及到了 recvq / sendq 的 阻塞 与 唤醒 状态的切换<br><br>阻塞：<br>recvq：从管道读取数据时，如果管道缓冲区为空，或者没有缓冲区，当前协程会被阻塞，并加入到recvq<br>sendq：向管道写入数据时，如果管道缓冲区为空，或者缓冲区满，当前协程会被阻塞，并加入到sendq<br><br>唤醒：<br>recvq：被向管道写入数据的协程唤醒<br>sendq：被从管道读取数据的协程唤醒<br></code></pre></td></tr></table></figure><h3><span id="13管道操作">1.3管道操作</span></h3><p>创建管道 – src/runtime/chan.go Line 71 func makechan()</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm">实际逻辑是，初始化 hchan 结构<br>func makechan(t *chantype<span class="hljs-punctuation">,</span> size int) *hchan &#123;<br>    var <span class="hljs-keyword">c</span> *hchan<br>    <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> new(hchan)<br>    <span class="hljs-keyword">c</span>.buf <span class="hljs-operator">=</span> <span class="hljs-keyword">malloc</span>(实际内存空间)<br>    <span class="hljs-keyword">c</span>.elemsize <span class="hljs-operator">=</span> 元素大小<br>    <span class="hljs-keyword">c</span>.elemtype <span class="hljs-operator">=</span> 元素类型<br>    <span class="hljs-keyword">c</span>.datasize <span class="hljs-operator">=</span> size<br>    <br>    return <span class="hljs-keyword">c</span><br>&#125;<br></code></pre></td></tr></table></figure><p>写数据 – src/runtime/chan.go Line 448 func chansend()</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.如果当前 recvq 不为空，说明：缓冲区为空，且有协程在等待数据，这个时候直接把数据传递给 recvq 中的第一个协程，不需要写入缓冲区<br><br><span class="hljs-attribute">2</span>.如果当前 recvq 为空，去查看缓冲区的情况<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> 如果缓冲区有空余位置，直接将数据写入缓冲区，结束发送过程<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> 如果缓冲区没有空余位置，将当前协程加入 sendq 队列，进入睡眠并等待被唤醒<br></code></pre></td></tr></table></figure><p>读数据 – src/runtime/chan.go Line 157 func chanrecv()</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.如果当前 sendq 不为空，需要考虑当前通道是否有缓冲区<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">1</span> 无缓冲区，直接从 sendq 中取出一个协程，读取数据并唤醒协程<br>    <span class="hljs-attribute">1</span>.<span class="hljs-number">2</span> 有缓冲区，说明当前缓冲区已经满，并且有协程等待写入数据，此时需要按照FIFO原则，从队首读取数据，将队首标识后移，同时，从sendq中取出一个协程，将数据写入到队尾<br>    <br><span class="hljs-attribute">2</span>.如果当前sendq为空，需要判断缓冲区是否有数据<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> qcount&gt;<span class="hljs-number">0</span>，说明：缓冲区有数据，直接从队首读数据，队首标识后移<br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> qcount=<span class="hljs-number">0</span>，说明：缓冲区无数据，需要将当前协程加入到recvq队列，进入睡眠并等待被唤醒<br></code></pre></td></tr></table></figure><p>关闭管道 – src/runtime/chan.go Line 351 func closechan()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gList 是一个 Stack 结构</span><br>会将recvq中的协程全部唤醒，这些协程获取的数据都为<span class="hljs-literal">nil</span><br>同时唤醒sendq中的全部协程，并触发<span class="hljs-built_in">panic</span>（写已经关闭的通道）<br></code></pre></td></tr></table></figure><h2><span id="2slice-切片">2.Slice 切片</span></h2><p>golang中的动态数组，依托底层的数组进行实现</p><h3><span id="21特性">2.1特性</span></h3><h4><span id="初始化">初始化</span></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">变量声明：<br><span class="hljs-keyword">var</span> s []<span class="hljs-keyword">int</span><br><br>字面量：<br>s := []<span class="hljs-keyword">int</span>&#123;&#125; <br>s := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><br><span class="hljs-built_in">make</span>()函数：<br>s := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br>s := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br><br>切取：左闭右开<br>arr := [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s := arr[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h4><span id="切片操作">切片操作</span></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">()</span></span>：查询切片长度<br><span class="hljs-function"><span class="hljs-title">cap</span><span class="hljs-params">()</span></span>：查询切片容量<br><span class="hljs-function"><span class="hljs-title">append</span><span class="hljs-params">()</span></span>：切片增加元素<br><span class="hljs-function"><span class="hljs-title">copy</span><span class="hljs-params">(src,dist)</span></span>：<span class="hljs-attribute">src</span>源切片，dist目的切片，将源切片的数据逐个拷贝到目的切片指向的数组，不进行扩容操作<br></code></pre></td></tr></table></figure><h3><span id="22实现原理-本质上是个结构体依托数组实现">2.2实现原理 - 本质上是个结构体，依托数组实现</span></h3><h4><span id="数据结构">数据结构</span></h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">// src/runtime/slice.go<br>type slice struct &#123;<br>   <span class="hljs-built_in"> array </span> unsafe.Pointer   // 指向底层数组的指针(任意类型)<br>    len<span class="hljs-built_in"> int </span>                // 切片长度 len()返回<br>    cap<span class="hljs-built_in"> int </span>                // 切片容量 cap()返回<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="切片扩容">切片扩容</span></h4><p>使用append向slice追加元素时，如果slice空间不足，会触发slice扩容<br>实际操作：重新分配一块更大的内存，将old slice拷贝到new slice，然后返回new slice，最后将数据追加到new slice</p><h5><span id="扩容规则">扩容规则</span></h5><p>1.cap &lt; 1024,新slice的容量将扩大为原来的2倍<br>2.cap &gt; 1024,新slice的容量扩大为原来的1.25倍</p><h4><span id="切片表达式">切片表达式</span></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>.简单表达式 <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[low : high]</span><br><span class="hljs-number">2</span>.扩展表达式 <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[low : high : max]</span><br></code></pre></td></tr></table></figure><h5><span id="需要注意的点">需要注意的点</span></h5><ul><li>底层数组共享 ： 修改切片的值，将会修改底层数组的值</li><li>边界：左开右闭</li><li>切取string：切取string，得到的也是string，不是字符切片</li></ul><h2><span id="3-map-映射">3. map 映射</span></h2><p>map底层用Hash表实现</p><h3><span id="31-特性">3.1 特性</span></h3><h4><span id="初始化">初始化</span></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">字面量初始化：<br>m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span> &#123;<br>    <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">2</span>,<br>&#125;<br><br><span class="hljs-built_in">make</span>()初始化：<br>m := <span class="hljs-built_in">make</span>([<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h4><span id="增删改查">增删改查</span></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">m := make(map[string]int, <span class="hljs-number">10</span>)<br><span class="hljs-regexp">//</span> add<br>m[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> update<br>m[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">delete</span>(m, <span class="hljs-string">&quot;apple&quot;</span>)<br><span class="hljs-regexp">//</span> query<br>v, exist := m[<span class="hljs-string">&quot;apple&quot;</span>]<br><span class="hljs-keyword">if</span> exist &#123;<br>    <span class="hljs-regexp">//</span> 查询成功逻辑<br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="tips">Tips</span></h5><ul><li>在修改操作中，如果 key 不存在，就转为了插入操作</li><li>delete() 是 map 的内置函数，且没有返回值，在 map 为 nil 或者键不存在时，delete() 不报错，相当于空操作</li><li>map 只能使用 len() 返回 map 内键值对的个数</li></ul><h4><span id="并发读写">并发读写</span></h4><p>map 操作不是原子的，意味着，map 不支持并发读写，不是线程安全的，多个线程同时操作 map 可能会产生读写冲突</p><p>Go1.9 中引入了标准库 sync 下的 Map ， sync 包下面的 map 支持并发读写</p><p>相关链接: <a href="https://blog.csdn.net/jiankunking/article/details/78808978">Go 1.9 sync Map 源码阅读笔记_衣舞晨风-CSDN博客</a></p><h4><span id="空map">空map</span></h4><p>指的是，未初始化的map，值为nil<br>向值为nil的map添加元素会触发panic<br>查询，删除空 map 不会报错</p><h3><span id="32-实现原理-go专家编程-没有给出对应代码的版本最新版本的代码和书上的出入有点大">3.2 实现原理 – 《Go专家编程》 没有给出对应代码的版本，最新版本的代码和书上的出入有点大</span></h3><h4><span id="数据结构">数据结构</span></h4><p>map的数据结构</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> runtime/map.go Line <span class="hljs-number">115</span><br><span class="hljs-regexp">//</span> A header <span class="hljs-keyword">for</span> a Go map.<br>type hmap struct &#123;<br>    count       int             <span class="hljs-regexp">//</span> 当前保存元素的个数<br>    B           uint8           <span class="hljs-regexp">//</span> bucket 数组的大小<br>    buckets     unsafe.Pointer  <span class="hljs-regexp">//</span> bucket 数组，数组长度为 <span class="hljs-number">2</span>^B<br>    oldbuckets  unsafe.Pointer  <span class="hljs-regexp">//</span> 指向老旧 bucket 的指针，用于扩容<br>&#125;<br></code></pre></td></tr></table></figure><p>bucket的数据结构</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> runtime/map.go<br>type bmap struct &#123;<br>    tophash     [<span class="hljs-number">8</span>]uint8    <span class="hljs-regexp">//</span> 存储 Hash 值高<span class="hljs-number">8</span>位 每个桶存储 <span class="hljs-number">8</span> 个键值对<br>    data        []byte      <span class="hljs-regexp">//</span> 桶里的 key value 数据：key<span class="hljs-regexp">/key/</span>...<span class="hljs-regexp">/value/</span>value<br>    overflow    *bmap       <span class="hljs-regexp">//</span> 指向溢出 bucket 的地址(链地址法解决key冲突)<br>&#125;<br></code></pre></td></tr></table></figure><p>存储细节：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">topHash：<br>Hash值拆分为低位和高位<br>Hash低位相同的键，存入当前桶的时候，会把Hash值高位存入到数组中，便于后续匹配<br><br>data：<br>存放key-value数据，且顺序按照：先key后value<br>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>value<span class="hljs-regexp">/value/</span>value<span class="hljs-regexp">/value/</span>value<span class="hljs-regexp">/value/</span>value/value<br><br>overflow：链地址法<br>指向下一个bucket，将冲突的键连起来<br></code></pre></td></tr></table></figure><h4><span id="负载因子">负载因子</span></h4><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">计算公式：负载因子</span>=<span class="hljs-string">键数量/bucket数量</span><br></code></pre></td></tr></table></figure><p>Golang中规定，当负载因子达到6.5时，触发rehash</p><p>具体过程：申请更多的bucket，对所有的键值对重新组织，使其均匀的分布在bucket</p><h4><span id="扩容">扩容</span></h4><h5><span id="扩容条件">扩容条件</span></h5><ul><li>负载因子大于6.5，平均每个bucket存储的键值对达到6.5个及以上</li><li>overflow数量大于2^15，即overflow的数量超过32768</li></ul><h5><span id="增量扩容-逐步搬迁策略">增量扩容 - 逐步搬迁策略</span></h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">当负载因子过大时，新建一个bucket数组，新的bucket数组的长度是原来的<span class="hljs-number">2</span>倍，然后将旧bucket的数据搬迁到新的bucket数组中，搬迁成功后安全的释放掉旧bucket数组<br><br>对应到数据结构中：<span class="hljs-built_in">map</span>中的buckets指向新建的数组，oldbuckets指向旧的bucket数组<br><br>这里说到底搬迁，并非是一次性搬迁，考虑到<span class="hljs-built_in">map</span>中的<span class="hljs-built_in">key</span>-value的数量，一次性搬迁可能会有一个很大的延迟<br><br>Go在这里采用的是逐步搬迁策略：（像极了mysql <span class="hljs-built_in">flush</span> 脏页的操作）<br>    每次访问<span class="hljs-built_in">map</span>时，都会触发一次搬迁，每次搬迁两个键值对<br></code></pre></td></tr></table></figure><h5><span id="等量扩容">等量扩容</span></h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bucket数量不变，重新做一遍类似增量扩容的操作，把松散的键值对重新排列一次，使得bucket的利用率更高</span><br><span class="hljs-keyword"></span><br>极端的情况下，如经过大量的增删后，键值对集中在一小部分<span class="hljs-keyword">bucket中，会造成溢出的bucket很多，但是访问效率很差</span><br></code></pre></td></tr></table></figure><h4><span id="hash函数">hash函数</span></h4><p>golang底层为各种类型如：int32,int64,string等类型定义了一系列相关的函数，确保了不管什么值进来都能计算出一个32位的hash值</p><p>具体实现参见：<br><a href="https://www.jianshu.com/p/8ea1bf5058c7">深入理解 Go map：赋值和扩容迁移</a></p><h4><span id="增删改查">增删改查</span></h4><h5><span id="查找过程">查找过程</span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">一般情况：<br><span class="hljs-number">1.</span>根据key值，计算出<span class="hljs-built_in">hash</span>值<br><span class="hljs-number">2.</span>取<span class="hljs-built_in">hash</span>值低位与hmap.B取模来确定bucket的位置<br><span class="hljs-number">3.</span>取<span class="hljs-built_in">hash</span>值高位，在tophash数组中查询<br><span class="hljs-number">4.</span>如果tophash[i]中存储的<span class="hljs-built_in">hash</span>值与当前key的<span class="hljs-built_in">hash</span>值相同，则获取tophash[i]指向的key值进行比较<br><span class="hljs-number">5.</span>当前bucket没有找到，依次从溢出的bucket中寻找<br><br>特殊情况：<br>如果<span class="hljs-built_in">map</span>处于搬迁过程中，那么查找时，优先从oldbuckets数组中查找<br></code></pre></td></tr></table></figure><h5><span id="添加过程">添加过程</span></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">一般情况：<br><span class="hljs-number">1.</span>根据key值，计算出<span class="hljs-built_in">hash</span>值<br><span class="hljs-number">2.</span>取<span class="hljs-built_in">hash</span>值低位与hmap.B取模来确定bucket的位置<br><span class="hljs-number">3.</span>取<span class="hljs-built_in">hash</span>值高位，在tophash数组中查询<br><span class="hljs-number">4.</span>如果tophash[i]中存储的<span class="hljs-built_in">hash</span>值与当前key的<span class="hljs-built_in">hash</span>值相同，则获取tophash[i]指向的key值进行比较，直接更新值<br><span class="hljs-number">5.</span>当前bucket没有找到，依次从溢出的bucket中寻找，找到后更新<br><span class="hljs-number">6.</span>如果未找到key，在bucket中寻找空余位置插入<br><br>特殊情况：<br>如果<span class="hljs-built_in">map</span>处于搬迁过程中，新元素会直接添加到新的bucket数组中，但是查询过程仍是从oldbuckets开始<br></code></pre></td></tr></table></figure><h5><span id="删除过程">删除过程</span></h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">简述如下：<br><span class="hljs-number">1</span>.先查找元素，查到直接从相应<span class="hljs-keyword">bucket删除</span><br><span class="hljs-keyword"></span><span class="hljs-number">2</span>.查不到就什么都不做<br></code></pre></td></tr></table></figure><h2><span id="4struct-结构体">4.struct 结构体</span></h2><p>类似于c++/java中的class定义，源于c中的struct</p><h3><span id="41-内嵌字段">4.1 内嵌字段</span></h3><p>Tips:</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-number">1</span>.<span class="hljs-keyword">struct</span>中可以内嵌各种类型的字段，其他结构体，但是不能嵌套方法<br><span class="hljs-number">2</span>.<span class="hljs-keyword">struct</span>没有继承的概念，当需要<span class="hljs-string">&quot;复用&quot;</span>其他结构体时，需要通过组合的方式将其他结构体嵌入当前结构体<br><span class="hljs-number">3</span>.内嵌结构体时，有两种方式：显示指定，隐式指定<br><span class="hljs-number">4</span>.显式指定时，仅代表某种类型的字段<br><span class="hljs-number">5</span>.隐式指定时，原结构体的字段和方法相当于被当前结构体<span class="hljs-string">&quot;继承&quot;</span><br></code></pre></td></tr></table></figure><p>Sample Code:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 结构体声明</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-keyword">string</span>     <span class="hljs-comment">// Animal内嵌字段</span><br>&#125;<br><br><span class="hljs-comment">// 结构体Animal的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Animal)</span> <span class="hljs-title">SetName</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>)</span></span>&#123;<br>    a.Name = name<br>&#125;<br><br><span class="hljs-comment">// 隐式指定Animal字段 -- &quot;继承&quot;了Animal的SetName()方法</span><br><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;<br>    Animal<br>&#125;<br><br><span class="hljs-comment">// 显示指定Animal字段</span><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>    a Animal<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EmbeddedFoo</span><span class="hljs-params">()</span></span> &#123;<br>    c := Cat&#123;&#125;<br>    <span class="hljs-comment">// 操作Name字段的几种方式</span><br>    <br>    <span class="hljs-comment">// 1.使用Animal的SetName()</span><br>    c.SetName(<span class="hljs-string">&quot;A&quot;</span>)<br>    <br>    <span class="hljs-comment">// 2.使用隐式字段</span><br>    c.Animal.SetName(<span class="hljs-string">&quot;a&quot;</span>)<br>    <br>    <span class="hljs-comment">// 3.使用隐式字段的Name</span><br>    c.Animal.Name = <span class="hljs-string">&quot;B&quot;</span><br>    <br>    <span class="hljs-comment">// 4.使用Name</span><br>    c.Name = <span class="hljs-string">&quot;b&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过结构体的组合，Golang也有多种设计模式：<br><a href="https://cloud.tencent.com/developer/article/1431487">golang设计模式-以kubernetes源码为例</a></p><h3><span id="42-方法受体">4.2 方法受体</span></h3><p>对于结构体要区分方法和函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">函数声明：<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">函数名</span> (参数)</span> &#123; 函数体 &#125;<br><br>方法声明：<br><span class="hljs-function"><span class="hljs-keyword">func</span> (接收者)</span> 函数名 (参数) &#123; 函数体 &#125;<br></code></pre></td></tr></table></figure><p>Tips:</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-number">1.</span>这里的接收者，对应的是reciver，表示方法的接收者，也称为方法受体  <br><span class="hljs-number">2.</span>表示该方法的作用对象 -&gt; 只有作用对象才可以调用该方法<br><span class="hljs-number">3.</span>此处的使用与<span class="hljs-keyword">class</span>和c语言<span class="hljs-keyword">struct</span>中方法的定义和使用相差较远，前者的方法都是定义在<span class="hljs-keyword">class</span>和<span class="hljs-keyword">struct</span>中，用于表示，只有该类或者该类的子类才可以调用<br><span class="hljs-number">4.</span>golang的方法并不定义在<span class="hljs-keyword">struct</span>中，反而定义在<span class="hljs-keyword">struct</span>的外部，且需要显示指定方法被谁调用<br></code></pre></td></tr></table></figure><p>Sample code:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// struct定义</span><br><span class="hljs-keyword">struct</span> Student &#123;<br>    Name <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-comment">// SetName() 方法定义 方法受体 s Student 对象</span><br><span class="hljs-keyword">struct</span> (s Student) <span class="hljs-constructor">SetName(<span class="hljs-params">name</span> <span class="hljs-params">string</span>)</span> &#123;<br>    s.Name = name<br>&#125;<br><br><span class="hljs-comment">// UpdateName() 方法定义 方法受体 s *Student 对象指针</span><br><span class="hljs-keyword">struct</span> (s *Student) <span class="hljs-constructor">UpdateName(<span class="hljs-params">name</span> <span class="hljs-params">string</span>)</span> &#123;<br>    s.Name = name<br>&#125;<br></code></pre></td></tr></table></figure><p>对象和对象指针的区别：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.对象指针可以修改对象的字段<br>2.对象相当于在副本上做了修改，无法修改对象的字段<br></code></pre></td></tr></table></figure><h3><span id="43-字段标签tag-本质上是字符串">4.3 字段标签Tag – 本质上是字符串</span></h3><p>struct允许给字段添加标记Tag</p><h4><span id="tag本质">Tag本质</span></h4><h5><span id="底层数据结构">底层数据结构</span></h5><p>StructField表示结构体的一个字段</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// reflect包<br><span class="hljs-keyword">type</span> StructField struct &#123;<br>    Name <span class="hljs-keyword">string</span>     // 字段名称<br>    <span class="hljs-keyword">Type</span> <span class="hljs-keyword">type</span>       // 字段类型<br>    <span class="hljs-keyword">Tag</span> <span class="hljs-title">StructTag</span>   // <span class="hljs-keyword">Tag</span><br>    <span class="hljs-title">...</span><br><span class="hljs-title">&#125;</span><br><span class="hljs-title">// Tag</span> 字段的定义为<span class="hljs-keyword">string</span><br><span class="hljs-keyword">type</span> StructTag <span class="hljs-keyword">string</span><br></code></pre></td></tr></table></figure><h5><span id="tag约定">Tag约定</span></h5><p>Tag必须由 key : “value”组成，其中：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>.<span class="hljs-keyword">key</span>：非空字符串，不能包含控制字符，冒号，引号，空格<br><span class="hljs-number">2</span>.value：字符串<br></code></pre></td></tr></table></figure><p>Sample Code:</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-keyword">type</span> <span class="hljs-type">TypeMeta</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">Kind</span> <span class="hljs-built_in">string</span> `json:<span class="hljs-string">&quot;kind,omitempty&quot;</span> protobuf:<span class="hljs-string">&quot;bytes,1,opt,name=kind&quot;</span>`<br>    <span class="hljs-type">APIVersion</span> <span class="hljs-built_in">string</span> `json:<span class="hljs-string">&quot;apiVersion,omitempty&quot;</span> protobuf:<span class="hljs-string">&quot;bytes,2,opt,name=apiVersion&quot;</span>`<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">json</span>用于指定struct与<span class="hljs-type">JSON</span>转换<br>protobuf用于控制序列化和反序列化<br></code></pre></td></tr></table></figure><h5><span id="反射获取tag">反射获取Tag</span></h5><p>reflect提供了相关的方法，去获取某一字段的Tag</p><p>Sample Code:</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func PrintTag() &#123;<br>    <span class="hljs-attribute">t</span> := TypeMeta&#123;&#125;<br>    ty := reflect<span class="hljs-variable">.TypeOf</span>(t)<br>    <br>    for i := 0; <span class="hljs-attribute">i &lt; ty.NumField(); i++ &#123;</span><br><span class="hljs-attribute">        fmt.Printf(&quot;Field</span>: %s, Tag: %s\n&quot;, ty<span class="hljs-variable">.Field</span>(i)<span class="hljs-variable">.Name</span>, ty<span class="hljs-variable">.Field</span>(i)<span class="hljs-variable">.Tag</span><span class="hljs-variable">.Get</span>(&quot;json&quot;))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="5string-字符串">5.string 字符串</span></h2><p>Golang的字符串在初始化之后，不能再对其进行修改，这一点特性与Java相同<br>与C/C++不同，C/C++在字符串初始化之后仍然可以对其进行修改</p><h3><span id="51特性">5.1特性</span></h3><h4><span id="声明">声明</span></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 声明空字符串再赋值</span><br><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span><br>s = <span class="hljs-string">&quot;Hello world&quot;</span><br><br><span class="hljs-comment">// 直接赋值</span><br>s := <span class="hljs-string">&quot;Hello world&quot;</span><br></code></pre></td></tr></table></figure><h4><span id="双引号和反单引号">双引号和反单引号</span></h4><p>字符串赋值时，可以使用双引号和反单引号赋值：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1.</span><span class="hljs-string">&quot;&quot;</span>需要对特殊字符串进行转义<br><span class="hljs-number">2.</span><span class="hljs-string">``</span>不需要对特殊字符串进行转义<br></code></pre></td></tr></table></figure><p>Sample Code:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">双引号：<br>s := <span class="hljs-string">&quot;Hi, \nthis is \&quot;ThomasYuan\&quot;.&quot;</span><br>转义字符：<span class="hljs-string">\n</span> -&gt; 换行 <span class="hljs-string">\&quot;</span> -&gt; <span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">单引号：</span><br><span class="hljs-string">s := `Hi,</span><br><span class="hljs-string">this is &quot;</span>ThomasYuan<span class="hljs-string">&quot;.`</span><br><span class="hljs-string">不需要对换行\n 以及 &quot;</span>进行转义<br></code></pre></td></tr></table></figure><h4><span id="字符串拼接">字符串拼接</span></h4><p>使用 + 进行拼接，字符串拼接时会触发内存分配以及内存拷贝</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.计算拼接后总共需要分配的的内存空间<br>2.把老字符串逐步拷贝到新的字符串，记录老字符串结尾<br>3.在结尾处拼接新的字符串<br></code></pre></td></tr></table></figure><h4><span id="类型转换">类型转换</span></h4><p>Golang支持string和字符切片[]byte之间的转换，涉及到一次内存拷贝，会有一定的开销</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// string to []byte</span><br>s := <span class="hljs-string">&quot;hello&quot;</span><br>b := []<span class="hljs-keyword">byte</span>(s)<br><br><span class="hljs-comment">// []byte to string</span><br>b := []<span class="hljs-keyword">byte</span>&#123;<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;<br>s = <span class="hljs-keyword">string</span>(b)<br></code></pre></td></tr></table></figure><h4><span id="编码">编码</span></h4><p>string使用字符的UTF-8编码，要考虑中文字符占多少个字节</p><h4><span id="值不可修改">值不可修改</span></h4><p>可以对字符串重新赋值，但是不可以通过下标修改字符串中的值</p><h4><span id="标准库函数">标准库函数</span></h4><p>标准库strings包提供了大量的字符串操作函数</p><p><a href="http://doc.golang.ltd/">Golang标准库中文文档：package strings</a></p><h3><span id="52实现原理">5.2实现原理</span></h3><h4><span id="数据结构">数据结构</span></h4><p>标准库builtin中定义了string类型:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">8</span>位byte序列构成的字符串，通常是utf-<span class="hljs-number">8</span>编码的文本<br><span class="hljs-regexp">//</span> 空字符可以为空但不能是nil<br><span class="hljs-regexp">//</span> 其值不可变<br>type string string<br></code></pre></td></tr></table></figure><p>数据结构定义如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> src<span class="hljs-regexp">/runtime/</span>string.go<br>type stringStruct struct &#123;<br>    str     unsafe.Pointer  <span class="hljs-regexp">//</span> 指向字符串首地址的指针<br>    len     int             <span class="hljs-regexp">//</span> 字符串长度<br>&#125;<br></code></pre></td></tr></table></figure><p>与切片相比，缺失了cap int 属性</p><p>可以使用runtime包中的gostringnocopy()函数来生成字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span><br>str = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-comment">// 先构建stringStruct对象，在转成string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gostringnocopy</span><span class="hljs-params">(str *<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">// 构造stringStruct</span><br>    ss := stringStruct&#123;str: unsafe.Pointer(str), <span class="hljs-built_in">len</span>: findnull(str)&#125;<br>    <span class="hljs-comment">// stringStruct 转成 string</span><br>    s := *(*<span class="hljs-keyword">string</span>)(unsafe.Pointer(&amp;ss))<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="字符串拼接">字符串拼接</span></h4><p>runtime包中，concatstrings()函数用于拼接字符串，伪代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// a []string 传入参数为 string切片，一次传去全部的待拼接的字符串</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">concatstrings</span><span class="hljs-params">(a []<span class="hljs-keyword">string</span>)</span></span> &#123;<br>    length := <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 计算出最终的字符串的长度</span><br>    <span class="hljs-keyword">for</span> _, str := <span class="hljs-keyword">range</span> a &#123;<br>        length += <span class="hljs-built_in">len</span>(str)<br>    &#125;<br>    <span class="hljs-comment">// 分配内存，rawstring函数返回一个string以及一个字符切片，两者共享内存空间</span><br>    s, b := rawstring(length)<br>    <br>    <span class="hljs-comment">// string无法修改，修改与其共享内存空间的字符切片，进而达到修改string的目的</span><br>    <span class="hljs-keyword">for</span> _, str := <span class="hljs-keyword">range</span> a &#123;<br>        <span class="hljs-built_in">copy</span>(b, str)<br>        b = b[<span class="hljs-built_in">len</span>(str):]<br>    &#125;<br>    <span class="hljs-comment">// 返回拼接而成的字符串</span><br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>rawstring()的源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 生成一个新的string，返回的string和切片共享相同的空间</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rawstring</span><span class="hljs-params">(size <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(s <span class="hljs-keyword">string</span>, b []<span class="hljs-keyword">byte</span>)</span></span> &#123;<br>    <span class="hljs-comment">// mallocgc()分配出相应的空间</span><br>    p := mallocgc(<span class="hljs-keyword">uintptr</span>(size), <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>)<br>    <span class="hljs-comment">// 转成stringStruct对象</span><br>    stringStructOf(&amp;s).str = p<br>    stringStructOf(&amp;s).<span class="hljs-built_in">len</span> = size<br>    <br>    <span class="hljs-comment">// 字符切片与string共享空间</span><br>    *(*slice)(unsafe.Pointer(&amp;b)) = slice&#123;p, size, size&#125;<br>    <br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="类型转换">类型转换</span></h4><h5><span id="byte-转-string">[]byte 转 string：</span></h5><p>可以使用函数如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">func <span class="hljs-title">GetStringBySlice</span><span class="hljs-params">(s []<span class="hljs-keyword">byte</span>)</span> string </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>转换过程涉及到内存拷贝：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1.</span>根据切片长度申请内存空间，假设内存地址为p，长度为<span class="hljs-built_in">len</span><br><span class="hljs-number">2.</span>构建<span class="hljs-keyword">string</span>（<span class="hljs-keyword">string</span>.str = p, <span class="hljs-keyword">string</span>.<span class="hljs-built_in">len</span> = <span class="hljs-built_in">len</span>）<br><span class="hljs-number">3.</span>拷贝数据（切片中数据拷贝到新申请的内存空间）<br></code></pre></td></tr></table></figure><p>runtime包中使用slicebytetostring()函数将[]byte转为string，其实现逻辑如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slicebytetostring</span><span class="hljs-params">(buf *tmpBuf, b []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(str <span class="hljs-keyword">string</span>)</span></span> &#123;<br>    <span class="hljs-comment">// 新切片的内存空间</span><br>    <span class="hljs-keyword">var</span> p unsafe.Pointer<br>    <span class="hljs-keyword">if</span> buf != <span class="hljs-literal">nil</span> &amp;&amp; <span class="hljs-built_in">len</span>(b) &lt;= <span class="hljs-built_in">len</span>(buf) &#123;<br>        <span class="hljs-comment">// 如果预留buf够用，则用预留buf</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则重新申请内存</span><br>        p = mallocgc(<span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">len</span>(b)), <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>)<br>    &#125;<br>    <span class="hljs-comment">// 构建字符串</span><br>    stringStructOf(&amp;str).str = p<br>    stringStryctOf(&amp;str).<span class="hljs-built_in">len</span> = <span class="hljs-built_in">len</span>(b)<br>    <span class="hljs-comment">// 将切片底层数组中数据拷贝到字符串</span><br>    memmove(p, (*(*slice)(unsafe.Pointer(&amp;b))).array, <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">len</span>(b)))<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h5><span id="string-转-byte">string 转 []byte</span></h5><p>可以使用函数如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">func <span class="hljs-title">getSliceByString</span>(<span class="hljs-params">s <span class="hljs-built_in">string</span></span>) []<span class="hljs-built_in">byte</span></span> &#123;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-built_in">byte</span>(str)<br>&#125;<br></code></pre></td></tr></table></figure><p>转换过程也涉及到内存拷贝：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>申请切片内存空间<br><span class="hljs-number">2.</span>将<span class="hljs-built_in">string</span>拷贝到切片<br></code></pre></td></tr></table></figure><p>runtime包中提供了stringtoslicebyte()函数，将string转为[]byte,实现逻辑如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringtoslicebyte</span><span class="hljs-params">(buf *tmpBuf, s <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(b []<span class="hljs-keyword">byte</span>)</span></span> &#123;<br>    <span class="hljs-comment">// 声明字符切片</span><br>    <span class="hljs-keyword">var</span> b []<span class="hljs-keyword">byte</span><br>    <span class="hljs-keyword">if</span> buf != <span class="hljs-literal">nil</span> &amp;&amp; <span class="hljs-built_in">len</span>(s) &lt;= <span class="hljs-built_in">len</span>(buf) &#123;<br>        *buf = tmpBuf&#123;&#125;<br>        <span class="hljs-comment">// 从预留buf中切出新的切片</span><br>        b = buf[:<span class="hljs-built_in">len</span>(s)]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果预留buf空间不够，重新申请内存</span><br>        b = rawbyteslice(<span class="hljs-built_in">len</span>(s))<br>    &#125;<br>    <span class="hljs-comment">// string拷贝到[]byte</span><br>    <span class="hljs-built_in">copy</span>(b, s)<br>    <br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cap 1: Map 实现原理</title>
    <link href="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2><span id="1-map-映射-参考面向信仰编程对哈希表部分的讲解">1. Map 映射 – 参考《面向信仰编程》对哈希表部分的讲解</span></h2><p>Ref links 具体实现参见：<br><a href="https://www.jianshu.com/p/8ea1bf5058c7">深入理解 Go map：赋值和扩容迁移</a></p><p>map 底层用 Hash 表实现，表示的是键值对之间映射关系。</p><p>早在1953年，Hans Peter Luhn等学者实现了基于拉链法的哈希表，能够通过键直接获取该键对应的值。<br>维基百科 <a href="https://en.wikipedia.org/wiki/Hash_table">Hash_Table</a></p><h3><span id="11-设计原理">1.1 设计原理</span></h3><h4><span id="哈希函数">哈希函数</span></h4><p>理想中的哈希函数：hash() 的输出范围大于输入范围，这样便不会产生 hash 冲突</p><p>实际应用：key 的数量会远大于映射的范围，哈希冲突无法避免</p><p>解决方法：找到合适的方法解决哈希冲突</p><p>golang 基于 拉链法 实现了 Map</p><p>golang底层为各种类型如：int32,int64,string等类型定义了一系列相关的函数，确保了不管什么值进来都能计算出一个32位的hash值</p><p>源码中关于 hash() 种子的定义和使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span>&#123;<br>    ...<br>    ...<br>    hash0   <span class="hljs-keyword">uint32</span> <span class="hljs-comment">// hash seed</span><br>&#125;<br><br><span class="hljs-comment">// 创建 map时，随机初始化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap_small</span><span class="hljs-params">()</span> *<span class="hljs-title">hmap</span></span> &#123;<br>h := <span class="hljs-built_in">new</span>(hmap)<br><span class="hljs-comment">// 随机初始化 hash seed</span><br>h.hash0 = fastrand()<br><span class="hljs-keyword">return</span> h<br>&#125;<br><br><span class="hljs-comment">// 调用 hash() 时，传入 hash0</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccessK</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>    ...<br>    <span class="hljs-comment">// 计算 hash</span><br>    hash := t.hasher(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>    ...<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="冲突解决">冲突解决</span></h4><h5><span id="开放寻址法-数组实现但数组长度有限">开放寻址法 – 数组实现，但数组长度有限</span></h5><p>是一种解决哈希碰撞的方法，核心思想是：依次探测和比较数组中的元素以判断目标键值对是否存在于哈希表中。常用的探测算法有：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 线性探查<br><span class="hljs-bullet">2.</span> 二次探查<br><span class="hljs-bullet">3.</span> 双重散列<br></code></pre></td></tr></table></figure><p>开放寻址法示意图：  </p><img src="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/open-addressing-and-get.png" class title="开放寻址过程"><h6><span id="装载因子-loadfactor">装载因子 – loadFactor</span></h6><p>开放寻址法的装载因子计算公式：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">装载因子 = KeyNumber / <span class="hljs-built_in">Length</span><br></code></pre></td></tr></table></figure><p>装载因子对开放寻址法的性能影响很大。<br>随着 loadFactor 的增大，线性探测的平均用时和读写次数都会变长。<br>loadFactor = 100% 哈希表时效，读写复杂度为 O(n)</p><h5><span id="拉链法-实现-map-最常用的方法">拉链法 – 实现 Map 最常用的方法</span></h5><p>核心思想：数组 + 链表  </p><p>拉链法示意图：  </p><img src="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/separate-chaing-and-set.png" class title="拉链法 hash 过程"><p>拉链法写入数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. <span class="hljs-built_in">hash</span>() 将 key 计算为 <span class="hljs-built_in">hash</span> 值（不同类型的值，需要使用到不同的 <span class="hljs-built_in">hash</span>()）：hashValue = <span class="hljs-built_in">hash</span>(Key, Value)<br>2. 通过一定策略选中当前 Key-value 应该存放在哪一个桶中（<span class="hljs-built_in">hash</span> 值对数组长度去取余）：loc = <span class="hljs-built_in">hash</span> % length<br>3. 遍历 loc 所在的桶，两种情况：<br>    Case 1: 找到相同的键值对 - 更新 <br>    Case 2: 没找到相同的键值对 - 末尾追加 or 找空位插入<br></code></pre></td></tr></table></figure><p>拉链法读取数据：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 同上<br><span class="hljs-bullet">2.</span> 同上<br><span class="hljs-bullet">3.</span> 遍历 loc 所在的桶，两种情况：<br><span class="hljs-code">    Case1: 找到对应的 Key，返回对应的 Value</span><br><span class="hljs-code">    Case2: 遍历到末尾都没找到，返回 空值</span><br></code></pre></td></tr></table></figure><p>计算 Hash、定位桶、遍历链表 是哈希表读取操作的主要开销</p><h6><span id="装载因子-loadfactor">装载因子 – loadFactor</span></h6><p>拉链法的装载因子计算公式：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">装载因子 </span>=<span class="hljs-string"> 元素数量 / 桶数量</span><br></code></pre></td></tr></table></figure><p>拉链法的装载因子越大，哈希表的读写性能就越差。</p><h3><span id="12-数据结构">1.2 数据结构</span></h3><p>哈希表的数据结构如下图所示：</p><img src="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/hmap-and-buckets.png" class title="hmap 和 buckets 之间的联系"><p>Golang Runtime 同时使用了多个数据结构表示哈希表，其中 <code>runtime.hmap</code> 是最核心的结构体：</p><p><a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/map.go#L115">go/map.go</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> src<span class="hljs-regexp">/runtime/m</span>ap.go <br>type hmap struct &#123;<br>    count       int             <span class="hljs-regexp">//</span> 当前哈希表中的元素数量<br>    flags       uint8           <span class="hljs-regexp">//</span> <br>    B           uint8           <span class="hljs-regexp">//</span> 当前哈希表持有的 Bucket 对数，length(buckets) == <span class="hljs-number">2</span>^B<br>    noverflow   uint16          <span class="hljs-regexp">//</span> num of overflow 溢出桶的个数<br>    hash0       uint32          <span class="hljs-regexp">//</span> 哈希种子，随机生成，在哈希表创建时确定，用于生成 hash 值<br>    <br>    buckets     unsafe.Pointer  <span class="hljs-regexp">//</span> map 全部的桶<br>    oldbuckets  unsafe.Pointer  <span class="hljs-regexp">//</span> 指向老旧 bucket 的指针，用于扩容<br>    nevacuate   uintptr         <span class="hljs-regexp">//</span> <br>    <br>    extra       *mapextra       <span class="hljs-regexp">//</span> 溢出桶<br>&#125;<br><br><span class="hljs-regexp">//</span> 溢出桶<br>type mapextra struct &#123;<br>    overflow        *[]*bmap<br>    oldoverflow     *[]*bmap<br>    nextOverflow    *bmap<br>&#125;<br><br><span class="hljs-regexp">//</span> 桶<br>type bmap struct &#123;<br>    <span class="hljs-regexp">//</span> 源码中的定义，存储 key 哈希值的高 <span class="hljs-number">8</span> 位<br>    tophash     [bucketCnt]uint8<br>    <br>    <span class="hljs-regexp">//</span> 运行期间的结构 -- 通过 src<span class="hljs-regexp">/cmd/</span>compile<span class="hljs-regexp">/internal/g</span>c/reflect.go Line <span class="hljs-number">83</span> 可以重建其结构<br>    topbits     [<span class="hljs-number">8</span>]uint8        <span class="hljs-regexp">//</span> 存储 Hash 值高<span class="hljs-number">8</span>位 每个桶存储 <span class="hljs-number">8</span> 个键值对<br>    keys        [<span class="hljs-number">8</span>]keytype      <span class="hljs-regexp">//</span> 存储 Key 值<br>    values      [<span class="hljs-number">8</span>]valuetype    <span class="hljs-regexp">//</span> Key 值对应的 Value<br>    pad         uintptr<br>    overflow    uintptr         <span class="hljs-regexp">//</span> 指向溢出 bucket 的地址(链地址法解决key冲突)<br>&#125;<br></code></pre></td></tr></table></figure><p>如上图所示，哈希表 <code>runtime.hmap</code> 中使用的桶是 <code>runtime.bmap</code>。每一个 <code>runtime.bmap</code> 都能存储 8 个键值对，当哈希表中存储的数据过多，单个桶已经装满时，就会使用 <code>extra.nextOverflow</code> 来存储溢出的数据。  </p><p>图中，黄色的桶 指的是正常桶，绿色的桶 指的是溢出桶，两种不同的桶在内存中连续存储，溢出桶是 Golang 还在使用 C语言实现时使用到的设计，由于其能减少扩容的频率才一直使用至今。  </p><h4><span id="新旧版本-map-实现对比">新旧版本 Map 实现对比：</span></h4><h5><span id="老版本实现go专家编程">老版本实现：《Go专家编程》</span></h5><p>在靠前的版本中（具体版本没从源码仓库中找到）， <code>runtime.bmap</code> 在源码中的定义如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> golang v x.xx.xx<br>type bmap struct &#123;<br>    tophash     [<span class="hljs-number">8</span>]uint <span class="hljs-regexp">//</span> tophash<br>    data        []byte  <span class="hljs-regexp">//</span> key value 数据：key<span class="hljs-regexp">/key/</span>...<span class="hljs-regexp">/key/</span>value<span class="hljs-regexp">/value/</span>.../value<br>    overflow    *bmap   <span class="hljs-regexp">//</span> 溢出桶存储<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，包含了 tophash 用于存储键的哈希高 8 位；data 存储每个 key-value 的值，且为了便于字节对齐，先按照顺序存储 key，再按照顺序存储 value；overflow 存储当前桶的所有溢出桶，若当前桶已满，会声明一个溢出桶，overflow 指向溢出桶，将新的 key-value 放入溢出桶，依次类推。</p><h5><span id="老版本中-bmap-存储细节">老版本中 bmap 存储细节：</span></h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">topHash：<br>Hash值拆分为低位和高位<br>Hash低位相同的键，存入当前桶的时候，会把Hash值高位存入到数组中，便于后续匹配<br><br>data：<br>存放key-value数据（[]<span class="hljs-keyword">byte</span>），且顺序按照（字节对齐）：先key后value<br>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>key<span class="hljs-regexp">/key/</span>value<span class="hljs-regexp">/value/</span>value<span class="hljs-regexp">/value/</span>value<span class="hljs-regexp">/value/</span>value/value<br><br>overflow：链地址法<br>指向下一个bucket，将冲突的键连起来<br></code></pre></td></tr></table></figure><h5><span id="新版本go语言设计与实现-书中的源码版本为-v113x">新版本：《Go语言设计与实现》 书中的源码版本为 v1.13.x</span></h5><p>桶的结构体 <code>runtime.bmap</code> 在 Golang 源代码中的定义为：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">// golang v1.15.4</span><br><span class="hljs-built_in">type</span> bmap <span class="hljs-keyword">struct</span> &#123;<br>    tophash [bucketCnt]uint8<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，只包含了一个简单的 <code>tophash</code> 字段，<code>tophash</code> 存储了键的哈希高 8 位，通过比较不同键的哈希值高 8 位可以减少访问键值对次数以提高性能。</p><p>++在运行期间， runtime.bmap 结构体不止包含 tophash 字段，考虑到哈希表中可能存储不同类型的键值对（key-value 的类型多种多样），而且 1.x 版本的 Golang 并未添加对泛型的支持，所以键值对的类型以及其所占内存大小只能在编译时进行推导。++</p><p><code>runtime.bmap</code> 中的其他字段在运行时也都是通过计算内存地址的方式访问的，所以它的定义中并未包含其他的字段，但是可以通过编译期间的函数 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/reflect.go#L83">cmd/compile/internal/gc.bmap</a> 重建 runtime.bmap 的结构：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 运行期间的结构 -- 通过 src<span class="hljs-regexp">/cmd/</span>compile<span class="hljs-regexp">/internal/g</span>c/reflect.go Line <span class="hljs-number">83</span> 可以重建其结构<br>type bmap struct &#123;<br>    topbits     [<span class="hljs-number">8</span>]uint8        <span class="hljs-regexp">//</span> 存储 Hash 值高<span class="hljs-number">8</span>位 每个桶存储 <span class="hljs-number">8</span> 个键值对<br>    keys        [<span class="hljs-number">8</span>]keytype      <span class="hljs-regexp">//</span> 存储 Key 值<br>    values      [<span class="hljs-number">8</span>]valuetype    <span class="hljs-regexp">//</span> Key 值对应的 Value<br>    pad         uintptr<br>    overflow    uintptr         <span class="hljs-regexp">//</span> 指向溢出 bucket 的地址(链地址法解决key冲突)<br>&#125;<br></code></pre></td></tr></table></figure><p>++如何在 编译期间 进行 类型推断，确定 key-value 的 类型？++<br>重建 <code>runtime.bmap</code> 的代码如下：  </p><p><strong>源码中涉及到了 Type 的使用，types.Type 的定义位于 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/types/type.go#L119">src/cmd/compile/internal/types/type.go</a></strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs elm">// bmap makes the map bucket <span class="hljs-keyword">type</span> given the <span class="hljs-keyword">type</span> of the map.<br><span class="hljs-title">func</span> bmap(t *types.<span class="hljs-type">Type</span>) *types.<span class="hljs-type">Type</span> &#123;<br>    // <span class="hljs-type">Step1</span>: 检查当前 <span class="hljs-type">Map</span> 的 <span class="hljs-type">Bucket</span> 是否为空<br>if t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span> != nil &#123;<br>return t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span><br>&#125;<br><br>    // <span class="hljs-type">Step2</span>: 初始化 bucket，类型推断 获得 key<span class="hljs-keyword">type</span>，elemtype，同时确保 keytype 以及 elemtype 大小合理<br>    // 这里传入的参数是：<span class="hljs-type">TSTRUCT</span> -&gt; 在 <span class="hljs-type">Type</span>.go 中，<span class="hljs-type">TSTRUCT</span> : *<span class="hljs-type">Struct</span><br>bucket := types.<span class="hljs-type">New</span>(<span class="hljs-type">TSTRUCT</span>)<br>// 通过 <span class="hljs-type">Type</span>.<span class="hljs-type">Key</span>() 获取 map 中 key 的类型<br>key<span class="hljs-keyword">type</span> := t.<span class="hljs-type">Key</span>()<br>// 通过 <span class="hljs-type">Type</span>.<span class="hljs-type">Elem</span>() 获取 map 中 value 的类型<br>elem<span class="hljs-keyword">type</span> := t.<span class="hljs-type">Elem</span>()<br>dowidth(key<span class="hljs-keyword">type</span>)<br>dowidth(elem<span class="hljs-keyword">type</span>)<br>// key<span class="hljs-keyword">type</span>, elemtype 大小检测<br><span class="hljs-keyword">if</span> key<span class="hljs-keyword">type</span>.<span class="hljs-type">Width</span> &gt; <span class="hljs-type">MAXKEYSIZE</span> &#123;<br>keytype = types.<span class="hljs-type">NewPtr(keytype)</span><br>&#125;<br><span class="hljs-keyword">if</span> elem<span class="hljs-keyword">type</span>.<span class="hljs-type">Width</span> &gt; <span class="hljs-type">MAXELEMSIZE</span> &#123;<br>elemtype = types.<span class="hljs-type">NewPtr(elemtype)</span><br>&#125;<br>    <br>    // <span class="hljs-type">Step3</span>: 初始化 bmap 中包含的字段，对 bmap 进行重组<br>    // 使用的切片，切片大小 = <span class="hljs-number">5</span><br>field := make([]*types.<span class="hljs-type">Field</span>, 0, 5)<br><br>// <span class="hljs-type">The</span> first field is: uint8 topbits[<span class="hljs-type">BUCKETSIZE</span>].<br>// 第一个字段：topbits [<span class="hljs-type">BUCKETSIZE</span>] uint8 <span class="hljs-comment">-- 对应到 tophash</span><br>arr := types.<span class="hljs-type">NewArray</span>(types.<span class="hljs-type">Types</span>[<span class="hljs-type">TUINT8</span>], <span class="hljs-type">BUCKETSIZE</span>)<br>field = append(field, makefield(<span class="hljs-string">&quot;topbits&quot;</span>, arr))<br><br>    // 第二个字段：keys [<span class="hljs-type">BUCKETSIZE</span>] key<span class="hljs-keyword">type</span>，存储的是 key 的集合<br>arr = types.<span class="hljs-type">NewArray</span>(keytype, <span class="hljs-type">BUCKETSIZE</span>)<br>arr.<span class="hljs-type">SetNoalg</span>(true)<br>keys := makefield(<span class="hljs-string">&quot;keys&quot;</span>, arr)<br>field = append(field, keys)<br>    <br>    // 第三个字段：elems [<span class="hljs-type">BUCKETSIZE</span>] elem<span class="hljs-keyword">type</span>，存储的是 value 的集合<br>arr = types.<span class="hljs-type">NewArray</span>(elemtype, <span class="hljs-type">BUCKETSIZE</span>)<br>arr.<span class="hljs-type">SetNoalg</span>(true)<br>elems := makefield(<span class="hljs-string">&quot;elems&quot;</span>, arr)<br>field = append(field, elems)<br>    <br>    ...<br>    <br>// 第四个字段: overflow uintptr，存储指向溢出桶的指针<br>otyp := types.<span class="hljs-type">NewPtr</span>(bucket)<br><span class="hljs-keyword">if</span> !elem<span class="hljs-keyword">type</span>.<span class="hljs-type">HasPointers</span>() &amp;&amp; !keytype.<span class="hljs-type">HasPointers</span>() &#123;<br>otyp = types.<span class="hljs-type">Types</span>[<span class="hljs-type">TUINTPTR</span>]<br>&#125;<br>overflow := makefield(<span class="hljs-string">&quot;overflow&quot;</span>, otyp)<br>field = append(field, overflow)<br><br>// link up fields<br>// 字段重组: bucket 本质上是一个结构体，这里使用了 struct 的 setFields()，用于设定 bucket 中的字段<br>bucket.<span class="hljs-type">SetNoalg</span>(true)<br>bucket.<span class="hljs-type">SetFields</span>(field[:])<br>dowidth(bucket)<br><br>// <span class="hljs-type">Check</span> invariants that map code depends on.<br><span class="hljs-keyword">if</span> !<span class="hljs-type">IsComparable</span>(t.<span class="hljs-type">Key</span>()) &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;unsupported map key type for %v&quot;</span>, t)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-type">BUCKETSIZE</span> &lt; <span class="hljs-number">8</span> &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;bucket size too small for proper alignment&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> key<span class="hljs-keyword">type</span>.<span class="hljs-type">Align</span> &gt; <span class="hljs-type">BUCKETSIZE</span> &#123;<br><span class="hljs-type">Fatalf</span>(&quot;key align too big for %v&quot;, t)<br>&#125;<br><span class="hljs-keyword">if</span> elem<span class="hljs-keyword">type</span>.<span class="hljs-type">Align</span> &gt; <span class="hljs-type">BUCKETSIZE</span> &#123;<br><span class="hljs-type">Fatalf</span>(&quot;elem align too big for %v&quot;, t)<br>&#125;<br><br>    ...<br>    ...<br> <br>// <span class="hljs-type">Double</span>-check that overflow field is final memory <span class="hljs-keyword">in</span> struct,<br>// with no padding at end.<br><span class="hljs-keyword">if</span> overflow.<span class="hljs-type">Offset</span> != bucket.<span class="hljs-type">Width</span>-int64(<span class="hljs-type">Widthptr</span>) &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;bad offset of overflow in bmap for %v&quot;</span>, t)<br>&#125;<br>    // <span class="hljs-type">Step4</span>: 检查 构建 bmap 使用的 不变量，如：<span class="hljs-type">BUCKETSIZE</span>，key<span class="hljs-keyword">type</span>，elemtype，keyType.align等<br>    // 对 overflow 字段做二次检查，确保 overflow 是最后添加到结构体中的，且不存在字节冗余（考虑性能）<br>    // 最后对 bucket 进行类型重组，返回<br>t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span> = bucket<br><br>    // 类型重组<br>bucket.<span class="hljs-type">StructType</span>().<span class="hljs-type">Map</span> = t<br>return bucket<br>&#125;<br></code></pre></td></tr></table></figure><p>由上述代码可以看出，++编译器在 runtime 中对 bmap 的重建主要分为四步++：</p><ol><li>检查当前 <code>Map</code> 的 <code>Bucket</code> 是否为空，如果不为空，直接返回（++何种情况下，Bucket 不为空？++？）；</li><li>初始化 <code>bucket</code>，类型推断 获得 <code>keytype</code>，<code>elemtype</code>，同时确保 <code>keytype</code> 以及 <code>elemtype</code> 大小合理；</li><li>初始化 <code>bmap</code> 中包含的字段，对 <code>bmap</code> 进行重组；</li><li>检查构建 <code>bmap</code> 使用的不变量：<code>BUCKETSIZE</code>，<code>keytype</code>，<code>elemtype</code>，<code>keyType.align</code>等，同时二次检查 <code>overflow</code> 字段，确保 <code>overflow</code> 最后添加到结构体中，且不存在字节冗余；最后对 <code>bucket</code> 进行类型重组，返回</li></ol><h5><span id="key-value-类型的确定">key-value 类型的确定</span></h5><p>老版本的实现中，使用字节数组 <code>[]byte</code> 对 <code>key-value</code> 进行存储，进而解决了 <code>key-value</code> 类型的问题：在确定了 <code>key-value</code> 实际类型后，根据 <code>Key-value</code> 的字节大小以及索引 可以将 <code>byte</code> 直接转换为 <code>key-value</code> 对应的类型（++底层实现没去看，大致猜的，另一个小疑问就是，为什么不去用 interface{}，作为泛型的替代++）</p><p>新版本的实现中，<code>bmap</code> 中的字段是在运行时中，通过计算内存地址的方式访问的，这一点与老版本的实现思路不同。</p><h4><span id="负载因子">负载因子</span></h4><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">计算公式：负载因子</span>=<span class="hljs-string">键数量/bucket数量</span><br></code></pre></td></tr></table></figure><p>Golang中规定，当负载因子达到6.5时，触发 <code>rehash</code></p><p>具体过程：申请更多的 <code>bucket</code>，对所有的键值对重新组织，使其均匀的分布在 <code>bucket</code></p><h4><span id="tophash-详解">tophash 详解</span></h4><p>Ref links: <a href="https://blog.csdn.net/fengshenyun/article/details/97296412">Golang之map tophash详解</a></p><p><code>tophash</code> 的用处有以下两个：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>. 存放 key 的 hash 高 <span class="hljs-number">8</span> 位，便于后续的桶内匹配<br>    低 <span class="hljs-number">8</span> 位对 <span class="hljs-keyword">B </span>取模，判断位于哪一个桶：<span class="hljs-keyword">Bucket </span>= LowHash Mod <span class="hljs-keyword">B</span><br><span class="hljs-keyword"></span>    高 <span class="hljs-number">8</span> 位用于在桶内搜寻<br><span class="hljs-number">2</span>. 标记迁移状态<br></code></pre></td></tr></table></figure><p>当 <code>tophash</code> 对应的 <code>key-value</code> 被使用时，存放 hash 的高 8 位；当 <code>tophash</code> 对应的 <code>key-value</code> 未被使用时，存的是 对应位置的状态。</p><p><code>src/runtime/map.go</code> 对 <code>tophash</code> 状态值的定义如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">emptyRest      = <span class="hljs-number">0</span>  <span class="hljs-regexp">//</span> 对应 key-value 可用 且 该位置后面的 key-value 都可用<br>emptyOne       = <span class="hljs-number">1</span>  <span class="hljs-regexp">//</span> 对应 key-value 可用<br>evacuatedX     = <span class="hljs-number">2</span>  <span class="hljs-regexp">//</span> 扩容时，对应 key-value 迁移到新桶的 X 部（<span class="hljs-number">0</span>-<span class="hljs-number">3</span>）<br>evacuatedY     = <span class="hljs-number">3</span>  <span class="hljs-regexp">//</span> 扩容时，对应 key-value 迁移到新桶的 Y 部（<span class="hljs-number">4</span>-<span class="hljs-number">7</span>）<br>evacuatedEmpty = <span class="hljs-number">4</span>  <span class="hljs-regexp">//</span> 当前 bucket 被迁移完<br><span class="hljs-regexp">//</span> 正常填充 key-value 时，topHash 的最小值<br><span class="hljs-regexp">//</span> tophash &gt;= <span class="hljs-number">5</span> -&gt; 存放 hash 值<br><span class="hljs-regexp">//</span> tophash &lt; <span class="hljs-number">5</span>  -&gt; 存放 状态值<br>minTopHash     = <span class="hljs-number">5</span>  <br></code></pre></td></tr></table></figure><h5><span id="emptyrest">emptyRest</span></h5><ol><li>对应的 <code>key-value</code> 位置可用</li><li>该位置后的 <code>key-value</code> 都可用</li></ol><p>值的几种情况：</p><ol><li><code>Bucket</code> 初始化时，桶内的 <code>tophash</code> 都被置为 <code>emptyRest</code></li><li>删除对应位置的 <code>key-value</code> 时，会判断是否需要置为 <code>emptyRest</code></li></ol><p>在源码中的使用：</p><ol><li>判断 <code>Bucket</code> 是否为空：<code>tophash[0] == emptyRest</code></li><li>桶内查找时，能够快速判断后面的位置是否还需要遍历：<code>tophash[2] = emptyRest -&gt; 2</code> 后面都为空，可以继续查找下一个 <code>Bucket</code></li></ol><h5><span id="emptyone">emptyOne</span></h5><p>对应位置 <code>key-value</code> 可用，但是无法判断后面值的情况</p><p>值的几种情况：</p><ol><li>删除对应位置的 <code>key-value</code> 时，会先将其对应的 <code>tophash</code> 置为 <code>emptyOne</code></li><li>后续判断是否需要置为 <code>emptyRest</code></li></ol><h5><span id="evacuatedx-ampamp-evacuatedy">evacuatedX &amp;&amp; evacuatedY</span></h5><p>与扩容操作有关，表示了对应位置的 <code>key-value</code> 被迁移到新桶中的部位 – X or Y</p><p>值的几种情况：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-number">1</span>. 等位迁移 -- 旧桶的元素必然迁移到X部（<span class="hljs-number">0</span>-<span class="hljs-number">3</span>），因为没有扩容，逐个复制到新桶就行：<br>新桶 <span class="hljs-attr">tophash</span> = 旧桶 tophash<br>新桶 <span class="hljs-attr">key-value</span> = 旧桶 key-value<br>旧桶 <span class="hljs-attr">tophash</span> = evacuatedX<br>旧桶 <span class="hljs-attr">key-value</span> = <span class="hljs-number">0</span><br><br><span class="hljs-number">2</span>. 扩容迁移 -- 可能迁移到 X 部 <span class="hljs-literal">or</span> Y 部<br>新桶 <span class="hljs-attr">tophash</span> = 旧桶 tophash<br>新桶 <span class="hljs-attr">key-value</span> = 旧桶 key-value<br>// 迁移到 X 部<br>旧桶 <span class="hljs-attr">tophash</span> = evacuatedX<br>// 迁移到 Y 部<br>旧桶 <span class="hljs-attr">tophash</span> = evacuatedY<br><br>旧桶 <span class="hljs-attr">key-value</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5><span id="evacuatedempty">evacuatedEmpty</span></h5><p>与扩容操作有关，当前 <code>Bucket</code> 被迁移完时，桶内 <code>tophash</code> 置为 <code>evacuatedEmpty</code></p><h3><span id="13-初始化">1.3 初始化</span></h3><p>++与 数组 和 切片 相同++，<code>Map</code> 的初始化也可以通过 ++字面量（:=） 和 运行时（make）++ 两种方式。</p><h4><span id="字面量">字面量</span></h4><p>使用 <code>key:value</code> 的方式进行 <code>Map</code> 的初始化，需要声明 <code>key:value</code> 对的类型 以及 设定 <code>Map</code> 的初始值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Sample Code</span><br>hashMap := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>] <span class="hljs-keyword">int</span> &#123;<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;3&quot;</span> : <span class="hljs-number">4</span>,<br>    <span class="hljs-string">&quot;5&quot;</span> : <span class="hljs-number">6</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用字面量初始化的方式，最终是在 <code>gc</code> 中进行初始化，涉及到的函数：<br><a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/sinit.go#L753">src/cmd/compile/internal/gc/sinit.go Line753 - func maplit(){}</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maplit</span><span class="hljs-params">(n *Node, m *Node, init *Nodes)</span></span> &#123;<br><span class="hljs-comment">// make the map var</span><br>a := nod(OMAKE, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<br>a.Esc = n.Esc<br>a.List.Set2(typenod(n.Type), nodintconst(<span class="hljs-keyword">int64</span>(n.List.Len())))<br>litas(m, a, init)<br><br>entries := n.List.Slice()<br><br><span class="hljs-comment">// The order pass already removed any dynamic (runtime-computed) entries.</span><br><span class="hljs-comment">// All remaining entries are static. Double-check that.</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> entries &#123;<br><span class="hljs-keyword">if</span> !isStaticCompositeLiteral(r.Left) || !isStaticCompositeLiteral(r.Right) &#123;<br>Fatalf(<span class="hljs-string">&quot;maplit: entry is not a literal: %v&quot;</span>, r)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(entries) &gt; <span class="hljs-number">25</span> &#123;<br><span class="hljs-comment">// For a large number of entries, put them in an array and loop.</span><br><span class="hljs-comment">// build types [count]Tindex and [count]Tvalue</span><br>        ...<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// For a small number of entries, just add them directly.</span><br><br><span class="hljs-comment">// Build list of var[c] = expr.</span><br><span class="hljs-comment">// Use temporaries so that mapassign1 can have addressable key, elem.</span><br><span class="hljs-comment">// TODO(josharian): avoid map key temporaries for mapfast_* assignments with literal keys.</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可以看出，<code>Map</code> 字面量初始化逻辑为：</p><ol><li>当哈希表中的元素数量 大于 25 时，编译器会创建两个数组分别存储 <code>key</code> 和 <code>value</code>，这些 <code>key-value</code> 会通过一个 <code>for loop</code> 循环加入 <code>hash</code><br> 假定初始化 <code>map</code> 时，放入了 26 个 <code>key-value pair</code> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">hashMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">26</span>)<br>vstatk := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, ..., <span class="hljs-string">&quot;26&quot;</span>&#125;<br>vstatv := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ..., <span class="hljs-number">26</span>&#125;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(vstatk); i++ &#123;<br>    hashMap[vstatk[i]] = vstatv[i]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>当哈希表中的元素数量 小于 Or 等于 25 时，将所有的键值对一次加入到哈希表中<br> 以上述 <code>Sample Code</code> 为例，编译器会将其转换成以下的代码： <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">hashMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">3</span>)<br>hashMap[<span class="hljs-string">&quot;1&quot;</span>] = <span class="hljs-number">2</span><br>hashMap[<span class="hljs-string">&quot;3&quot;</span>] = <span class="hljs-number">4</span><br>hashMap[<span class="hljs-string">&quot;5&quot;</span>] = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>无论是使用 字面量 or <code>make()</code> 对 <code>map</code> 进行初始化，最后都会使用 <code>make</code> 关键字创建新的 <code>hashMap</code> 并通过最原始的 [] 语法向 <code>hashMap</code> 追加元素</li></ol><h4><span id="运行时-make-关键字-gt-makemap">运行时 – make 关键字 -&gt; makemap(){}</span></h4><p>编译器对小容量 <code>hashMap</code> 做了一定的优化：当创建的 <code>hashMap</code> 被分配到栈上并且其容量小于 <code>BUCKETSIZE = 8</code> 时，Golang 在编译阶段会快速初始化 <code>hashMap</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> h *hmap<br><span class="hljs-selector-tag">var</span> hv hmap<br><span class="hljs-selector-tag">var</span> bv hmap<br>h := &amp;hv<br><span class="hljs-selector-tag">b</span> := &amp;bv<br>h<span class="hljs-selector-class">.buckets</span> = <span class="hljs-selector-tag">b</span>           <span class="hljs-comment">// 挂一个桶 BUCKETSIZE = 8</span><br>h<span class="hljs-selector-class">.hash0</span> = fastrand0()   <span class="hljs-comment">// 初始化 hash 种子</span><br></code></pre></td></tr></table></figure><p>除了特定的优化外，使用 <code>make</code> 关键字创建 <code>map</code>，<code>Golang</code> 编译器都会在 类型检查 期间，将其转化成 <code>makemap()</code><br><strong>使用字面量初始化 map 只是语言提供的辅助工具，最后都会转化为 makemap()</strong><br><a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L303">src/runtime/map.go#L303 makemap()</a></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs smali">// src/runtime/map.go<br>func makemap(t *maptype, hint int, h *hmap) *hmap &#123;<br>    // Step1:<span class="hljs-built_in"> check </span>allocate memory size<br>mem, overflow<span class="hljs-keyword"> :</span>= math.MulUintptr(uintptr(hint), t.bucket.size)<br><span class="hljs-built_in">if </span>overflow || mem &gt; maxAlloc &#123;<br>hint = 0<br>&#125;<br>    <br><span class="hljs-built_in">if </span>h == nil &#123;<br>h = new(hmap)<br>&#125;<br>// Step2: get random hash seed<br>h.hash0 = fastrand()<br><br>    // Step3: calculate smallest B by hint<br>B<span class="hljs-keyword"> :</span>= uint8(0)<br>for overLoadFactor(hint, B) &#123;<br>B++<br>&#125;<br>h.B = B<br>    // Step4: Use function makeBucketArray() create Bucket<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">if </span>h.B != 0 &#123;<br>var nextOverflow *bmap<br>h.buckets, nextOverflow = makeBucketArray(t, h.B, nil)<br><span class="hljs-built_in">if </span>nextOverflow != nil &#123;<br>h.extra = new(mapextra)<br>h.extra.nextOverflow = nextOverflow<br>&#125;<br>&#125;<br><span class="hljs-built_in">return </span>h<br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可知，<code>makemap()</code> 函数的执行步骤如下：</p><ol><li>计算哈希占用的内存是否溢出或者超出能分配的最大值；</li><li>调用 <code>runtime.fastrand()</code> 获取一个随机的哈希种子；</li><li>根据传入的 <code>hint</code> 计算出最小需要的桶的数量 <code>(log2(hint) + 1)</code>；</li><li>使用 <code>runtime.makeBucketArray()</code> 创建用于保存桶的数组；</li></ol><p>其中，<code>runtime.makeBucketArray()</code> 函数会根据传入的 B 计算出需要创建的桶的数量，并在内存中分配一片连续的空间用于存储数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.makeBucketArray() 函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeBucketArray</span><span class="hljs-params">(t *maptype, b <span class="hljs-keyword">uint8</span>, dirtyalloc unsafe.Pointer)</span> <span class="hljs-params">(buckets unsafe.Pointer, nextOverflow *bmap)</span></span> &#123;<br>base := bucketShift(b)<br>nbuckets := base<br><span class="hljs-comment">// b &gt;= 4 -&gt; 额外创建 2^(b-4)个溢出桶 nbuckets += bucketShift(b - 4)</span><br><span class="hljs-comment">// b &lt; 4 -&gt; 不创建溢出桶</span><br><span class="hljs-keyword">if</span> b &gt;= <span class="hljs-number">4</span> &#123;<br>nbuckets += bucketShift(b - <span class="hljs-number">4</span>)<br>sz := t.bucket.size * nbuckets<br>up := roundupsize(sz)<br><span class="hljs-keyword">if</span> up != sz &#123;<br>nbuckets = up / t.bucket.size<br>&#125;<br>&#125;<br><br>buckets = newarray(t.bucket, <span class="hljs-keyword">int</span>(nbuckets))<br><span class="hljs-comment">// 创建溢出桶</span><br><span class="hljs-keyword">if</span> base != nbuckets &#123;<br>nextOverflow = (*bmap)(add(buckets, base*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br>last := (*bmap)(add(buckets, (nbuckets<span class="hljs-number">-1</span>)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br>last.setoverflow(t, (*bmap)(buckets))<br>&#125;<br><span class="hljs-keyword">return</span> buckets, nextOverflow<br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可知，<code>makeBucketArray()</code> 函数的执行步骤如下：</p><ol><li>当桶的数量小于 <code>2^4=16（B&lt;4）</code>时，由于数据较少、使用溢出桶的可能性较低，会省略创建溢出桶的过程以减少额外开销</li><li>当桶的数量多于 <code>2^4=16（B&gt;=4）</code>时，会额外创建 <code>2^(B-4)</code> 个溢出桶，并存放在 <code>nextOverflow</code> 中</li></ol><p>在正常情况下，正常桶和溢出桶在内存中的存储空间是连续的，被 <code>runtime.hmap</code> 中的不同字段引用，当溢出桶的数量较多时会通过 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/malloc.go#L1176">src/runtime/malloc.go Line1176  newobject()</a> 创建新的溢出桶。</p><h3><span id="14-读写操作">1.4 读写操作</span></h3><p><code>hashMap</code> 常见操作包括：访问、写入、扩容。</p><p><code>hashMap</code> 的访问有两种方式：通过 <code>key</code> 以及 遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 使用 key 访问</span><br>v := hash[key]<br>v, ok := hash[key]<br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> hash &#123;<br>    <span class="hljs-comment">// k, v</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>hashMap</code> 的写入操作一般指的是：增加、删除、修改。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 增加 key-value</span><br>hash<span class="hljs-selector-attr">[key]</span> = value<br><br><span class="hljs-comment">// 更新 key-value</span><br>hash<span class="hljs-selector-attr">[key]</span> = newValue<br><br><span class="hljs-comment">// 删除 key-value </span><br><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(hash, key)</span></span><br></code></pre></td></tr></table></figure><p><code>hashMap</code> 的扩容过程，对使用者是不可见的，只有在达到扩容条件时，才会触发 增量扩容 以及 等量扩容。</p><h4><span id="访问正常情况下的访问-扩容时的访问操作在下面讲-runtimemapaccess1-runtimemapaccess2">访问（正常情况下的访问 – 扩容时的访问操作在下面讲） – runtime.mapaccess1() / runtime.mapaccess2()</span></h4><p>在编译的 类型检查 期间，<code>hash[key]</code> 以及类似的操作都会被转换成哈希的 <code>OINDEXMAP</code> 操作，中间代码生成 阶段会在 <a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.walkexpr">cmd/compile/internal/gc.walkexpr</a> 函数中将这些 <code>OINDEXMAP</code> 操作转换成如下的代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">v     := hash[key] <span class="hljs-regexp">//</span> =&gt; v     := *mapaccess1(maptype, hash, &amp;key)<br>v, ok := hash[key] <span class="hljs-regexp">//</span> =&gt; v, ok := mapaccess2(maptype, hash, &amp;key)<br></code></pre></td></tr></table></figure><p>两种访问方式导致了使用的运行时方法的不同：</p><ol><li>只接收 <code>v</code> 时，运行时会调用 <code>runtime.mapaccess1()</code>，该函数仅返回一个指向目标值的指针；</li><li>接收 <code>v, ok</code> 时，运行时会调用 <code>runtime.mapaccess2()</code>，除了返回目标值之外，还会返回一个用于表示当前 <code>key</code> 对应的 <code>value</code> 是否存在的 <code>bool</code> 值。</li></ol><p>下面分别对 <code>runtime.mapaccess1()</code> 以及 <code>runtime.mapaccess2()</code> 的源码进行分析：</p><h5><span id="runtimemapaccess1-源码分析">runtime.mapaccess1() 源码分析</span></h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span> mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer &#123;<br>alg := t.key.alg<br><span class="hljs-regexp">//</span> 通过 hashMap 设置的 hash() 和 hash seed，计算出当前 key 对应的 hash<br>hash := alg.hash(key, uintptr(h.hash0))<br><span class="hljs-regexp">//</span> runtime.bucketMask() 获取该 key-value 所在的桶序号 -- 低位 hash<br>m := bucketMask(h.B)<br><span class="hljs-regexp">//</span> 获取对应的桶<br>b := (*bmap)(add(h.buckets, (hash&amp;m)*uintptr(t.bucketsize)))<br><span class="hljs-regexp">//</span> 计算 key 对应 hash 的高 <span class="hljs-number">8</span> 位<br>top := tophash(hash)<br>bucketloop:<br>    <span class="hljs-regexp">//</span> 遍历正常桶，以及之后的溢出桶<br><span class="hljs-keyword">for</span> ; b != nil; b = b.overflow(t) &#123;<br>    <span class="hljs-regexp">//</span> 遍历当前桶<br><span class="hljs-keyword">for</span> i := uintptr(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;<br>    <span class="hljs-regexp">//</span> 将 key 对应 hash 的高 <span class="hljs-number">8</span> 位和 桶中存储的 tophash 对比 -- 高位 hash<br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;<br>    <span class="hljs-regexp">//</span> emptyRest =&gt; 该位置后的 key-value 都可用（不需要再往后遍历），提前结束当前桶的遍历<br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br>    <span class="hljs-regexp">//</span> 转到下一个桶<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-regexp">//</span> 获取桶中当前位置存储的 k<br><span class="hljs-regexp">//</span> 计算出 k 相对于 当前 bucket 的总偏移<br>k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))<br><span class="hljs-regexp">//</span> 比较 寻找的 key 和 k 是否相等<br><span class="hljs-regexp">//</span> 若相等，返回 对应的 value<br><span class="hljs-keyword">if</span> alg.equal(key, k) &#123;<br>    <span class="hljs-regexp">//</span> 计算出相对于 bucket 的总偏移（对应了 runtime.bmap 中字段的构建顺序以及内存中的位置）<br>    <span class="hljs-regexp">//</span> b: 当前桶的起始地址<br>    <span class="hljs-regexp">//</span> dataOffset: topbit[] 对应的偏移量<br>    <span class="hljs-regexp">//</span> bucketCnt*uintptr(t.keysize): keys 数组的偏移量<br>    <span class="hljs-regexp">//</span> i * uintptr(t.valuesize): 第 i 个 value 的地址<br>v := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))<br>return v<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-regexp">//</span> 找不到，返回 零值<br>return unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <code>hashMap</code> 中数据的示意图，如下图所示：  </p><img src="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/hashmap-mapaccess.png" class title="hashMap 访问过程"><h5><span id="runtimemapaccess2-源码分析">runtime.mapaccess2() 源码分析</span></h5><p><code>mapaccess2()</code> 在 <code>mapaccess1()</code> 的基础上添加了一个 <code>bool</code> 类型的返回值，用于标识 <code>key-value</code> 是否存在。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess2</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-params">(unsafe.Pointer, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>...<br>bucketloop:<br><span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;<br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;<br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br>k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))<br><span class="hljs-keyword">if</span> alg.equal(key, k) &#123;<br>v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))<br><span class="hljs-keyword">return</span> v, <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>]), <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在正常情况下（不涉及扩容），访问 <code>hashMap</code> 中元素时的流程描述为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">一般情况：<br>1.根据key值，计算出<span class="hljs-built_in">hash</span>值<br>2.取<span class="hljs-built_in">hash</span>值低位与hmap.B取模来确定bucket的位置<br>3.取<span class="hljs-built_in">hash</span>值高位，在tophash数组中查询<br>4.如果tophash[i]中存储的<span class="hljs-built_in">hash</span>值与当前key的<span class="hljs-built_in">hash</span>值相同，则获取tophash[i]指向的key值进行比较<br>5.当前bucket没有找到，依次从溢出的bucket中寻找<br></code></pre></td></tr></table></figure><p><code>hashMap</code> 会在装载因子过高或者溢出桶过多时进行扩容，<code>hashMap</code> 扩容不是原子过程，在扩容过程中也要保证哈希表的正常访问，相关的设计思想以及代码在分析 扩容 的过程中进行介绍。</p><h4><span id="写入正常情况下的写入-扩容时的写入操作在下面讲-runtimemapassign">写入（正常情况下的写入 – 扩容时的写入操作在下面讲） – runtime.mapassign()</span></h4><p>写入操作 示例代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 增加 key-value<br>hash[key] = value<br><br><span class="hljs-regexp">//</span> 更新 key-value<br>hash[key] = newValue<br></code></pre></td></tr></table></figure><p>当形如 <code>hash[key]</code> 的表达式出现在赋值符号左侧时，会在编译期间转换成  <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L571">src/runtime/map.go#L571 mapassign()</a> 调用，该函数与 runtime.mapaccess1() 相似，由于函数实现代码较长，将其分为几个部分分析。</p><p>Step1: 函数会根据传入的 <code>key</code> 计算出其对应的 <code>hash</code>，拿到 <code>key</code> 对应的桶：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Like mapaccess, but allocates a slot for the key if it is not present in the map.</span><br><span class="hljs-comment">// 与 mapaccess() 实现相似，如果 key 不在当前的 map，会分配新的插槽，并将其插入到 map 中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapassign</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>    <br>alg := t.key.alg<br><span class="hljs-comment">// 计算 key 的 hash</span><br>hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>    <br>    <span class="hljs-comment">// 标志位：hashWriting = 4</span><br>    <span class="hljs-comment">// 表示已经有一个 goroutine 在访问，会触发 panic：concurrent map writes</span><br>    <span class="hljs-comment">// 检测是否出现了 并发访问</span><br>h.flags ^= hashWriting<br>    <br>again:<br>    <span class="hljs-comment">// 拿到 key 对应的桶的编号 -- 按位与</span><br>bucket := hash &amp; bucketMask(h.B)<br><span class="hljs-comment">// 指针 和 偏移量 拿到 key 对应的桶</span><br>b := (*bmap)(unsafe.Pointer(<span class="hljs-keyword">uintptr</span>(h.buckets) + bucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 计算 key 对应 hash 的高 8 位</span><br>top := tophash(hash)<br></code></pre></td></tr></table></figure><p>Step2: 遍历比较桶中存储的 <code>tophash</code> 和 <code>key</code> 的 <code>hash</code>，如果找到了相同结果就会返回目标位置地址；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk">    var inserti *uint8          <span class="hljs-regexp">//</span> 指针，表示目标元素在桶中的索引<br>var insertk unsafe.Pointer  <span class="hljs-regexp">//</span> key 的地址，寻址计算可以得到 key<br>var val unsafe.Pointer      <span class="hljs-regexp">//</span> value 的地址，寻址计算可以得到 value<br>bucketloop:<br><span class="hljs-keyword">for</span> &#123;   <span class="hljs-regexp">//</span> 外层循环 -- 按照顺序遍历 正常桶 和 溢出桶 =&gt; 找到值之后，将其更新<br><span class="hljs-keyword">for</span> i := uintptr(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;   <span class="hljs-regexp">//</span> 内层循环 -- 按照顺序遍历当前桶的 tophash，key，value 值<br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;    <span class="hljs-regexp">//</span> key 的高 <span class="hljs-number">8</span> 位 hash 与 tophash 是否匹配<br>    <span class="hljs-regexp">//</span> isEmpty(b.tophash[i]) == true =&gt; 当前位置的 tophash 为空<br>    <span class="hljs-regexp">//</span> inserti == nil =&gt; inserti 只会赋值一次<br>    <span class="hljs-regexp">//</span> 设计思想：<br>    <span class="hljs-regexp">//</span> 在遍历的过程中，找到第一个空的位置，并对其进行记录<br>    <span class="hljs-regexp">//</span> 便于后续的 插入新值 操作<br><span class="hljs-keyword">if</span> isEmpty(b.tophash[i]) &amp;&amp; inserti == nil &#123;<br>inserti = &amp;b.tophash[i]<br>insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))<br>val = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))<br>&#125;<br><span class="hljs-regexp">//</span> emptyRest =&gt; 该位置后的 key-value 都可用（不需要再往后遍历），提前结束当前桶的遍历<br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-regexp">//</span> 若匹配，先由 指针和偏移量 计算得到 完整的 k 值<br>k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))<br><span class="hljs-regexp">//</span> 再次判断，完整的 k 值是否与 key 相等<br><span class="hljs-keyword">if</span> !alg.equal(key, k) &#123;<br><span class="hljs-keyword">continue</span>    <span class="hljs-regexp">//</span> 若不等，继续当前桶的遍历<br>&#125;<br><span class="hljs-regexp">//</span> k = key，匹配成功<br><span class="hljs-regexp">//</span> 通过 指针 和 偏移量 计算得到 value<br>val = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))<br>goto done   <span class="hljs-regexp">//</span> 跳转到 done，执行返回逻辑<br>&#125;<br><span class="hljs-regexp">//</span> 当前桶匹配失败 =&gt; 到下一个桶中搜寻<br>ovf := b.overflow(t)<br><span class="hljs-regexp">//</span> 判断是否存在溢出桶，若不存在溢出桶，跳出循环，执行写入操作<br><span class="hljs-keyword">if</span> ovf == nil &#123; <br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-regexp">//</span> 存在溢出桶，继续遍历<br>b = ovf<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历过程示意图如下图所示： </p><img src="/2021/12/31/Cap-1-Map-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/hashmap-overflow-bucket.png" class title="遍历：正常桶 -&gt; 溢出桶映射关系"><p>Step3: 如果未找到匹配的 key-value =&gt; 插入新值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">    <span class="hljs-regexp">//</span> inserti == nil =&gt; 遍历过程中未找到空的位置 =&gt; 桶满<br><span class="hljs-keyword">if</span> inserti == nil &#123;<br>    <span class="hljs-regexp">//</span> 通过 runtime.hmap.newoverflow() 创建新桶<br>    <span class="hljs-regexp">//</span> or 使用 runtime.hmap 预先在 noverflow 中创建的溢出桶<br>newb := h.newoverflow(t, b)<br><span class="hljs-regexp">//</span> 使用新桶中的第一个位置<br>inserti = &amp;newb.tophash[<span class="hljs-number">0</span>]<br><span class="hljs-regexp">//</span> 指针和偏移量计算 insertk 和 val<br>insertk = add(unsafe.Pointer(newb), dataOffset)<br>val = add(insertk, bucketCnt*uintptr(t.keysize))<br>&#125;<br><br>    <span class="hljs-regexp">//</span> inserti != nil =&gt; 桶中有空位，且 key-value 在 hashMap 中不存在<br>    <span class="hljs-regexp">//</span> 通过 runtime.typedmemmove() 将 key 移动到对应的空位<br>typedmemmove(t.key, insertk, key)<br>*inserti = top<br><span class="hljs-regexp">//</span> hashMap 元素数量 +<span class="hljs-number">1</span><br>h.count++<br>    <br>    <span class="hljs-regexp">//</span> key-value 在 hashMap 中存在 =&gt; 返回 value 对应的地址<br>    <span class="hljs-regexp">//</span> 并没有进行真正的 赋值<br>done:<br>return val<br>&#125;<br></code></pre></td></tr></table></figure><p>函数 <code>mapassign()</code> 返回的是 <code>val =&gt; value</code> 对应的地址，并没有真正的进行赋值。</p><p>真正的赋值操作是在编译期间插入的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 将 字符串 <span class="hljs-number">88</span> 写到 hashMap 中<br>hashMap[key] = <span class="hljs-string">&quot;88&quot;</span><br><br><span class="hljs-regexp">//</span> 编译期间<br><span class="hljs-regexp">//</span> 调用 runtime.mapassign_fast64()<br><span class="hljs-number">00018</span> (+<span class="hljs-number">5</span>) CALL runtime.mapassign_fast64(SB)<br><span class="hljs-regexp">//</span> <span class="hljs-number">24</span>(SP) 为函数返回的值地址 val<br><span class="hljs-number">00020</span> (<span class="hljs-number">5</span>) MOVQ <span class="hljs-number">24</span>(SP), DI               ;; DI = &amp;value<br><span class="hljs-regexp">//</span> LEAQ 指令将 字符串的地址存储到 寄存器 AX 中<br><span class="hljs-number">00026</span> (<span class="hljs-number">5</span>) LEAQ go.string.<span class="hljs-string">&quot;88&quot;</span>(SB), AX   ;; AX = &amp;<span class="hljs-string">&quot;88&quot;</span><br><span class="hljs-regexp">//</span> MOVQ 指令将 字符串<span class="hljs-string">&quot;88&quot;</span> 存储到目标地址，完成写入<br><span class="hljs-number">00027</span> (<span class="hljs-number">5</span>) MOVQ AX, (DI)                 ;; *DI = AX<br></code></pre></td></tr></table></figure><p>在正常情况下（不涉及扩容），写入 <code>hashMap</code> 中元素时的流程描述为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">一般情况：<br>1.根据key值，计算出<span class="hljs-built_in">hash</span>值<br>2.取<span class="hljs-built_in">hash</span>值低位与hmap.B取模来确定bucket的位置<br>3.取<span class="hljs-built_in">hash</span>值高位，在tophash数组中查询<br>4.如果tophash[i]中存储的<span class="hljs-built_in">hash</span>值与当前key的<span class="hljs-built_in">hash</span>值相同，则获取tophash[i]指向的key值进行比较，直接更新值<br>5.当前bucket没有找到，依次从溢出的bucket中寻找，找到后更新<br>6.如果未找到key，在bucket中寻找空余位置插入（源码中的设计是：找到顺序遍历的过程中第一个空余位置，或者新桶中的第一个位置）<br></code></pre></td></tr></table></figure><p>与 <code>hashMap</code> 的访问相同，需要考虑 扩容 过程中进行何种的设计和实现来保证哈希表的正常写入，相关的设计思想以及代码在分析 扩容 的过程中进行介绍。</p><h4><span id="扩容">扩容</span></h4><p>上面介绍 <code>hashMap</code> 访问，写入操作时忽略了扩容操作以及扩容操作过程中访问，写入操作的特殊情况。随着 <code>hashMap</code> 中元素的逐渐增加，或者由于删除操作导致了 <code>hashMap</code> 中的 <code>Key-Value</code> 分布不均匀，哈希表的性能会逐渐变差。因此需要扩容操作保证哈希表的读写性能。</p><h5><span id="扩容条件">扩容条件</span></h5><p><code>runtime.mapassign()</code> 会在以下两种情况发生时触发哈希的扩容，进而转到扩容的入口：<code>runtime.hashGrow()</code> <a href="https://draveness.me/golang/tree/runtime.hashGrow">runtime.hashGrow()</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 负载因子大于<span class="hljs-number">6</span>.<span class="hljs-number">5</span>，平均每个bucket存储的键值对达到<span class="hljs-number">6</span>.<span class="hljs-number">5</span>个及以上<br><span class="hljs-attribute">2</span>. 哈希表使用了太多的溢出桶：overflow数量大于<span class="hljs-number">2</span>^<span class="hljs-number">15</span>，即overflow的数量超过<span class="hljs-number">32768</span><br></code></pre></td></tr></table></figure><p>对应 <code>runtime.mapassign()</code> 源码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer &#123;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span><span class="hljs-comment">// !h.growing()：判断当前 hashMap 是否已经处于扩容状态，避免二次扩容</span><br><span class="hljs-comment">// overLoadFactor()：判断负载因子是否达到 6.5</span><br><span class="hljs-comment">// tooManyOverflowBuckets()：判断溢出桶的个数是否达到 2^15</span><br><span class="hljs-keyword">if</span> !h.growing<span class="hljs-literal">()</span><span class="hljs-operator"> &amp;&amp; </span>(over<span class="hljs-constructor">LoadFactor(<span class="hljs-params">h</span>.<span class="hljs-params">count</span>+1, <span class="hljs-params">h</span>.B)</span><span class="hljs-operator"> || </span>too<span class="hljs-constructor">ManyOverflowBuckets(<span class="hljs-params">h</span>.<span class="hljs-params">noverflow</span>, <span class="hljs-params">h</span>.B)</span>) &#123;<br>    <span class="hljs-comment">// 转到 扩容操作</span><br>hash<span class="hljs-constructor">Grow(<span class="hljs-params">t</span>, <span class="hljs-params">h</span>)</span><br><span class="hljs-comment">// 扩容完成后，继续进行写入操作</span><br>goto again<br>&#125;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.26 扩容方式分类 || hashGrow() 源码分析</strong></p><h5><span id="增量扩容-逐步搬迁策略">增量扩容 - 逐步搬迁策略</span></h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">当负载因子过大时，新建一个bucket数组，新的bucket数组的长度是原来的<span class="hljs-number">2</span>倍，然后将旧bucket的数据搬迁到新的bucket数组中，搬迁成功后安全的释放掉旧bucket数组<br><br>对应到数据结构中：<span class="hljs-built_in">map</span>中的buckets指向新建的数组，oldbuckets指向旧的bucket数组<br><br>这里说到底搬迁，并非是一次性搬迁，考虑到<span class="hljs-built_in">map</span>中的<span class="hljs-built_in">key</span>-value的数量，一次性搬迁可能会有一个很大的延迟<br><br>Go在这里采用的是逐步搬迁策略：（像极了mysql <span class="hljs-built_in">flush</span> 脏页的操作）<br>    每次访问<span class="hljs-built_in">map</span>时，都会触发一次搬迁，每次搬迁两个键值对<br></code></pre></td></tr></table></figure><h5><span id="等量扩容">等量扩容</span></h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bucket数量不变，重新做一遍类似增量扩容的操作，把松散的键值对重新排列一次，使得bucket的利用率更高</span><br><span class="hljs-keyword"></span><br>极端的情况下，如经过大量的增删后，键值对集中在一小部分<span class="hljs-keyword">bucket中，会造成溢出的bucket很多，但是访问效率很差</span><br></code></pre></td></tr></table></figure><h4><span id="删除">删除</span></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">简述如下：<br><span class="hljs-number">1</span>.先查找元素，查到直接从相应<span class="hljs-keyword">bucket删除</span><br><span class="hljs-keyword"></span><span class="hljs-number">2</span>.查不到就什么都不做<br></code></pre></td></tr></table></figure><h3><span id="2-syncmap-进程安全支持并发操作的-map">2. Sync.Map – 进程安全，支持并发操作的 Map</span></h3><p>map 操作不是原子的，意味着 map 不支持并发读写，不是线程安全的，多个线程同时操作 map 可能会产生读写冲突</p><p>Go 团队在设计 map 时认为在大多数场景下不需要并发读写，如果为了支持并发读写而引入互斥锁则会降低 map 的操作性能。而且，在 map 的实现中增加了读写检测机制，一旦发现读写冲突会触发 panic。</p><p>Go 团队在 Go1.9 中引入了标准库 sync 下的 Map ， sync 包下面的 map 支持并发读写</p><p>相关链接: <a href="https://blog.csdn.net/jiankunking/article/details/78808978">Go 1.9 sync Map 源码阅读笔记_衣舞晨风-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go专家编程》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go专家编程》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.3 数据结构 -- 哈希表 hashMap</title>
    <link href="/2021/12/30/3-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-hashMap/"/>
    <url>/2021/12/30/3-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-hashMap/</url>
    
    <content type="html"><![CDATA[<h2><span id="33-哈希表-hashmap">3.3 哈希表 hashMap</span></h2><p>数组 / 切片 -&gt; 表示 元素 的序列</p><p><code>hashMap</code> -&gt; 表示 键值对 之间的 映射 关系</p><h3><span id="331-设计原理">3.3.1 设计原理</span></h3><p>读写 hashMap 的时间复杂度：O(1)，要想实现一个性能优异的哈希表，需要解决：哈希函数 hash Function、冲突解决方法</p><h4><span id="哈希函数-hash-function">哈希函数 hash Function</span></h4><p>理想的 hash Function：能够将不同的 键 key 映射到不同的索引上，这要求 hash Function 的输出范围 大于 输入的范围（实际情况下不可能实现）。</p><p>不均匀 hash Function：让 hash Function 的结果，尽可能的均匀分布，通过工程上的手段解决 hash reflect。</p><p>hash Function 的选定，对 hashMap 性能的影响较大。</p><h4><span id="冲突解决-开放寻址-拉链法">冲突解决 – 开放寻址、拉链法</span></h4><p>多数的 hash Function 都是不够完美的 -&gt; hash reflect</p><p>常见的解决 hash reflect 的方法：开放寻址法、拉链法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">需要注意的是，我们在这里提到的 <span class="hljs-built_in">hash</span> reflect 不是多个 键(key) 的 <span class="hljs-built_in">hash</span> 完全相等<br>可能是多个 <span class="hljs-built_in">hash</span> 的 部分相等<br>如：两个键对应 <span class="hljs-built_in">hash</span> 的前四个字节相同<br></code></pre></td></tr></table></figure><p><strong>开放寻址法</strong><br>核心思想：依次 探测、比较 <strong>数组</strong> 中的元素，以判断目标键值对是否存在于 哈希表中</p><p>对应的底层数据结构是 数组</p><p>对应的 hash 函数可能为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> hash(<span class="hljs-string">&quot;key&quot;</span>) -&gt; 将 字符串 转化为 数字<br><span class="hljs-regexp">//</span> hash(<span class="hljs-string">&quot;key&quot;</span>) % array.len -&gt; 对 数组长度 取 余数<br>index := hash(<span class="hljs-string">&quot;key&quot;</span>) % array.len<br></code></pre></td></tr></table></figure><p>如果出现 hash reflect，就会向后 依次探测，找到下一个 索引不为空 的位置。</p><p>这种较为简单的机制，会导致在 访问 hashMap 时，产生多余的读取次数，降低性能。</p><p>对性能影响最大的参数为：装载因子 load factor，其计算方法为：数组中元素的数量 / 数组大小</p><p>随着 load factor 的增加，线性探测的平均用时就会逐渐增加。</p><p>load factor = 100% 时，hashMap 失效。查找 和 插入元素的时间复杂度都是 O(n)，需要遍历数组中的全部元素。</p><p><strong>拉链法</strong><br>数组 + 链表 实现，有的编程语言会在 拉链法 的 hash 中，引入 红黑树 来优化性能。</p><p>数组 实际上对应到具体的桶 bucket，同一个 桶 的数据 存储在一个链表中。</p><p>拉链法 写入 hashMap 时，也是有一个 hash Function 的存在（此处使用了 对数组的长度取余）：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">// <span class="hljs-keyword">index</span> -&gt; 当前元素所在的 桶(<span class="hljs-keyword">bucket</span>) 的序号<br><span class="hljs-keyword">index</span> := hash(<span class="hljs-string">&quot;key&quot;</span>) % <span class="hljs-keyword">array</span>.len<br></code></pre></td></tr></table></figure><p>在定位到其所在的桶后，需要遍历 对应的链表，可能遇到以下情况：</p><ol><li>找到 键 相同的键值对 -&gt; 更新键对应的值</li><li>未找到 键 相同的键值对 -&gt; 在链表的末尾追加新的键值对</li></ol><p>读写 hashMap 的主要开销：计算 hash value、定位桶、遍历链表。</p><p>拉链法的 <strong>load factor</strong> = 元素数量 / 桶数量</p><p>load factor 越大，hashMap 的读写性能越差。在一般情况下，拉链法的 load factor &lt;= 1</p><p>当 load factor 较大时，会触发 hashMap 的 扩容，创建更多的桶来存储更多的 元素（<strong>具体要看语言的实现</strong>）。</p><h3><span id="332-数据结构">3.3.2 数据结构</span></h3><p>编译期间的 hashMap 是 <a href="https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/cmd/compile/internal/types/type.go#L217">src/cmd/compile/internal/types.Map</a> 类型的，通过 <a href="https://github.com/golang/go/blob/f5978a09589badb927d3aa96998fc785524cae02/src/cmd/compile/internal/types/type.go#L536">src/cmd/compile/internal/types.NewMap()</a> 对其进行初始化：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ada">// types.Map<br>// Map contains <span class="hljs-keyword">Type</span> <span class="hljs-type">fields </span>specific to maps.<br><span class="hljs-keyword">type</span> <span class="hljs-type">Map </span>struct &#123;<br>Key  *<span class="hljs-keyword">Type</span> <span class="hljs-type">// </span>Key <span class="hljs-keyword">type</span><br><span class="hljs-type">Elem </span>*<span class="hljs-keyword">Type</span> <span class="hljs-type">// </span>Val (elem) <span class="hljs-keyword">type</span><br><br><span class="hljs-type">Bucket </span>*<span class="hljs-keyword">Type</span> <span class="hljs-type">// </span>internal struct <span class="hljs-keyword">type</span> <span class="hljs-type">representing </span>a hash bucket<br>Hmap   *<span class="hljs-keyword">Type</span> <span class="hljs-type">// </span>internal struct <span class="hljs-keyword">type</span> <span class="hljs-type">representing </span>the Hmap (map header object)<br>Hiter  *<span class="hljs-keyword">Type</span> <span class="hljs-type">// </span>internal struct <span class="hljs-keyword">type</span> <span class="hljs-type">representing </span>hash iterator state<br>&#125;<br><br>// func NewMap()<br>// NewMap returns a <span class="hljs-keyword">new</span> map <span class="hljs-keyword">Type</span> <span class="hljs-type">with </span>key <span class="hljs-keyword">type</span> <span class="hljs-type">k </span><span class="hljs-keyword">and</span> element (aka value) <span class="hljs-keyword">type</span> <span class="hljs-type">v.</span><br><span class="hljs-type"></span>func NewMap(k, v *<span class="hljs-keyword">Type</span>) *<span class="hljs-keyword">Type</span> <span class="hljs-type">&#123;</span><br><span class="hljs-type"></span>t := <span class="hljs-keyword">New</span>(TMAP)<br>mt := t.MapType()<br>mt.Key = k<br>mt.Elem = v<br><span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></td></tr></table></figure><p>在 运行时 runtime，使用了多个数据结构的组合表示 hashMap，<a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/map.go#L115">runtime.hmap</a> 是最核心的结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.hmap</span><br><span class="hljs-comment">// A header for a Go map.</span><br><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span><br><span class="hljs-comment">// Make sure this stays in sync with the compiler&#x27;s definition.</span><br>count     <span class="hljs-keyword">int</span> <span class="hljs-comment">// # live cells == size of map.  Must be first (used by len() builtin)</span><br>flags     <span class="hljs-keyword">uint8</span><br>B         <span class="hljs-keyword">uint8</span>  <span class="hljs-comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span><br>noverflow <span class="hljs-keyword">uint16</span> <span class="hljs-comment">// approximate number of overflow buckets; see incrnoverflow for details</span><br>hash0     <span class="hljs-keyword">uint32</span> <span class="hljs-comment">// hash seed</span><br><br>buckets    unsafe.Pointer <span class="hljs-comment">// array of 2^B Buckets. may be nil if count==0.</span><br>oldbuckets unsafe.Pointer <span class="hljs-comment">// previous bucket array of half the size, non-nil only when growing</span><br>nevacuate  <span class="hljs-keyword">uintptr</span>        <span class="hljs-comment">// progress counter for evacuation (buckets less than this have been evacuated)</span><br><br>extra *mapextra <span class="hljs-comment">// optional fields</span><br>&#125;<br><br><span class="hljs-comment">// runtime.mapextra</span><br><span class="hljs-comment">// mapextra holds fields that are not present on all maps.</span><br><span class="hljs-keyword">type</span> mapextra <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// If both key and elem do not contain pointers and are inline, then we mark bucket</span><br><span class="hljs-comment">// type as containing no pointers. This avoids scanning such maps.</span><br><span class="hljs-comment">// However, bmap.overflow is a pointer. In order to keep overflow buckets</span><br><span class="hljs-comment">// alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow.</span><br><span class="hljs-comment">// overflow and oldoverflow are only used if key and elem do not contain pointers.</span><br><span class="hljs-comment">// overflow contains overflow buckets for hmap.buckets.</span><br><span class="hljs-comment">// oldoverflow contains overflow buckets for hmap.oldbuckets.</span><br><span class="hljs-comment">// The indirection allows to store a pointer to the slice in hiter.</span><br>overflow    *[]*bmap<br>oldoverflow *[]*bmap<br>    <br><span class="hljs-comment">// nextOverflow holds a pointer to a free overflow bucket.</span><br>nextOverflow *bmap<br>&#125;<br><br><span class="hljs-comment">// runtime.bmap</span><br><span class="hljs-comment">// A bucket for a Go map.</span><br><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123;<br>tophash [bucketCnt]<span class="hljs-keyword">uint8</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结构体中的字段：</p><ol><li>count -&gt; 当前 hashMap 中的 元素数量</li><li>B -&gt; 表示当前 hashMap 使用到的 buckets 数量，buckets = 2^B; B = log(buckets)</li><li>noverflow -&gt; overflow buckets 溢出桶的数量</li><li>hash0 -&gt; hash seed 哈希种子，为 hash Function 引入了随机性，这个值在创建 hashMap 时确定，并在 hash() 时作为参数传入</li><li>buckets -&gt; 桶，对应到的数据结构为： <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L149">runtime.bmap</a></li><li>oldbuckets -&gt; 在扩容时使用，用于保存旧 hashMap 的 buckets 字段，大小为当前 buckets 的一半（扩容的时候翻倍了）</li><li>nevacuate -&gt; 用于 分流 旧桶 中的数据</li><li>extra -&gt; 存储 溢出 bucket 的数据，对应到的数据结构为： <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L132">runtime.mapextra</a></li></ol><p>具体可参考下图：</p><img src="/2021/12/30/3-3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-hashMap/hmap-and-buckets.png" class title="hmap 和 buckets 之间的关系"><p><img src="https://note.youdao.com/yws/api/group/102464226/file/911384549?method=download&inline=true&version=1&shareToken=E35BF92B0016438D8E822489C97315FD" alt="image"></p><p>runtime.hmap 的桶是 runtime.bmap。每一个 runtime.bmap 都能存储 8 个键值对，当 hashMap 中存储的数据过多时，单个桶已经装满时，会使用 extra.nextOverflow 中的桶存储溢出的数据。</p><p>上图中，黄色的部分为 正常桶，绿色的部分为 溢出桶（溢出桶是在 Golang 使用 C 实现时使用的设计，由于它能减少扩容的频率，所以被保留到现在）。</p><h4><span id="runtimebmap">runtime.bmap</span></h4><p>桶的结构体 runtime.bmap，看起来实现较为简单，只包含了一个简单的 tophash 字段。</p><p>tophash 字段，用于存储键的 hash 的高 8 位，通过比较不同键的 hash 的高 8 位，减少了访问键值对次数，提高了性能。</p><p>tophash 只能用于存储 hash 的 top 8 位，并不能去表示 buckets 中需要存储的 不同类型的 key-value 数据。这一阶段实际上是在编译期间进行的，golang compile 需要在编译时推导出 buckets 中存储的 键值对 的类型 以及其 占用的内存空间大小。</p><p>++在运行期间， runtime.bmap 结构体不止包含 tophash 字段，考虑到哈希表中可能存储不同类型的键值对（key-value 的类型多种多样），而且 1.x 版本的 Golang 并未添加对泛型的支持，所以键值对的类型以及其所占内存大小只能在编译时进行推导。++</p><p>这一过程包含在编译器间的函数 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/reflect.go#L83">src/cmd/compile/internal/gc.bmap()</a> 中；runtime.bmap 中的其他字段在运行时，是通过计算内存地址的方式访问的，在定义中没有包含这些字段。</p><p>我们可以通过这个函数，重建出 runtime.bmap 在运行时中的结构：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 运行期间的结构 -- 通过 src<span class="hljs-regexp">/cmd/</span>compile<span class="hljs-regexp">/internal/g</span>c/reflect.go Line <span class="hljs-number">83</span> 可以重建其结构<br>type bmap struct &#123;<br>    topbits  [<span class="hljs-number">8</span>]uint8       <span class="hljs-regexp">//</span> 存储 Hash 高 <span class="hljs-number">8</span> 位，每个桶存储 <span class="hljs-number">8</span> 个 -&gt; <span class="hljs-number">8</span> 个键值对<br>    keys     [<span class="hljs-number">8</span>]keytype     <span class="hljs-regexp">//</span> 存储 key 值<br>    values   [<span class="hljs-number">8</span>]valuetype   <span class="hljs-regexp">//</span> Key 值对应的 value<br>    pad      uintptr        <br>    overflow uintptr        <span class="hljs-regexp">//</span> 指向溢出 bucket 的地址（链地址法解决 key 冲突）<br>&#125;<br></code></pre></td></tr></table></figure><p>gc.bmap() 函数源码如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs elm">// bmap makes the map bucket <span class="hljs-keyword">type</span> given the <span class="hljs-keyword">type</span> of the map.<br><span class="hljs-title">func</span> bmap(t *types.<span class="hljs-type">Type</span>) *types.<span class="hljs-type">Type</span> &#123;<br>    // <span class="hljs-type">Step1</span>: 检查当前 <span class="hljs-type">Map</span> 的 <span class="hljs-type">Bucket</span> 是否为空<br>if t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span> != nil &#123;<br>return t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span><br>&#125;<br><br>    // <span class="hljs-type">Step2</span>: 初始化 bucket，类型推断 获得 key<span class="hljs-keyword">type</span>，elemtype，同时确保 keytype 以及 elemtype 大小合理<br>    // 这里传入的参数是：<span class="hljs-type">TSTRUCT</span> -&gt; 在 <span class="hljs-type">Type</span>.go 中，<span class="hljs-type">TSTRUCT</span> : *<span class="hljs-type">Struct</span><br>bucket := types.<span class="hljs-type">New</span>(<span class="hljs-type">TSTRUCT</span>)<br>// 通过 <span class="hljs-type">Type</span>.<span class="hljs-type">Key</span>() 获取 map 中 key 的类型<br>key<span class="hljs-keyword">type</span> := t.<span class="hljs-type">Key</span>()<br>// 通过 <span class="hljs-type">Type</span>.<span class="hljs-type">Elem</span>() 获取 map 中 value 的类型<br>elem<span class="hljs-keyword">type</span> := t.<span class="hljs-type">Elem</span>()<br>dowidth(key<span class="hljs-keyword">type</span>)<br>dowidth(elem<span class="hljs-keyword">type</span>)<br>// key<span class="hljs-keyword">type</span>, elemtype 大小检测<br><span class="hljs-keyword">if</span> key<span class="hljs-keyword">type</span>.<span class="hljs-type">Width</span> &gt; <span class="hljs-type">MAXKEYSIZE</span> &#123;<br>keytype = types.<span class="hljs-type">NewPtr(keytype)</span><br>&#125;<br><span class="hljs-keyword">if</span> elem<span class="hljs-keyword">type</span>.<span class="hljs-type">Width</span> &gt; <span class="hljs-type">MAXELEMSIZE</span> &#123;<br>elemtype = types.<span class="hljs-type">NewPtr(elemtype)</span><br>&#125;<br>    <br>    // <span class="hljs-type">Step3</span>: 初始化 bmap 中包含的字段，对 bmap 进行重组<br>    // 使用的切片，切片大小 = <span class="hljs-number">5</span><br>field := make([]*types.<span class="hljs-type">Field</span>, 0, 5)<br><br>// <span class="hljs-type">The</span> first field is: uint8 topbits[<span class="hljs-type">BUCKETSIZE</span>].<br>// 第一个字段：topbits [<span class="hljs-type">BUCKETSIZE</span>] uint8 <span class="hljs-comment">-- 对应到 tophash</span><br>arr := types.<span class="hljs-type">NewArray</span>(types.<span class="hljs-type">Types</span>[<span class="hljs-type">TUINT8</span>], <span class="hljs-type">BUCKETSIZE</span>)<br>field = append(field, makefield(<span class="hljs-string">&quot;topbits&quot;</span>, arr))<br><br>    // 第二个字段：keys [<span class="hljs-type">BUCKETSIZE</span>] key<span class="hljs-keyword">type</span>，存储的是 key 的集合<br>arr = types.<span class="hljs-type">NewArray</span>(keytype, <span class="hljs-type">BUCKETSIZE</span>)<br>arr.<span class="hljs-type">SetNoalg</span>(true)<br>keys := makefield(<span class="hljs-string">&quot;keys&quot;</span>, arr)<br>field = append(field, keys)<br>    <br>    // 第三个字段：elems [<span class="hljs-type">BUCKETSIZE</span>] elem<span class="hljs-keyword">type</span>，存储的是 value 的集合<br>arr = types.<span class="hljs-type">NewArray</span>(elemtype, <span class="hljs-type">BUCKETSIZE</span>)<br>arr.<span class="hljs-type">SetNoalg</span>(true)<br>elems := makefield(<span class="hljs-string">&quot;elems&quot;</span>, arr)<br>field = append(field, elems)<br>    <br>    ...<br>    <br>// 第四个字段: overflow uintptr，存储指向溢出桶的指针<br>otyp := types.<span class="hljs-type">NewPtr</span>(bucket)<br><span class="hljs-keyword">if</span> !elem<span class="hljs-keyword">type</span>.<span class="hljs-type">HasPointers</span>() &amp;&amp; !keytype.<span class="hljs-type">HasPointers</span>() &#123;<br>otyp = types.<span class="hljs-type">Types</span>[<span class="hljs-type">TUINTPTR</span>]<br>&#125;<br>overflow := makefield(<span class="hljs-string">&quot;overflow&quot;</span>, otyp)<br>field = append(field, overflow)<br><br>// link up fields<br>// 字段重组: bucket 本质上是一个结构体，这里使用了 struct 的 setFields()，用于设定 bucket 中的字段<br>bucket.<span class="hljs-type">SetNoalg</span>(true)<br>bucket.<span class="hljs-type">SetFields</span>(field[:])<br>dowidth(bucket)<br><br>// <span class="hljs-type">Check</span> invariants that map code depends on.<br><span class="hljs-keyword">if</span> !<span class="hljs-type">IsComparable</span>(t.<span class="hljs-type">Key</span>()) &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;unsupported map key type for %v&quot;</span>, t)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-type">BUCKETSIZE</span> &lt; <span class="hljs-number">8</span> &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;bucket size too small for proper alignment&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> key<span class="hljs-keyword">type</span>.<span class="hljs-type">Align</span> &gt; <span class="hljs-type">BUCKETSIZE</span> &#123;<br><span class="hljs-type">Fatalf</span>(&quot;key align too big for %v&quot;, t)<br>&#125;<br><span class="hljs-keyword">if</span> elem<span class="hljs-keyword">type</span>.<span class="hljs-type">Align</span> &gt; <span class="hljs-type">BUCKETSIZE</span> &#123;<br><span class="hljs-type">Fatalf</span>(&quot;elem align too big for %v&quot;, t)<br>&#125;<br><br>    ...<br>    ...<br> <br>// <span class="hljs-type">Double</span>-check that overflow field is final memory <span class="hljs-keyword">in</span> struct,<br>// with no padding at end.<br><span class="hljs-keyword">if</span> overflow.<span class="hljs-type">Offset</span> != bucket.<span class="hljs-type">Width</span>-int64(<span class="hljs-type">Widthptr</span>) &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;bad offset of overflow in bmap for %v&quot;</span>, t)<br>&#125;<br>    // <span class="hljs-type">Step4</span>: 检查 构建 bmap 使用的 不变量，如：<span class="hljs-type">BUCKETSIZE</span>，key<span class="hljs-keyword">type</span>，elemtype，keyType.align等<br>    // 对 overflow 字段做二次检查，确保 overflow 是最后添加到结构体中的，且不存在字节冗余（考虑性能）<br>    // 最后对 bucket 进行类型重组，返回<br>t.<span class="hljs-type">MapType</span>().<span class="hljs-type">Bucket</span> = bucket<br><br>    // 类型重组<br>bucket.<span class="hljs-type">StructType</span>().<span class="hljs-type">Map</span> = t<br>return bucket<br>&#125;<br></code></pre></td></tr></table></figure><p>由上述代码可以看出，在 编译期间 对 bmap 的重建，主要分为以下 4 步：</p><ol><li>检查当前 Map 的 Bucket 是否为空，如果不为空，直接返回（需要进行不为空检查）;</li><li>初始化 bucket，类型推断 获得 keytype, elemtype，同时确保 keytype 以及 elemtype; 大小合理;</li><li>初始化 bmap 中包含的字段，对 bmap 进行重组;</li><li>检查构建 bmap 使用的不变：BUCKETSIZE, keytype, elemtype, keytype.align 等，同时二次检查 overflow 字段，确保 overflow 最后添加到结构体中，且不存在字节冗余；最后对 bucket 进行类型重组，返回</li></ol><h3><span id="333-初始化">3.3.3 初始化</span></h3><h4><span id="字面量">字面量</span></h4><p>字面量初始化 使用 key: value 的语法来表示键值对：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">hash := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>&#123;<br>    <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;3&quot;</span> : <span class="hljs-number">4</span>,<br>    <span class="hljs-string">&quot;5&quot;</span> : <span class="hljs-number">6</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>字面量声明方式 通过 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/sinit.go#L753">src/cmd/compile/internal/gc.maplit()</a> 函数，在编译期间完成初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maplit</span><span class="hljs-params">(n *Node, m *Node, init *Nodes)</span></span> &#123;<br><span class="hljs-comment">// make the map var</span><br><span class="hljs-comment">// 节点转换为 OMAKE 节点 -&gt; 实际调用为 makemap()</span><br>a := nod(OMAKE, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<br>a.Esc = n.Esc<br>a.List.Set2(typenod(n.Type), nodintconst(<span class="hljs-keyword">int64</span>(n.List.Len())))<br>litas(m, a, init)<br><br>entries := n.List.Slice()<br><br><span class="hljs-comment">// The order pass already removed any dynamic (runtime-computed) entries.</span><br><span class="hljs-comment">// All remaining entries are static. Double-check that.</span><br><span class="hljs-keyword">for</span> _, r := <span class="hljs-keyword">range</span> entries &#123;<br><span class="hljs-keyword">if</span> !isStaticCompositeLiteral(r.Left) || !isStaticCompositeLiteral(r.Right) &#123;<br>Fatalf(<span class="hljs-string">&quot;maplit: entry is not a literal: %v&quot;</span>, r)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(entries) &gt; <span class="hljs-number">25</span> &#123;<br><span class="hljs-comment">// For a large number of entries, put them in an array and loop.</span><br><span class="hljs-comment">// build types [count]Tindex and [count]Tvalue</span><br>        ...<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// For a small number of entries, just add them directly.</span><br><br><span class="hljs-comment">// Build list of var[c] = expr.</span><br><span class="hljs-comment">// Use temporaries so that mapassign1 can have addressable key, elem.</span><br><span class="hljs-comment">// TODO(josharian): avoid map key temporaries for mapfast_* assignments with literal keys.</span><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可以看出，Map 字面量初始化逻辑为：</p><ol><li>当 hashMap 中元素数量 大于 25 时，编译器会创建两个数组，分别存储 key 和 value，这些 key 和 value 会通过一个 for loop 循环加入到 hashMap<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Sample code</span><br><span class="hljs-comment">// 实际使用 make() 创建 hashMap</span><br>hashMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">26</span>)<br><br><span class="hljs-comment">// 实际执行逻辑</span><br>vstatk := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, ..., <span class="hljs-string">&quot;26&quot;</span>&#125;<br>vstatv := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ..., <span class="hljs-number">26</span>&#125;<br><span class="hljs-comment">// for loop</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(vstatk); i++ &#123;<br>    hashMap[ vstatk[i] ] = vstatv[i]   <br>&#125;<br></code></pre></td></tr></table></figure></li><li>当 hashMap 中的元素数量 &lt;= 25 时，将所有的键值对，一次性加入到 hashMap 中。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Sample code</span><br><span class="hljs-comment">// 实际使用 make() 创建 hashMap</span><br>hashMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 实际执行逻辑</span><br>hashMap[<span class="hljs-string">&quot;1&quot;</span>] = <span class="hljs-number">2</span><br>hashMap[<span class="hljs-string">&quot;3&quot;</span>] = <span class="hljs-number">4</span><br>hashMap[<span class="hljs-string">&quot;5&quot;</span>] = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li></ol><p>在使用字面量方式 初始化 hashMap 时，使用到的还是 make() 初始化 hashMap；通过判断元素的数量 使用 for-loop 或者 直接写入 的方式，填充 hashMap</p><p>与 数组、切片 的字面量初始化方式相同，hashMap 的字面量初始化 也是 golang 提供的辅助工具，最后调用的都是 makeslice(), makemap()</p><h4><span id="运行时-make-gt-makemap">运行时 – make() -&gt; makemap(){}</span></h4><p>一种特殊的情况是：hashMap 被分配到栈上，且容量小于 BUCKETSIZE = 8时，golang compile 会使用以下方式 快速初始化 hashMap -&gt; 编译器对小容量的 hashMap 的优化</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// hmap</span><br><span class="hljs-selector-tag">var</span> h *hmap<br><span class="hljs-selector-tag">var</span> hv hmap<br><span class="hljs-comment">// bucket</span><br><span class="hljs-selector-tag">var</span> bv bmap<br>h := &amp;hv<br><span class="hljs-selector-tag">b</span> := &amp;bv<br><span class="hljs-comment">// 快速初始化 buckets</span><br>h<span class="hljs-selector-class">.buckets</span> = <span class="hljs-selector-tag">b</span><br><span class="hljs-comment">// 随机 hash seed</span><br>h<span class="hljs-selector-class">.hash0</span> = fashtrand0()<br></code></pre></td></tr></table></figure><p>对于字面量、make() 等情况，使用 make 关键字创建 hashMap 时，golang compile 都在 类型检查期间将其转换为 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L303">runtime.makemap()</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// func makemap()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap</span><span class="hljs-params">(t *maptype, hint <span class="hljs-keyword">int</span>, h *hmap)</span> *<span class="hljs-title">hmap</span></span> &#123;<br>    <span class="hljs-comment">// 1. 计算 hash 占用的内存是否溢出 or 超出了能分配的最大值</span><br>mem, overflow := math.MulUintptr(<span class="hljs-keyword">uintptr</span>(hint), t.bucket.size)<br><span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc &#123;<br>hint = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// initialize Hmap</span><br><span class="hljs-keyword">if</span> h == <span class="hljs-literal">nil</span> &#123;<br>h = <span class="hljs-built_in">new</span>(hmap)<br>&#125;<br><span class="hljs-comment">// 2. 获取随机 hash seed</span><br>h.hash0 = fastrand()<br><br><span class="hljs-comment">// Find the size parameter B which will hold the requested # of elements.</span><br><span class="hljs-comment">// For hint &lt; 0 overLoadFactor returns false since hint &lt; bucketCnt.</span><br>B := <span class="hljs-keyword">uint8</span>(<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 3. 根据 hint 计算出 最小需要的 bucket 的数量</span><br><span class="hljs-keyword">for</span> overLoadFactor(hint, B) &#123;<br>B++<br>&#125;<br>h.B = B<br>    <br>    <span class="hljs-comment">// 4. 调用 runtime.makeBucketArray() 创建用于保存 桶 的数组</span><br><span class="hljs-comment">// allocate initial hash table</span><br><span class="hljs-comment">// if B == 0, the buckets field is allocated lazily later (in mapassign)</span><br><span class="hljs-comment">// If hint is large zeroing this memory could take a while.</span><br><span class="hljs-keyword">if</span> h.B != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> nextOverflow *bmap<br>h.buckets, nextOverflow = makeBucketArray(t, h.B, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> nextOverflow != <span class="hljs-literal">nil</span> &#123;<br>h.extra = <span class="hljs-built_in">new</span>(mapextra)<br>h.extra.nextOverflow = nextOverflow<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> h<br>&#125;<br></code></pre></td></tr></table></figure><p>函数的执行步骤如下：</p><ol><li>计算哈希占用的内存是否溢出或者超出能分配的最大值；</li><li>调用 runtime.fastrand 获取一个随机的哈希种子；</li><li>根据传入的 hint 计算出需要的最小需要的桶的数量；</li><li>使用 runtime.makeBucketArray 创建用于保存桶的数组</li></ol><p><a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L344">runtime.makeBucketArray()</a> 根据传入的 B，计算出需要创建的 Bucket 的数量 并在内存中分配一片连续的空间用于存储数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeBucketArray</span><span class="hljs-params">(t *maptype, b <span class="hljs-keyword">uint8</span>, dirtyalloc unsafe.Pointer)</span> <span class="hljs-params">(buckets unsafe.Pointer, nextOverflow *bmap)</span></span> &#123;<br>base := bucketShift(b)<br>nbuckets := base<br><span class="hljs-comment">// B &gt; 4 需要创建 溢出桶</span><br><span class="hljs-keyword">if</span> b &gt;= <span class="hljs-number">4</span> &#123;<br>    <span class="hljs-comment">// 额外创建了 2^(B - 4) 个溢出桶</span><br>nbuckets += bucketShift(b - <span class="hljs-number">4</span>)<br>sz := t.bucket.size * nbuckets<br>up := roundupsize(sz)<br><span class="hljs-keyword">if</span> up != sz &#123;<br>nbuckets = up / t.bucket.size<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// B &lt; 4，直接创建 2^B 个 bucket</span><br>    <span class="hljs-comment">// 调用 types.newarray() 创建数组</span><br>buckets = newarray(t.bucket, <span class="hljs-keyword">int</span>(nbuckets))<br><span class="hljs-comment">// 溢出桶 处理逻辑</span><br><span class="hljs-keyword">if</span> base != nbuckets &#123;<br>    <span class="hljs-comment">// 指定出 溢出桶的位置</span><br>nextOverflow = (*bmap)(add(buckets, base*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 溢出桶 末尾位置</span><br>last := (*bmap)(add(buckets, (nbuckets<span class="hljs-number">-1</span>)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br>last.setoverflow(t, (*bmap)(buckets))<br>&#125;<br><span class="hljs-keyword">return</span> buckets, nextOverflow<br>&#125;<br></code></pre></td></tr></table></figure><p>在函数内根据 B 的值，进入到两种处理逻辑：</p><ol><li>B &lt; 4，数据较少、使用溢出桶的可能性较低，会省去创建的过程以减少额外的开销</li><li>B &gt;= 4，额外创建 2^(B - 4) 个溢出桶</li></ol><p>在正常情况下，正常桶和溢出桶在内存中的存储空间是连续的（扩容过程中 或者 溢出桶较多时，可能会出现 正常桶 和 溢出桶 内存不连续的情况）。</p><h3><span id="334-读写操作">3.3.4 读写操作</span></h3><p>hashMap 的访问可以通过 下标、遍历 进行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 访问 hashMap<br><span class="hljs-regexp">//</span> 下标访问，需要提前知道 key<br>_ = hash[key]<br><br><span class="hljs-regexp">//</span> 遍历访问，访问全部的 key-value<br><span class="hljs-keyword">for</span> k, v := range hash &#123;<br>    <span class="hljs-regexp">//</span> get k, v<br>&#125;<br></code></pre></td></tr></table></figure><p>两种方式对应到的 底层函数 以及 实现原理 完全不同。</p><p>在这一部分，重点看下 通过下标 访问(读) hashMap；<strong>遍历访问依赖了 range 关键字</strong></p><p>hashMap 的 写，一般指的是 增加、删除 和 修改，增加 和 修改字段都使用 index 和 赋值语句，删除 hashMap 使用到关键字 delete：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 增加</span><br>hash<span class="hljs-selector-attr">[key]</span> = value<br><span class="hljs-comment">// 修改</span><br>hash<span class="hljs-selector-attr">[key]</span> = newValue<br><span class="hljs-comment">// 删除</span><br><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(hash, key)</span></span><br></code></pre></td></tr></table></figure><p>读写 hashMap 的过程中，可能会引起 hashMap 的 <strong>扩容、缩容</strong>，能够更加深入的理解到 hashMap 存储数据的原理</p><h4><span id="访问-oindexmap">访问 – OINDEXMAP</span></h4><p>golang compile 类型检查期间，hash[key] 以及类似的操作会被转化为 hashMap 的 OINDEXMAP 操作</p><p>SSA 中间代码生成阶段会在 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/walk.go#L1069">src/cmd/compile/internal/gc.walkexpr()</a> 函数中对 OINDEXMAP 操作进行转换：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> The result of walkexpr MUST be assigned back to n, e.g.<br><span class="hljs-regexp">//</span> n.Left = walkexpr(n.Left, init)<br><span class="hljs-keyword">func</span> walkexpr(n *Node, init *Nodes) *Node &#123;<br>    ......<br>    case OINDEXMAP:<br><span class="hljs-regexp">//</span> Replace m[k] with *map&#123;access1,assign&#125;(maptype, m, &amp;k)<br>n.Left = walkexpr(n.Left, init)<br>n.Right = walkexpr(n.Right, init)<br>map_ := n.Left<br>key := n.Right<br>t := map_.Type<br><span class="hljs-regexp">//</span> 判断是 赋值 assignment 还是 访问 access<br><span class="hljs-keyword">if</span> n.IndexMapLValue() &#123;<br>    <span class="hljs-regexp">//</span> m[k] = xxx   -&gt; 赋值语句<br>    <span class="hljs-regexp">//</span> 通过 mkcall1() 将节点改写为 OCALL 节点<br>    <span class="hljs-regexp">//</span> 调用的方法为 mapassign()<br><span class="hljs-regexp">//</span> This m[k] expression is on the left-hand side of an assignment.<br>fast := mapfast(t)<br><span class="hljs-keyword">if</span> fast == mapslow &#123;<br><span class="hljs-regexp">//</span> standard version takes key by reference.<br><span class="hljs-regexp">//</span> order.expr made sure key is addressable.<br>key = nod(OADDR, key, nil)<br>&#125;<br>n = mkcall1(mapfn(mapassign[fast], t), nil, init, typename(t), map_, key)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-regexp">//</span> xxx := m[k]  -&gt;  访问语句<br>    <span class="hljs-regexp">//</span> 通过 mkcall1() 将节点改写为 OCALL 节点<br><span class="hljs-regexp">//</span> m[k] is not the target of an assignment.<br>fast := mapfast(t)<br><span class="hljs-keyword">if</span> fast == mapslow &#123;<br><span class="hljs-regexp">//</span> standard version takes key by reference.<br><span class="hljs-regexp">//</span> order.expr made sure key is addressable.<br>key = nod(OADDR, key, nil)<br>&#125;<br>            <br>            <span class="hljs-regexp">//</span> 判断接收参数的个数<br><span class="hljs-keyword">if</span> w := t.Elem().Width; w &lt;= zeroValSize &#123;<br>    <span class="hljs-regexp">//</span> v := m[k] -&gt; 接受一个参数<br>    <span class="hljs-regexp">//</span> 不需要获取 ok 标记 -&gt; 调用 mapaccess1()<br>n = mkcall1(mapfn(mapaccess1[fast], t), types.NewPtr(t.Elem()), init, typename(t), map_, key)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-regexp">//</span> v, ok := m[k] -&gt; 接受两个参数<br>    <span class="hljs-regexp">//</span> 需要获取 ok 标记 -&gt; 调用 mapaccess2()<br>z := zeroaddr(w)<br>n = mkcall1(mapfn(<span class="hljs-string">&quot;mapaccess1_fat&quot;</span>, t), types.NewPtr(t.Elem()), init, typename(t), map_, key, z)<br>&#125;<br>&#125;<br>n.Type = types.NewPtr(t.Elem())<br>n.MarkNonNil() <span class="hljs-regexp">//</span> mapaccess1* and mapassign always return non-nil pointers.<br>n = nod(ODEREF, n, nil)<br>n.Type = t.Elem()<br>n.SetTypecheck(<span class="hljs-number">1</span>)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数执行逻辑为：</p><ol><li>首先根据 m[k] 和 赋值语句 := 的位置，来判断语句类型：赋值 assignment、访问 accessment</li><li>根据传入的参数个数，判断具体调用的 runtime 函数：runtime.mapaccess1(), runtime.mapaccess2()</li></ol><p>如下所示为，不同参数对应到的 运行时函数调用：</p><ol><li>当接受一个参数时，调用 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L394">runtime.mapaccess1()</a>，返回一个指向目标值的指针</li><li>当接受两个参数时，调用 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L452">runtime.mapaccess2()</a>，返回一个指向目标值的指针 以及 一个表示当前键对应的值是否存在的 bool 值<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 只获取值<br><span class="hljs-regexp">//</span> v := *mapaccess1(maptype, hash, &amp;key)<br>v := hash[key]<br><span class="hljs-regexp">//</span> 获取值 以及 ok 标记<br><span class="hljs-regexp">//</span> v, ok := *mapaccess2(maptype, hash, &amp;key)<br>v, ok := hash[key]<br></code></pre></td></tr></table></figure></li></ol><p><strong>runtime.mapaccess1()</strong><br>函数首先通过 hashMap 在初始化时设置的 hash Function、hashseed 计算得到当前 key 对应的 hash value</p><p>再通过 runtime.bucketMask() 和 runtime.add() 拿到该 key: value 所在的 桶序号<strong>（hash 低位）</strong> 和 tophash 的 8 位数字<strong>（hash 高 8 位）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.mapaccess1()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess1</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>    ......<br>alg := t.key.alg<br><span class="hljs-comment">// hash Function, hash seed 计算出 key 对应的 hash value</span><br>hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>m := bucketMask(h.B)<br><span class="hljs-comment">// 定位到 hash 所在的 桶 -&gt; hash 低位</span><br><span class="hljs-comment">// add() 通过偏移量计算得到 桶的位置 b</span><br>b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 获取 hash 高 8 位</span><br>top := tophash(hash)<br>bucketloop:<br>    <span class="hljs-comment">// 遍历 正常桶，然后遍历 溢出桶 overflow</span><br><span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;<br>    <span class="hljs-comment">// 比较 tophash是否匹配</span><br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;<br>    <span class="hljs-comment">// emptyRest -&gt; 桶的末尾，直接跳出，优化了查询速率</span><br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// tophash 匹配到</span><br>k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))<br><span class="hljs-comment">// 判断 key 是否匹配；可能存在 tophash 相等，但是 key 不相等的情况</span><br><span class="hljs-keyword">if</span> alg.equal(key, k) &#123;<br>    <span class="hljs-comment">// tophash, key 匹配后 -&gt; 获取 value</span><br>v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))<br><span class="hljs-keyword">return</span> v<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：hash Value 的低几位 用于 选择桶的序号，hash value 的高 8 位 用于桶内的比较，加速访问过程；这种设计能够减少同一个桶中有大量相等 tophash 的概率，进而提升效率。</p><p><strong>runtime.mapaccess2()</strong><br>runtime.mapaccess2() 在 runtime.mapaccess1() 的基础上，多返回了一个用于标识，键值是否存在的 bool 值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.mapaccess2()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess2</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-params">(unsafe.Pointer, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>    ......<br>alg := t.key.alg<br><span class="hljs-comment">// hash Function, hash seed 计算出 key 对应的 hash value</span><br>hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>m := bucketMask(h.B)<br><span class="hljs-comment">// 定位到 hash 所在的 桶 -&gt; hash 低位</span><br><span class="hljs-comment">// add() 通过偏移量计算得到 桶的位置 b</span><br>b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 获取 hash 高 8 位</span><br>top := tophash(hash)<br>bucketloop:<br>    <span class="hljs-comment">// 遍历 正常桶，然后遍历 溢出桶 overflow</span><br><span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;<br>    <span class="hljs-comment">// 比较 tophash是否匹配</span><br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;<br>    <span class="hljs-comment">// emptyRest -&gt; 桶的末尾，直接跳出，优化了查询速率</span><br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// tophash 匹配到</span><br>k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))<br><span class="hljs-comment">// 判断 key 是否匹配；可能存在 tophash 相等，但是 key 不相等的情况</span><br><span class="hljs-keyword">if</span> alg.equal(key, k) &#123;<br>    <span class="hljs-comment">// tophash, key 匹配后 -&gt; 获取 value</span><br>v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))<br><span class="hljs-comment">// 匹配到，返回 v, true</span><br><span class="hljs-keyword">return</span> v, <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 未匹配到，返回 nil, false</span><br><span class="hljs-keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="hljs-number">0</span>]), <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过布尔值 能够准确地知道，当 v == nil时，v 到底是哈希表中存储的元素 还是 该键对应的元素不存在（推荐使用这种方式）</p><p><strong>扩容过程中的访问</strong><br>golang 保证了在 hashMap 扩容期间，对 hashMap 的访问（参考 hashMap 扩容的实现）。</p><h4><span id="写入正常情况下的写入-oindexmap">写入（正常情况下的写入）- OINDEXMAP</span></h4><p>hashMap 的写入操作，可能会引起 hashMap 的扩容，正常情况下写入 以及 扩容过程中写入，实现逻辑有所不同。</p><p>在这一部分，只看正常情况下的 写入 hashMap 的操作</p><p>与 hashMap 的访问相同，golang compile 在类型检查期间，hash[key] 以及类似的操作会被转化为 hashMap 的 OINDEXMAP 操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 增加 key-value<br>hash[key] = value<br><span class="hljs-regexp">//</span> 更新 key-value<br>hash[key] = newValue<br></code></pre></td></tr></table></figure><p>SSA 中间代码生成阶段会在 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/walk.go#L1069">src/cmd/compile/internal/gc.walkexpr()</a> 函数中对 OINDEXMAP 操作进行转换；当 hash[key] 出现在赋值符号 = 左侧时，会将其看做 对 hashMap 的写入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// The result of walkexpr MUST be assigned back to n, e.g.</span><br><span class="hljs-comment">// n.Left = walkexpr(n.Left, init)</span><br>func walkexpr(n *Node, init *Nodes) *Node &#123;<br>    ......<br>    case OINDEXMAP:<br><span class="hljs-comment">// Replace m[k] with *map&#123;access1,assign&#125;(maptype, m, &amp;k)</span><br>n<span class="hljs-selector-class">.Left</span> = walkexpr(n<span class="hljs-selector-class">.Left</span>, init)<br>n<span class="hljs-selector-class">.Right</span> = walkexpr(n<span class="hljs-selector-class">.Right</span>, init)<br>map_ := n<span class="hljs-selector-class">.Left</span><br>key := n<span class="hljs-selector-class">.Right</span><br>t := map_<span class="hljs-selector-class">.Type</span><br><span class="hljs-comment">// 判断是 赋值 assignment 还是 访问 access</span><br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.IndexMapLValue</span>() &#123;<br>    <span class="hljs-comment">// m[k] = xxx   -&gt; 赋值语句</span><br>    <span class="hljs-comment">// 通过 mkcall1() 将节点改写为 OCALL 节点</span><br>    <span class="hljs-comment">// 调用的方法为 mapassign()</span><br><span class="hljs-comment">// This m[k] expression is on the left-hand side of an assignment.</span><br>fast := mapfast(t)<br><span class="hljs-keyword">if</span> fast == mapslow &#123;<br><span class="hljs-comment">// standard version takes key by reference.</span><br><span class="hljs-comment">// order.expr made sure key is addressable.</span><br>key = nod(OADDR, key, nil)<br>&#125;<br>n = mkcall1(mapfn(mapassign<span class="hljs-selector-attr">[fast]</span>, t), nil, init, typename(t), map_, key)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// xxx := m[k]  -&gt;  访问语句</span><br>    <span class="hljs-comment">// 通过 mkcall1() 将节点改写为 OCALL 节点</span><br><span class="hljs-comment">// m[k] is not the target of an assignment.</span><br>            ......<br>&#125;<br>n<span class="hljs-selector-class">.Type</span> = types<span class="hljs-selector-class">.NewPtr</span>(t<span class="hljs-selector-class">.Elem</span>())<br>n<span class="hljs-selector-class">.MarkNonNil</span>() <span class="hljs-comment">// mapaccess1* and mapassign always return non-nil pointers.</span><br>n = nod(ODEREF, n, nil)<br>n<span class="hljs-selector-class">.Type</span> = t<span class="hljs-selector-class">.Elem</span>()<br>n<span class="hljs-selector-class">.SetTypecheck</span>(<span class="hljs-number">1</span>)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 gc.walkexpr() 处理后，hashMap 的访问操作会被转换为 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L571">runtime.mapassign()</a> 函数的调用，由于代码较长，将其拆分为几个部分：</p><p>Step1: 函数根据传入的 key 计算出对应的 hash value, 进而确定 key 所在的 桶 buckets</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Like mapaccess, but allocates a slot for the key if it is not present in the map.</span><br><span class="hljs-comment">// 与 mapaccess() 实现相似，如果 key 不在当前的 map，会分配新的插槽，并将其插入到 map 中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapassign</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>    ......<br>alg := t.key.alg<br><span class="hljs-comment">// 计算 key 的 hash</span><br>hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>    <br>    <span class="hljs-comment">// 标志位：hashWriting = 4</span><br>    <span class="hljs-comment">// 表示已经有一个 goroutine 在访问，会触发 panic：concurrent map writes</span><br>    <span class="hljs-comment">// 检测是否出现了 并发访问</span><br>h.flags ^= hashWriting<br>    <br>again:<br>    <span class="hljs-comment">// 拿到 key 对应的桶的编号 -- 按位与</span><br>bucket := hash &amp; bucketMask(h.B)<br><span class="hljs-comment">// 指针 和 偏移量 拿到 key 对应的桶</span><br>b := (*bmap)(unsafe.Pointer(<span class="hljs-keyword">uintptr</span>(h.buckets) + bucket*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 计算 key 对应 hash 的高 8 位</span><br>top := tophash(hash)<br></code></pre></td></tr></table></figure><p>Step2: 首先寻找 匹配的 key-value；遍历比较桶中存储的 tophash 和 key 计算得到的 hash，如果找到了相同结果，就返回目标地址的指针</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">    var inserti *uint8          <span class="hljs-regexp">//</span> 指针，表示目标元素在桶中的索引<br>var insertk unsafe.Pointer  <span class="hljs-regexp">//</span> key 的地址，寻址计算可以得到 key<br>var val unsafe.Pointer      <span class="hljs-regexp">//</span> value 的地址，寻址计算可以得到 value<br>bucketloop:<br><span class="hljs-keyword">for</span> &#123;   <span class="hljs-regexp">//</span> 外层循环 -- 按照顺序遍历 正常桶 和 溢出桶 =&gt; 找到值之后，将其更新<br><span class="hljs-keyword">for</span> i := uintptr(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;   <span class="hljs-regexp">//</span> 内层循环 -- 按照顺序遍历当前桶的 tophash，key，value 值<br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;    <span class="hljs-regexp">//</span> key 的高 <span class="hljs-number">8</span> 位 hash 与 tophash 是否匹配<br>    <span class="hljs-regexp">//</span> isEmpty(b.tophash[i]) == true =&gt; 当前位置的 tophash 为空<br>    <span class="hljs-regexp">//</span> inserti == nil =&gt; inserti 只会赋值一次<br>    <span class="hljs-regexp">//</span> 设计思想：<br>    <span class="hljs-regexp">//</span> 在遍历的过程中，找到第一个空的位置，并对其进行记录<br>    <span class="hljs-regexp">//</span> 便于后续的 插入新值 操作<br><span class="hljs-keyword">if</span> isEmpty(b.tophash[i]) &amp;&amp; inserti == nil &#123;<br>inserti = &amp;b.tophash[i]<br>insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))<br>val = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))<br>&#125;<br><span class="hljs-regexp">//</span> emptyRest =&gt; 该位置后的 key-value 都可用（不需要再往后遍历），提前结束当前桶的遍历<br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> bucketloop<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-regexp">//</span> 若匹配，先由 指针和偏移量 计算得到 完整的 k 值<br>k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))<br><span class="hljs-regexp">//</span> 再次判断，完整的 k 值是否与 key 相等<br><span class="hljs-regexp">//</span> 可能存在 tophash = key-hash，但是 value 不相等的情况<br><span class="hljs-keyword">if</span> !alg.equal(key, k) &#123;<br><span class="hljs-keyword">continue</span>    <span class="hljs-regexp">//</span> 若不等，继续当前桶的遍历<br>&#125;<br><span class="hljs-regexp">//</span> k = key，匹配成功<br><span class="hljs-regexp">//</span> 通过 指针 和 偏移量 计算得到 value<br>val = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))<br>goto done   <span class="hljs-regexp">//</span> 跳转到 done，执行返回逻辑<br>&#125;<br><span class="hljs-regexp">//</span> 当前桶匹配失败 =&gt; 到下一个桶中搜寻<br>ovf := b.overflow(t)<br><span class="hljs-regexp">//</span> 判断是否存在溢出桶，若不存在溢出桶，跳出循环，执行写入操作<br><span class="hljs-keyword">if</span> ovf == nil &#123; <br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-regexp">//</span> 存在溢出桶，继续遍历<br>b = ovf<br>&#125;<br></code></pre></td></tr></table></figure><p>Step3: 如果未找到匹配的 <code>key-value</code> =&gt; 插入新值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">    <span class="hljs-regexp">//</span> inserti == nil =&gt; 遍历过程中未找到空的位置 =&gt; 桶满<br><span class="hljs-keyword">if</span> inserti == nil &#123;<br>    <span class="hljs-regexp">//</span> 通过 runtime.hmap.newoverflow() 创建新桶<br>    <span class="hljs-regexp">//</span> or 使用 runtime.hmap 预先在 noverflow 中创建的溢出桶<br>newb := h.newoverflow(t, b)<br><span class="hljs-regexp">//</span> 使用新桶中的第一个位置<br>inserti = &amp;newb.tophash[<span class="hljs-number">0</span>]<br><span class="hljs-regexp">//</span> 指针和偏移量计算 insertk 和 val<br>insertk = add(unsafe.Pointer(newb), dataOffset)<br>val = add(insertk, bucketCnt*uintptr(t.keysize))<br>&#125;<br><br>    <span class="hljs-regexp">//</span> inserti != nil =&gt; 桶中有空位，且 key-value 在 hashMap 中不存在<br>    <span class="hljs-regexp">//</span> 通过 runtime.typedmemmove() 将 key 移动到对应的空位<br>typedmemmove(t.key, insertk, key)<br>*inserti = top<br><span class="hljs-regexp">//</span> hashMap 元素数量 +<span class="hljs-number">1</span><br>h.count++<br>    <br>    <span class="hljs-regexp">//</span> key-value 在 hashMap 中存在 =&gt; 返回 value 对应的地址<br>    <span class="hljs-regexp">//</span> 并没有进行真正的 赋值<br>done:<br>return val<br>&#125;<br></code></pre></td></tr></table></figure><p>函数 <code>mapassign()</code> 返回的是 <code>val =&gt; value</code> 对应的地址，并没有真正的进行赋值。</p><p>真正的赋值操作是在编译期间插入的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 将 字符串 <span class="hljs-number">88</span> 写到 hashMap 中<br>hashMap[key] = <span class="hljs-string">&quot;88&quot;</span><br><br><span class="hljs-regexp">//</span> 编译期间<br><span class="hljs-regexp">//</span> 调用 runtime.mapassign_fast64()<br><span class="hljs-number">00018</span> (+<span class="hljs-number">5</span>) CALL runtime.mapassign_fast64(SB)<br><span class="hljs-regexp">//</span> <span class="hljs-number">24</span>(SP) 为函数返回的值地址 val<br><span class="hljs-number">00020</span> (<span class="hljs-number">5</span>) MOVQ <span class="hljs-number">24</span>(SP), DI               ;; DI = &amp;value<br><span class="hljs-regexp">//</span> LEAQ 指令将 字符串的地址存储到 寄存器 AX 中<br><span class="hljs-number">00026</span> (<span class="hljs-number">5</span>) LEAQ go.string.<span class="hljs-string">&quot;88&quot;</span>(SB), AX   ;; AX = &amp;<span class="hljs-string">&quot;88&quot;</span><br><span class="hljs-regexp">//</span> MOVQ 指令将 字符串<span class="hljs-string">&quot;88&quot;</span> 存储到目标地址，完成写入<br><span class="hljs-number">00027</span> (<span class="hljs-number">5</span>) MOVQ AX, (DI)                 ;; *DI = AX<br></code></pre></td></tr></table></figure><p>在正常情况下（不涉及扩容），写入 <code>hashMap</code> 中元素时的流程描述为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">一般情况：<br>1.根据key值，计算出<span class="hljs-built_in">hash</span>值<br>2.取<span class="hljs-built_in">hash</span>值低位与hmap.B取模来确定bucket的位置<br>3.取<span class="hljs-built_in">hash</span>值高位，在tophash数组中查询<br>4.如果tophash[i]中存储的<span class="hljs-built_in">hash</span>值与当前key的<span class="hljs-built_in">hash</span>值相同，则获取tophash[i]指向的key值进行比较，直接更新值<br>5.当前bucket没有找到，依次从溢出的bucket中寻找，找到后更新<br>6.如果未找到key，在bucket中寻找空余位置插入（源码中的设计是：找到顺序遍历的过程中第一个空余位置，或者新桶中的第一个位置）<br></code></pre></td></tr></table></figure><p>与 <code>hashMap</code> 的访问相同，需要考虑 扩容 过程中进行何种的设计和实现来保证哈希表的正常写入，相关的设计思想以及代码在分析 扩容 的过程中进行介绍。</p><h4><span id="扩容">扩容</span></h4><p>上一部分的 hashMap 读/写操作，只考虑了正常情况。随着 hashMap 中元素的逐渐增加，hashMap 的读写性能会恶化，所以我们需要更多的 bucket 和 更大的内存保证 hashMap 的读写性能：</p><p><strong>扩容条件</strong><br>在写入 hashMap 的 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L571">runtime.mapassign()</a> 函数，会在以下两种情况发生时触发 hashMap 的扩容，进而转到 扩容的入口 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L1026">runtime.hashGrow()</a>：</p><ol><li>负载因子 loadFactor &gt;= 6.5 -&gt; 平均每个 bucket 存储的 key:value 达到 6.5 个及以上</li><li>hashMap 使用了太多的溢出桶：overflow 数量大于 2^15 -&gt; overflow 数量超过 32768</li></ol><p>对应 <code>runtime.mapassign()</code> 源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.mapassign()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapassign</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br><br>again:<br>    bucket := hash &amp; bucketMask(h.B)<br><span class="hljs-keyword">if</span> h.growing() &#123;<br>    <span class="hljs-comment">// 数据的迁移由 growWork() 实际进行</span><br>growWork(t, h, bucket)<br>&#125;<br>......<br>    <br>    ......<br><br>bucketloop:<br>...<br><span class="hljs-comment">// !h.growing()：判断当前 hashMap 是否已经处于扩容状态，避免二次扩容</span><br><span class="hljs-comment">// overLoadFactor()：判断负载因子是否达到 6.5</span><br><span class="hljs-comment">// tooManyOverflowBuckets()：判断溢出桶的个数是否达到 2^15</span><br><span class="hljs-keyword">if</span> !h.growing() &amp;&amp; (overLoadFactor(h.count+<span class="hljs-number">1</span>, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) &#123;<br>    <span class="hljs-comment">// 转到 扩容操作</span><br>    <span class="hljs-comment">// runtime.hashGrow()</span><br>hashGrow(t, h)<br><span class="hljs-comment">// hashMap 扩容后，跳转到 again</span><br><span class="hljs-comment">// 进行 数据迁移</span><br><span class="hljs-keyword">goto</span> again<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-comment">// runtime.growWork()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">growWork</span><span class="hljs-params">(t *maptype, h *hmap, bucket <span class="hljs-keyword">uintptr</span>)</span></span> &#123;<br><span class="hljs-comment">// make sure we evacuate the oldbucket corresponding</span><br><span class="hljs-comment">// to the bucket we&#x27;re about to use</span><br><span class="hljs-comment">// 实际调用了 runtime.evacuate() 去进行 数据迁移</span><br>evacuate(t, h, bucket&amp;h.oldbucketmask())<br>    <br><span class="hljs-comment">// evacuate one more oldbucket to make progress on growing</span><br><span class="hljs-keyword">if</span> h.growing() &#123;<br>evacuate(t, h, h.nevacuate)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据扩容的条件，分为了两种不同的扩容方式：</p><ol><li>等量扩容：溢出桶太多导致 sameSizeGrow()；一旦 hashMap 中出现了过多的溢出桶，会创建 <strong>与当前桶相同数量的</strong> 新桶保存数据，gc 会清理老的溢出桶，释放内存</li><li>增量扩容：loadFactor 达到了阈值，会创建 <strong>当前桶双倍数量的</strong> 新桶，oldBucket 中的数据会疏散到 newBucket 中<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">// func hashGrow()<br>func hashGrow(t *maptype, h *hmap) &#123;<br><span class="hljs-attribute">bigger</span> := uint8(1)<br>if !overLoadFactor(h<span class="hljs-variable">.count</span>+1, h<span class="hljs-variable">.B</span>) &#123;<br>bigger = 0<br>h<span class="hljs-variable">.flags</span> |= sameSizeGrow<br>&#125;<br>oldbuckets := h<span class="hljs-variable">.buckets</span><br>// makeBucketArray() 创建新的桶<br>newbuckets, nextOverflow := makeBucketArray(t, h<span class="hljs-variable">.B</span>+bigger, nil)<br><br>h<span class="hljs-variable">.B</span> += bigger<br>h<span class="hljs-variable">.flags</span> = flags<br>// 指向 旧桶<br>h<span class="hljs-variable">.oldbuckets</span> = oldbuckets<br>// 指向 新桶<br>h<span class="hljs-variable">.buckets</span> = newbuckets<br>h<span class="hljs-variable">.nevacuate</span> = 0<br>h<span class="hljs-variable">.noverflow</span> = 0<br>    // 指向旧的 溢出桶<br>h<span class="hljs-variable">.extra</span><span class="hljs-variable">.oldoverflow</span> = h<span class="hljs-variable">.extra</span><span class="hljs-variable">.overflow</span><br>h<span class="hljs-variable">.extra</span><span class="hljs-variable">.overflow</span> = nil<br>// 指向新的 溢出桶<br>h<span class="hljs-variable">.extra</span><span class="hljs-variable">.nextOverflow</span> = nextOverflow<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>在 runtime.hashGrow() 中，看不出 两种扩容方式的区别，该函数只是创建了新的桶，并没有对数据进行拷贝和转移。</p><p>通过分析以上代码可知，拷贝和迁移数据的过程是在 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/map.go#L1137">runtime.evacuate()</a> 中完成的，对传入桶中的元素进行再分配：</p><p>对于增量扩容的 case，hashMap 容量翻倍，每个旧桶中的元素会都分流到新创建的两个桶中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// func evacuate()</span><br>func evacuate(t *maptype, h *hmap, oldbucket uintptr) &#123;<br><span class="hljs-selector-tag">b</span> := (*bmap)(add(h<span class="hljs-selector-class">.oldbuckets</span>, oldbucket*uintptr(t.bucketsize)))<br>newbit := h<span class="hljs-selector-class">.noldbuckets</span>()<br><span class="hljs-keyword">if</span> !evacuated(b) &#123;<br>    <span class="hljs-comment">// runtime.evacDst 结构体</span><br>    <span class="hljs-comment">// 保存分配上下文</span><br>    <span class="hljs-comment">// 记录 分流 到 新桶 的位置</span><br><span class="hljs-selector-tag">var</span> xy <span class="hljs-selector-attr">[2]</span>evacDst<br><span class="hljs-comment">// 增量扩容，将一个旧桶中的数据，分流到两个新桶</span><br><span class="hljs-comment">// x -&gt; oldBucket 第一个数据</span><br><span class="hljs-comment">// 分流到新桶 xy[0]</span><br>x := &amp;xy<span class="hljs-selector-attr">[0]</span><br>x<span class="hljs-selector-class">.b</span> = (*bmap)(add(h<span class="hljs-selector-class">.buckets</span>, oldbucket*uintptr(t.bucketsize)))<br>x<span class="hljs-selector-class">.k</span> = add(unsafe<span class="hljs-selector-class">.Pointer</span>(x.b), dataOffset)<br>x<span class="hljs-selector-class">.v</span> = add(x<span class="hljs-selector-class">.k</span>, bucketCnt*uintptr(t.keysize))<br>        <br>        <span class="hljs-comment">// y -&gt; oldBucket 第二个数据</span><br>        <span class="hljs-comment">// 分流到新桶 xy[1]</span><br>y := &amp;xy<span class="hljs-selector-attr">[1]</span><br>y<span class="hljs-selector-class">.b</span> = (*bmap)(add(h<span class="hljs-selector-class">.buckets</span>, (oldbucket+newbit)*uintptr(t.bucketsize)))<br>y<span class="hljs-selector-class">.k</span> = add(unsafe<span class="hljs-selector-class">.Pointer</span>(y.b), dataOffset)<br>y<span class="hljs-selector-class">.v</span> = add(y<span class="hljs-selector-class">.k</span>, bucketCnt*uintptr(t.keysize))<br></code></pre></td></tr></table></figure><p>对于 等量扩容，<strong>桶的数量未变</strong>，旧桶与新桶是一对一的关系；可以看做重新做了一遍 增量扩容操作， 把松散的键值对重新排列一次，使得 bucket 的利用率更高：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go">        ....<br>        <span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;<br>k := add(unsafe.Pointer(b), dataOffset)<br>v := add(k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; bucketCnt; i, k, v = i+<span class="hljs-number">1</span>, add(k, <span class="hljs-keyword">uintptr</span>(t.keysize)), add(v, <span class="hljs-keyword">uintptr</span>(t.valuesize)) &#123;<br>top := b.tophash[i]<br>k2 := k<br><span class="hljs-keyword">var</span> useY <span class="hljs-keyword">uint8</span><br>hash := t.key.alg.hash(k2, <span class="hljs-keyword">uintptr</span>(h.hash0))<br><span class="hljs-keyword">if</span> hash&amp;newbit != <span class="hljs-number">0</span> &#123;<br>useY = <span class="hljs-number">1</span><br>&#125;<br>b.tophash[i] = evacuatedX + useY<br><span class="hljs-comment">// 只使用了 xy[0] 或者 xy[1]</span><br>dst := &amp;xy[useY]<br><br><span class="hljs-keyword">if</span> dst.i == bucketCnt &#123;<br>dst.b = h.newoverflow(t, dst.b)<br>dst.i = <span class="hljs-number">0</span><br>dst.k = add(unsafe.Pointer(dst.b), dataOffset)<br>dst.v = add(dst.k, bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize))<br>&#125;<br>dst.b.tophash[dst.i&amp;(bucketCnt<span class="hljs-number">-1</span>)] = top<br><span class="hljs-comment">// 将 key, value 写入到 新的桶</span><br>typedmemmove(t.key, dst.k, k)<br>typedmemmove(t.elem, dst.v, v)<br>dst.i++<br>dst.k = add(dst.k, <span class="hljs-keyword">uintptr</span>(t.keysize))<br>dst.v = add(dst.v, <span class="hljs-keyword">uintptr</span>(t.valuesize))<br>&#125;<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>runtime.evacuate() 最后调用 <a href="https://github.com/golang/go/blob/36f30ba289e31df033d100b2adb4eaf557f05a34/src/runtime/map.go#L1242">runtime.advanceEvacuationMark()</a> 增加 hashMap 的 nevacuate 计数器（nevacuate=1 迁移完成），并在所有的旧桶 oldBuckets 都被分流后，清空 hashMap 的 oldbuckets 和 oldoverflow</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// runtime.advanceEvacuationMark()</span><br>func advanceEvacuationMark(h *hmap, t *maptype, <span class="hljs-keyword">new</span><span class="hljs-type">bit</span> uintptr) &#123;<br>h.nevacuate++<br><span class="hljs-comment">// Experiments suggest that 1024 is overkill by at least an order of magnitude.</span><br><span class="hljs-comment">// Put it in there as a safeguard anyway, to ensure O(1) behavior.</span><br>stop :<span class="hljs-type"></span>= h.nevacuate + <span class="hljs-number">1024</span><br><span class="hljs-keyword">if</span> stop &gt; <span class="hljs-keyword">new</span><span class="hljs-type">bit</span> &#123;<br>stop = <span class="hljs-keyword">new</span><span class="hljs-type">bit</span><br>&#125;<br><span class="hljs-keyword">for</span> h.nevacuate != stop &amp;&amp; bucketEvacuated(t, h, h.nevacuate) &#123;<br>h.nevacuate++<br>&#125;<br><span class="hljs-keyword">if</span> h.nevacuate == <span class="hljs-keyword">new</span><span class="hljs-type">bit</span> &#123; <span class="hljs-comment">// newbit == # of oldbuckets</span><br><span class="hljs-comment">// Growing is all done. Free old main bucket array.</span><br>h.oldbuckets = nil<br><span class="hljs-comment">// Can discard old overflow buckets as well.</span><br><span class="hljs-comment">// If they are still referenced by an iterator,</span><br><span class="hljs-comment">// then the iterator holds a pointers to the slice.</span><br><span class="hljs-keyword">if</span> h.extra != nil &#123;<br>h.extra.oldoverflow = nil<br>&#125;<br>h.flags &amp;^= sameSizeGrow<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>hashMap 扩容中的访问 runtime.mapaccess1()</strong><br>当前 hashMap 处于扩容状态时，oldbucket != nil -&gt; 定位到旧桶，并在该桶没有被分流时，从中获取 key:value；若未找到，就去新桶 newbucket 中找：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess1</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>...<br>alg := t.key.alg<br>hash := alg.hash(key, <span class="hljs-keyword">uintptr</span>(h.hash0))<br>m := bucketMask(h.B)<br>b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-comment">// 旧桶 oldbuckets 存在</span><br><span class="hljs-keyword">if</span> c := h.oldbuckets; c != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> !h.sameSizeGrow() &#123;<br>m &gt;&gt;= <span class="hljs-number">1</span><br>&#125;<br>oldb := (*bmap)(add(c, (hash&amp;m)*<span class="hljs-keyword">uintptr</span>(t.bucketsize)))<br><span class="hljs-keyword">if</span> !evacuated(oldb) &#123;<br>b = oldb<br>&#125;<br>&#125;<br>bucketloop:<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>hashMap 扩容中的写入 runtime.mapassign()</strong><br>当前 hashMap 正处于扩容状态时，<strong>每次向 hashMap 写入值时，都会触发 runtime.growWork() 增量拷贝哈希表的内容</strong>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span> mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer &#123;<br>...<br>again:<br>    <span class="hljs-regexp">//</span> 定位到 桶<br>bucket := hash &amp; bucketMask(h.B)<br><span class="hljs-keyword">if</span> h.growing() &#123;<br>    <span class="hljs-regexp">//</span> 若当前 hashMap 正在扩容，增量拷贝<br>growWork(t, h, bucket)<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>除了写入操作之外，删除操作也会在哈希表扩容期间触发 runtime.growWork，触发的方式和代码与这里的逻辑几乎完全相同，都是计算当前值所在的桶，然后拷贝桶中的元素。</p><h4><span id="删除-delete-odelete">删除 – delete() – ODELETE</span></h4><p>在编译期间，delete() 会被转换为 ODELETE 节点，<a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/walk.go#L771">src/cmd/compile/internal/gc.walkexpr()</a> 会将 ODELETE 节点转换成 runtime.mapdelete(), mapdelete_faststr(), mapdelete_fast32() 和 mapdelete_fast64() 中的一个</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// runtime.walkexpr()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkexpr</span>(n <span class="hljs-operator">*</span><span class="hljs-type">Node</span>, <span class="hljs-keyword">init</span> <span class="hljs-operator">*</span><span class="hljs-type">Nodes</span>)</span> <span class="hljs-operator">*</span><span class="hljs-type">Node</span> &#123;<br>    <span class="hljs-operator">......</span><br><span class="hljs-keyword">switch</span> n.<span class="hljs-type">Op</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">ODELETE</span>:<br><span class="hljs-keyword">init</span>.<span class="hljs-type">AppendNodes</span>(<span class="hljs-operator">&amp;</span>n.<span class="hljs-type">Ninit</span>)<br>map_ :<span class="hljs-operator">=</span> n.<span class="hljs-type">List</span>.<span class="hljs-type">First</span>()<br>key :<span class="hljs-operator">=</span> n.<span class="hljs-type">List</span>.<span class="hljs-type">Second</span>()<br>map_ <span class="hljs-operator">=</span> walkexpr(map_, <span class="hljs-keyword">init</span>)<br>key <span class="hljs-operator">=</span> walkexpr(key, <span class="hljs-keyword">init</span>)<br><br>t :<span class="hljs-operator">=</span> map_.<span class="hljs-keyword">Type</span><br>fast :<span class="hljs-operator">=</span> mapfast(t)<br><span class="hljs-keyword">if</span> fast <span class="hljs-operator">==</span> mapslow &#123;<br>key <span class="hljs-operator">=</span> nod(<span class="hljs-type">OADDR</span>, key, <span class="hljs-literal">nil</span>)<br>&#125;<br><span class="hljs-comment">// 调用 mkcall1() 替换为 OCALL 节点</span><br><span class="hljs-comment">// 实际调用的函数为 runtime.mapfndel()</span><br>n <span class="hljs-operator">=</span> mkcall1(mapfndel(mapdelete[fast], t), <span class="hljs-literal">nil</span>, <span class="hljs-keyword">init</span>, typename(t), map_, key)<br>&#125;<br><span class="hljs-operator">......</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以 <a href="https://github.com/golang/go/blob/36f30ba289e31df033d100b2adb4eaf557f05a34/src/runtime/map.go#L685">runtime.mapdelete()</a> 为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapdelete</span><span class="hljs-params">(t *maptype, h *hmap, key unsafe.Pointer)</span></span> &#123;<br>...<br><span class="hljs-keyword">if</span> h.growing() &#123;<br>growWork(t, h, bucket)<br>&#125;<br>...<br>search:<br><span class="hljs-keyword">for</span> ; b != <span class="hljs-literal">nil</span>; b = b.overflow(t) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>); i &lt; bucketCnt; i++ &#123;<br><span class="hljs-keyword">if</span> b.tophash[i] != top &#123;<br><span class="hljs-keyword">if</span> b.tophash[i] == emptyRest &#123;<br><span class="hljs-keyword">break</span> search<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br>k := add(unsafe.Pointer(b), dataOffset+i*<span class="hljs-keyword">uintptr</span>(t.keysize))<br>k2 := k<br><span class="hljs-keyword">if</span> !alg.equal(key, k2) &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>*(*unsafe.Pointer)(k) = <span class="hljs-literal">nil</span><br>v := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="hljs-keyword">uintptr</span>(t.keysize)+i*<span class="hljs-keyword">uintptr</span>(t.valuesize))<br>*(*unsafe.Pointer)(v) = <span class="hljs-literal">nil</span><br>b.tophash[i] = emptyOne<br>...<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>哈希表的删除逻辑与写入逻辑很相似，只是触发哈希的删除需要使用关键字，如果在删除期间遇到了哈希表的扩容，就会分流桶中的元素，分流结束之后会找到桶中的目标元素完成键值对的删除工作。</p><h3><span id="conclusion">Conclusion</span></h3><ol><li>sameGrow 机制，在溢出桶较多时，整理 hashMap 的内存，减少空间的占用</li><li>扩容机制的实现 -&gt; 增量，在写入、删除时 顺带迁移数据</li><li>扩容过程中的读、写、删除逻辑</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.2 数据结构 -- 切片 Slice</title>
    <link href="/2021/12/30/3-2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%88%87%E7%89%87-Slice/"/>
    <url>/2021/12/30/3-2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%88%87%E7%89%87-Slice/</url>
    
    <content type="html"><![CDATA[<h2><span id="32-切片">3.2 切片</span></h2><p>切片：动态数组，长度不固定，可以向切片中追加元素，在容量不足时自动扩容</p><p>Golang 声明 切片 与 数组 类似，区别在于 切片只需要指定切片中元素类型：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[]</span><span class="hljs-built_in">int</span><br><span class="hljs-string">[]</span><span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>联系到 数组 在 <strong>编译期间</strong> &amp; <strong>运行时</strong> 的定义，切片在 编译期间的生成类型 只会包含 切片 中的元素类型。</p><p><a href="https://github.com/golang/go/blob/46ab0c0c0474d38d9b924b2428f20c6da58c85fa/src/cmd/compile/internal/types/type.go#L493">src/cmd/compile/internal/types.NewSlice()</a> 就是编译期间 用于创建 切片 类型 的函数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">types</span>.NewSlice() 返回切片类型 TSLICE<br>// NewSlice <span class="hljs-keyword">returns</span> the <span class="hljs-keyword">slice</span> <span class="hljs-keyword">Type</span> <span class="hljs-keyword">with</span> element <span class="hljs-keyword">type</span> elem.<br>func NewSlice(elem *<span class="hljs-keyword">Type</span>) *<span class="hljs-keyword">Type</span> &#123;<br><span class="hljs-keyword">if</span> t := elem.Cache.<span class="hljs-keyword">slice</span>; t != nil &#123;<br><span class="hljs-keyword">if</span> t.Elem() != elem &#123;<br>Fatalf(&quot;elem mismatch&quot;)<br>&#125;<br><span class="hljs-keyword">return</span> t<br>&#125;<br>    // 新建 TSLICE 结构体<br>t := <span class="hljs-built_in">New</span>(TSLICE)<br>// 切片的 元素类型 在 编译期间 确定<br>// Extra 字段 -&gt; <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Slice</span> 类型<br>// 存储 Elem 元素类型<br>t.Extra = <span class="hljs-keyword">Slice</span>&#123;Elem: elem&#125;<br>elem.Cache.<span class="hljs-keyword">slice</span> = t<br><span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="321-数据结构">3.2.1 数据结构</span></h3><p>切片在编译期间对应到 <a href="https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/cmd/compile/internal/types/type.go#L346">src/cmd/compile/internal/types.Slice</a></p><p>在 runtime运行时 使用 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/reflect/value.go#L1994">src/reflect.SliceHeader</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">// types.Slice</span><br><span class="hljs-comment">// Slice contains Type fields specific to slice types.</span><br><span class="hljs-built_in">type</span> Slice <span class="hljs-keyword">struct</span> &#123;<br>Elem *<span class="hljs-built_in">Type</span> <span class="hljs-comment">// element type</span><br>&#125;<br><br><span class="hljs-comment">// reflect.SliceHeader</span><br><span class="hljs-comment">// SliceHeader is the runtime representation of a slice.</span><br><span class="hljs-comment">// It cannot be used safely or portably and its representation may</span><br><span class="hljs-comment">// change in a later release.</span><br><span class="hljs-comment">// Moreover, the Data field is not sufficient to guarantee the data</span><br><span class="hljs-comment">// it references will not be garbage collected, so programs must keep</span><br><span class="hljs-comment">// a separate, correctly typed pointer to the underlying data.</span><br><span class="hljs-built_in">type</span> SliceHeader <span class="hljs-keyword">struct</span> &#123;<br>Data uintptr <span class="hljs-comment">// 指向 底层数组 的指针</span><br>Len  int <span class="hljs-comment">// 当前切片 的长度</span><br>Cap  int <span class="hljs-comment">// 当前切片的容量 -&gt; Data 数组的大小</span><br>&#125;<br></code></pre></td></tr></table></figure><p>切片 引入了 一个抽象层，提供了对数组中部分连续片段的 <strong>引用</strong> -&gt; 可以修改 长度 和 范围</p><p>当切片底层数组长度不足时，触发扩容 -&gt; 对底层数组的扩容，在上层看来，切片没有变化</p><h4><span id="数组-和-切片-的实现区别">数组 和 切片 的实现区别</span></h4><p>数组对应到内存中一段固定且连续的地址，golang compile 在编译期间 通过读写内存中的特定位置，简化了 获取数组大小、读写数组元素的操作。</p><p>切片在 编译期间 能够确定 元素类型，在运行时才会确定内容 -&gt; 对于切片的操作，如 访问，扩容等 都要依赖到 golang runtime</p><h3><span id="322-初始化">3.2.2 初始化</span></h3><p>golang 包含了三种 初始化切片 的方式：</p><ol><li>通过下标的方式，获得数组或者切片的一部分</li><li>使用字面量初始化切片</li><li>使用 make 关键字 创建切片</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 下标</span><br>s := arr[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>s := slice[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br><span class="hljs-comment">// 字面量</span><br>s := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-comment">// make</span><br>s := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h4><span id="下标">下标</span></h4><p>通过下标创建切片 是 最接近 汇编语言的方式，golang compile 会将 arr[0:3] 或者 slice[0:3] 等语句转换成 <strong>OpSliceMake</strong> 操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// sample code</span><br><span class="hljs-keyword">package</span> opslicemake<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newSlice</span><span class="hljs-params">()</span> []<span class="hljs-title">int</span></span> &#123;<br>    arr := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    slice := arr[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> slice<br>&#125;<br></code></pre></td></tr></table></figure><p>指定 GOSSAFUNC=newSlice 对其进行编译：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">GOSSAFUNC=newSlice <span class="hljs-keyword">go</span> build opslicemake.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p>slice := arr[0:1] 语句在 “decompose builtin” 阶段对应的代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// OpSliceMake -&gt; ssa 中的 SliceMake<br>v26 (+<span class="hljs-number">5</span>) = SliceMake &lt;[]<span class="hljs-type">int</span>&gt; v10 v13 v16<br>v27 (+<span class="hljs-number">6</span>) = MakeResult &lt;[]<span class="hljs-type">int</span>,mem&gt; v26 v12<br><br><span class="hljs-type">name</span> &amp;arr[*[<span class="hljs-number">3</span>]<span class="hljs-type">int</span>]: v10<br><span class="hljs-type">name</span> <span class="hljs-keyword">slice</span>.ptr[*<span class="hljs-type">int</span>]: v10<br><span class="hljs-type">name</span> <span class="hljs-keyword">slice</span>.len[<span class="hljs-type">int</span>]: v13<br><span class="hljs-type">name</span> <span class="hljs-keyword">slice</span>.cap[<span class="hljs-type">int</span>]: v16<br></code></pre></td></tr></table></figure><p>SliceMake 接收四个参数创建新的切片：元素类型、数组指针、切片大小、切片容量</p><p>使用 下标 创建，不会 拷贝原数组 or 原切片 中的数据，只创建了一个指向原数组/切片 的 切片结构体</p><h4><span id="字面量">字面量</span></h4><p>使用 字面量 创建新的切片时， <a href="https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/cmd/compile/internal/gc/sinit.go#L590">src/cmd/compile/internal/gc.slicelit()</a> 函数会在编译期间对其进行处理：</p><ol><li>根据切片中的 元素数量 对底层数组的大小进行推断 并 创建一个数组 vstat</li><li>将 字面量 元素 存储到 初始化的数组中( 静态存储区 )</li><li>创建一个同样指向 []t{…} 类型的数组指针 vauto</li><li>将 静态存储区 的数组 vstat 赋值给 vauto 指针所在的地址</li><li>通过 var = vauto[:] 获取切片<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs smali">func slicelit(ctxt initContext, n *Node, var_ *Node, init *Nodes) &#123;<br>    // 根据 类型 和 元素数量 初始化一个 底层数组<br>// make an<span class="hljs-built_in"> array </span>type corresponding the number of elements we have<br>t<span class="hljs-keyword"> :</span>= types.NewArray(n.Type.Elem(), n.Right.Int64Val())<br>dowidth(t)<br><br>......<br><br>// recipe for var = []t&#123;...&#125;<br>// 1. make a<span class="hljs-keyword"> static</span><span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>//var vstat [...]t<br>// 2. assign (data statements) the constant part<br>//vstat = constpart&#123;&#125;<br>// 3. make an auto pointer to<span class="hljs-built_in"> array </span>and allocate heap to it<br>//var vauto *[...]t = new([...]t)<br>// 4. copy the<span class="hljs-keyword"> static</span><span class="hljs-built_in"> array </span>to the auto<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>//*vauto = vstat<br>// 5. for each dynamic part assign to the<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>//vauto[i] = dynamic part<br>// 6. assign slice of allocated heap to var<br>//var = vauto[:]<br>//<br>// an optimization is done<span class="hljs-built_in"> if </span>there is no constant part<br>//3. var vauto *[...]t = new([...]t)<br>//5. vauto[i] = dynamic part<br>//6. var = vauto[:]<br><br>//<span class="hljs-built_in"> if </span>the literal contains constants,<br>// make<span class="hljs-keyword"> static</span> initialized<span class="hljs-built_in"> array </span>(1),(2)<br>// vstat -&gt; 静态数组<br>var vstat *Node<br>    <br>mode<span class="hljs-keyword"> :</span>= getdyn(n, true)<br><span class="hljs-built_in">if </span>mode&amp;initConst != 0 &amp;&amp; !isSmallSliceLit(n) &#123;<br><span class="hljs-built_in">if </span>ctxt == inInitFunction &#123;<br>vstat = readonlystaticname(t)<br>&#125; else &#123;<br>vstat =<span class="hljs-keyword"> static</span>name(t)<br>&#125;<br>// fixedlit() 使用数据初始化 vstat<br>fixedlit(ctxt, initKindStatic, n, vstat, init)<br>&#125;<br><br>    // 创建一个同样指向 []t&#123;...&#125; 类型的数组指针<br>// make<span class="hljs-built_in"> new </span>auto *array (3 declare)<br>vauto<span class="hljs-keyword"> :</span>= temp(types.NewPtr(t))<br><br>// set auto to point at<span class="hljs-built_in"> new </span>temp<span class="hljs-built_in"> or </span>heap (3 assign)<br>var a *Node<br><br><span class="hljs-built_in">if </span>x<span class="hljs-keyword"> :</span>= prealloc[n]; x != nil &#123;<br><span class="hljs-keyword">        .</span>.....<br>&#125;<br><br>a = nod(OAS, vauto, a)<br>a = typecheck(a, ctxStmt)<br>a = walkexpr(a, init)<br>init.Append(a)<br>    <br>    // 4. 将 静态存储区的数组 vstat 赋值给 vauto <br><span class="hljs-built_in">if </span>vstat != nil &#123;<br>// copy<span class="hljs-keyword"> static</span> to heap (4)<br>a = nod(ODEREF, vauto, nil)<br><br>a = nod(OAS, a, vstat)<br>a = typecheck(a, ctxStmt)<br>a = walkexpr(a, init)<br>init.Append(a)<br>&#125;<br><br>// 5. for each dynamic part assign to the<span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>var index int64<br>for _, value<span class="hljs-keyword"> :</span>= range n.List.Slice() &#123;<br>......<br>&#125;<br><br>    // var = vauto[:]<br>// make slice out of heap (6)<br>a = nod(OAS, var_, nod(OSLICE, vauto, nil))<br><br>a = typecheck(a, ctxStmt)<br>a = orderStmtInPlace(a, map[string][]*Node&#123;&#125;)<br>// 函数展开为 代码片段<br>a = walkstmt(a)<br>init.Append(a)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>以 []int[1, 2, 3] 为例，创建新的切片时，在编译期间会将其展开为如下所示的代码片段：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Step 1</span><br><span class="hljs-selector-tag">var</span> vstat <span class="hljs-selector-attr">[3]</span>int<br><span class="hljs-comment">// Step 2</span><br>vstat<span class="hljs-selector-attr">[0]</span> = <span class="hljs-number">1</span><br>vstat<span class="hljs-selector-attr">[1]</span> = <span class="hljs-number">2</span><br>vstat<span class="hljs-selector-attr">[2]</span> = <span class="hljs-number">3</span><br><span class="hljs-comment">// Step 3</span><br><span class="hljs-selector-tag">var</span> vauto *<span class="hljs-selector-attr">[3]</span>int = new(<span class="hljs-selector-attr">[3]</span>int)<br><span class="hljs-comment">// Step 4</span><br>*vauto = vstat<br><span class="hljs-comment">// Step 5</span><br>slice := vauto<span class="hljs-selector-attr">[:]</span><br></code></pre></td></tr></table></figure><h4><span id="make">make</span></h4><p>make 关键字创建切片时，大部分的工作都需要 runtime 的参与，在 类型检查 期间，<strong>gc.typecheck1()</strong> 会校验参数、改写类型：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func typecheck1(n *Node, <span class="hljs-attribute">top</span> int) (res *Node) &#123;<br>switch n<span class="hljs-selector-class">.Op</span> &#123;<br>...<br><span class="hljs-comment">// make 关键字 逻辑入口</span><br>case OMAKE:<br>args := n<span class="hljs-selector-class">.List</span><span class="hljs-selector-class">.Slice</span>()<br><br><span class="hljs-selector-tag">i</span> := <span class="hljs-number">1</span><br>switch t<span class="hljs-selector-class">.Etype</span> &#123;<br><span class="hljs-comment">// make(TSLICE) 切片处理入口</span><br>case TSLICE:<br>    <span class="hljs-comment">// 校验 len 是否传入</span><br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">i</span> &gt;= len(args) &#123;<br>yyerror(<span class="hljs-string">&quot;missing len argument to make(%v)&quot;</span>, t)<br>return n<br>&#125;<br><br>l = args<span class="hljs-selector-attr">[i]</span><br>i++<br><span class="hljs-selector-tag">var</span> r *Node<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">i</span> &lt; len(args) &#123;<br>r = args<span class="hljs-selector-attr">[i]</span><br>&#125;<br>...<br><span class="hljs-comment">// 校验 len cap 是否合理</span><br><span class="hljs-keyword">if</span> Isconst(l, CTINT) &amp;&amp; r != nil &amp;&amp; Isconst(r, CTINT) &amp;&amp; l<span class="hljs-selector-class">.Val</span>()<span class="hljs-selector-class">.U</span>.(*Mpint)<span class="hljs-selector-class">.Cmp</span>(r<span class="hljs-selector-class">.Val</span>()<span class="hljs-selector-class">.U</span>.(*Mpint)) &gt; <span class="hljs-number">0</span> &#123;<br>yyerror(<span class="hljs-string">&quot;len larger than cap in make(%v)&quot;</span>, t)<br>return n<br>&#125;<br>            <span class="hljs-comment">// 写入 len, cap</span><br>n<span class="hljs-selector-class">.Left</span> = l<br>n<span class="hljs-selector-class">.Right</span> = r<br><span class="hljs-comment">// 节点类型 改写为 OMAKESLICE</span><br>n<span class="hljs-selector-class">.Op</span> = OMAKESLICE<br>&#125;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类型检查后，在 SSA 中间代码生成阶段，会由 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/walk.go#L411">cmd/compile/internal/gc.walkexpr()</a> 按照以下逻辑处理：</p><ol><li>切片的大小和容量是否足够小</li><li>切片是否发生了逃逸，根据逃逸情况 和 元素数量，确定其具体初始化方式<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">未发生逃逸，调用 types<span class="hljs-selector-class">.NewArray</span>() 创建底层数组：<br>节点类型改写为：OSLICE ，转换为 OpSliceMake 操作<br><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">(slice)</span></span> &lt;= <span class="hljs-number">4</span> -&gt; 底层数组 创建到 栈 上<br><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">(slice)</span></span> &gt; <span class="hljs-number">4</span> -&gt; 底层数组创建到 静态存储区，在运行时取出<br><br>发生逃逸：<br>节点类型改写为：OSLICEHEADER<br>通过 mkcall1() 替换为 OCALL 节点，调用的方法为 runtime<span class="hljs-selector-class">.makeslice</span>()<br></code></pre></td></tr></table></figure></li></ol><p>具体源码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// The result of walkexpr MUST be assigned back to n, e.g.</span><br><span class="hljs-comment">// n.Left = walkexpr(n.Left, init)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkexpr</span><span class="hljs-params">(n *Node, init *Nodes)</span> *<span class="hljs-title">Node</span></span> &#123;<br>    ......<br>    <span class="hljs-comment">// OMAKESLICE -&gt; make 关键字 创建切片</span><br>    <span class="hljs-keyword">case</span> OMAKESLICE:<br>l := n.Left<br>r := n.Right<br><span class="hljs-keyword">if</span> r == <span class="hljs-literal">nil</span> &#123;<br>r = safeexpr(l, init)<br>l = r<br>&#125;<br>t := n.Type<br><span class="hljs-keyword">if</span> t.Elem().NotInHeap() &#123;<br>yyerror(<span class="hljs-string">&quot;%v can&#x27;t be allocated in Go; it is incomplete (or unallocatable)&quot;</span>, t.Elem())<br>&#125;<br><span class="hljs-comment">// 未发生逃逸</span><br><span class="hljs-keyword">if</span> n.Esc == EscNone &#123;<br><span class="hljs-keyword">if</span> why := heapAllocReason(n); why != <span class="hljs-string">&quot;&quot;</span> &#123;<br>Fatalf(<span class="hljs-string">&quot;%v has EscNone, but %v&quot;</span>, n, why)<br>&#125;<br><span class="hljs-comment">// var arr [r]T</span><br><span class="hljs-comment">// n = arr[:l]</span><br>i := indexconst(r)<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span> &#123;<br>Fatalf(<span class="hljs-string">&quot;walkexpr: invalid index %v&quot;</span>, r)<br>&#125;<br><br><span class="hljs-comment">// cap is constrained to [0,2^31) or [0,2^63) depending on whether</span><br><span class="hljs-comment">// we&#x27;re in 32-bit or 64-bit systems. So it&#x27;s safe to do:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// if uint64(len) &gt; cap &#123;</span><br><span class="hljs-comment">//     if len &lt; 0 &#123; panicmakeslicelen() &#125;</span><br><span class="hljs-comment">//     panicmakeslicecap()</span><br><span class="hljs-comment">// &#125;</span><br>nif := nod(OIF, nod(OGT, conv(l, types.Types[TUINT64]), nodintconst(i)), <span class="hljs-literal">nil</span>)<br>niflen := nod(OIF, nod(OLT, l, nodintconst(<span class="hljs-number">0</span>)), <span class="hljs-literal">nil</span>)<br>niflen.Nbody.Set1(mkcall(<span class="hljs-string">&quot;panicmakeslicelen&quot;</span>, <span class="hljs-literal">nil</span>, init))<br>nif.Nbody.Append(niflen, mkcall(<span class="hljs-string">&quot;panicmakeslicecap&quot;</span>, <span class="hljs-literal">nil</span>, init))<br>nif = typecheck(nif, ctxStmt)<br>init.Append(nif)<br>            <span class="hljs-comment">// NewArray 逻辑：</span><br>            <span class="hljs-comment">// i &lt;= 4 -&gt; 底层数组创建在 栈 上</span><br>            <span class="hljs-comment">// i &gt; 4 -&gt; 底层数组创建在 静态存储区，在运行时取出</span><br>t = types.NewArray(t.Elem(), i) <span class="hljs-comment">// [r]T</span><br>var_ := temp(t)<br>a := nod(OAS, var_, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// zero temp</span><br>a = typecheck(a, ctxStmt)<br>init.Append(a)<br>r := nod(OSLICE, var_, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// arr[:l]</span><br>r.SetSliceBounds(<span class="hljs-literal">nil</span>, l, <span class="hljs-literal">nil</span>)<br>r = conv(r, n.Type) <span class="hljs-comment">// in case n.Type is named.</span><br>r = typecheck(r, ctxExpr)<br>r = walkexpr(r, init)<br>n = r<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 发生逃逸，底层数组创建在 heap 堆上</span><br><span class="hljs-comment">// n escapes; set up a call to makeslice.</span><br><span class="hljs-comment">// When len and cap can fit into int, use makeslice instead of</span><br><span class="hljs-comment">// makeslice64, which is faster and shorter on 32 bit platforms.</span><br><br><span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> := l, r<br><br>fnname := <span class="hljs-string">&quot;makeslice64&quot;</span><br>argtype := types.Types[TINT64]<br><br><span class="hljs-comment">// Type checking guarantees that TIDEAL len/cap are positive and fit in an int.</span><br><span class="hljs-comment">// The case of len or cap overflow when converting TUINT or TUINTPTR to TINT</span><br><span class="hljs-comment">// will be handled by the negative range checks in makeslice during runtime.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>.Type.IsKind(TIDEAL) || maxintval[<span class="hljs-built_in">len</span>.Type.Etype].Cmp(maxintval[TUINT]) &lt;= <span class="hljs-number">0</span>) &amp;&amp;<br>(<span class="hljs-built_in">cap</span>.Type.IsKind(TIDEAL) || maxintval[<span class="hljs-built_in">cap</span>.Type.Etype].Cmp(maxintval[TUINT]) &lt;= <span class="hljs-number">0</span>) &#123;<br>fnname = <span class="hljs-string">&quot;makeslice&quot;</span><br>argtype = types.Types[TINT]<br>&#125;<br>            <br>            <span class="hljs-comment">// node 类型转换为 OSLICEHEADER</span><br>m := nod(OSLICEHEADER, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<br>m.Type = t<br><br>fn := syslook(fnname)<br><span class="hljs-comment">// mkcall1() 替换 Left 节点，调用的方法为：runtime.makeslice()</span><br>m.Left = mkcall1(fn, types.Types[TUNSAFEPTR], init, typename(t.Elem()), conv(<span class="hljs-built_in">len</span>, argtype), conv(<span class="hljs-built_in">cap</span>, argtype))<br>m.Left.MarkNonNil()<br>m.List.Set2(conv(<span class="hljs-built_in">len</span>, types.Types[TINT]), conv(<span class="hljs-built_in">cap</span>, types.Types[TINT]))<br><br>m = typecheck(m, ctxExpr)<br>m = walkexpr(m, init)<br>n = m<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="runtimemakeslice">runtime.makeslice()</span></h4><p><a href="https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/runtime/slice.go#L83">runtime.makeslice()</a> 计算 切片 占用的内存空间 并通过 <strong>runtime.mallocgc() （内存分配 和 gc 中会讲到）</strong> 在 heap 堆上申请一片连续的内存。</p><p><strong>内存空间 = 切片中的元素大小 * 切片容量</strong></p><p>此外对各错误情况进行了处理：</p><ol><li>overflow 内存空间大小发生了溢出</li><li>申请的内存 &gt; maxAlloc 最大可分配内存</li><li>len &lt; 0 || len &gt; cap</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.makeslice()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeslice</span><span class="hljs-params">(et *_type, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span> &#123;<br>    <span class="hljs-comment">// 计算需要的内存空间 mem</span><br>    <span class="hljs-comment">// 是否溢出的标记 overflow</span><br>mem, overflow := math.MulUintptr(et.size, <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>))<br><span class="hljs-comment">// 异常情况处理</span><br><span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc || <span class="hljs-built_in">len</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span> &gt; <span class="hljs-built_in">cap</span> &#123;<br>mem, overflow := math.MulUintptr(et.size, <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">len</span>))<br><span class="hljs-keyword">if</span> overflow || mem &gt; maxAlloc || <span class="hljs-built_in">len</span> &lt; <span class="hljs-number">0</span> &#123;<br>panicmakeslicelen()<br>&#125;<br>panicmakeslicecap()<br>&#125;<br>    <span class="hljs-comment">// 调用 runtime.mallocgc()</span><br><span class="hljs-keyword">return</span> mallocgc(mem, et, <span class="hljs-literal">true</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="osliceheader">OSLICEHEADER</span></h4><p>在发生逃逸时，nod 类型会改写为 <strong>OSLICEHEADER</strong>，然后再进行一次类型检查，在类型检查阶段，创建出  <strong>reflect.SliceHeader</strong> 结构体：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs elm">// gc.typecheck1()<br><span class="hljs-title">func</span> typecheck1(n *<span class="hljs-type">Node</span>, top int) (res *<span class="hljs-type">Node</span>) &#123;<br>switch n.<span class="hljs-type">Op</span> &#123;<br>...<br>// 对 <span class="hljs-type">OSLICEHEADER</span> 节点的处理<br>case <span class="hljs-type">OSLICEHEADER</span>:<br>switch <br>t := n.<span class="hljs-type">Type</span><br>n.<span class="hljs-type">Left</span> = typecheck(n.<span class="hljs-type">Left</span>, ctxExpr)<br>l := typecheck(n.<span class="hljs-type">List</span>.<span class="hljs-type">First</span>(), ctxExpr)<br>c := typecheck(n.<span class="hljs-type">List</span>.<span class="hljs-type">Second</span>(), ctxExpr)<br>l = defaultlit(l, types.<span class="hljs-type">Types</span>[<span class="hljs-type">TINT</span>])<br>c = defaultlit(c, types.<span class="hljs-type">Types</span>[<span class="hljs-type">TINT</span>])<br><br>n.<span class="hljs-type">List</span>.<span class="hljs-type">SetFirst(l)</span><br>n.<span class="hljs-type">List</span>.<span class="hljs-type">SetSecond(c)</span><br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="323-访问元素-len-cap-index">3.2.3 访问元素 len, cap, index</span></h3><p>主要包括：len() 获取长度, cap() 获取容量 以及 index 按索引访问</p><p>len() 和 cap() 会被编译器看做对 slice 的两种特殊操作：OLEN，OCAP</p><p>在 ssa 生成阶段，通过 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/ssa.go#L2054">cmd/compile/internal/gc.state.expr()</a> 将其转换为 OpSliceLen 和 OpSliceCap：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// gc.state.expr()</span><br>func (s *state) expr(n *Node) *ssa<span class="hljs-selector-class">.Value</span> &#123;<br>    ......<br>    switch n<span class="hljs-selector-class">.OP</span> &#123;<br>    ......<br>    <span class="hljs-comment">// OLEN, OCAP 在这里处理了多种数据结构的 case</span><br>    case OLEN, OCAP:<br>switch &#123;<br>case n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.IsSlice</span>():<br>    <span class="hljs-comment">// Slice 求 OLEN, OCAP</span><br>op := ssa<span class="hljs-selector-class">.OpSliceLen</span> <span class="hljs-comment">// len()</span><br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == OCAP &#123;<br>op = ssa<span class="hljs-selector-class">.OpSliceCap</span> <span class="hljs-comment">// cap()</span><br>&#125;<br>return s<span class="hljs-selector-class">.newValue1</span>(op, types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINT]</span>, s<span class="hljs-selector-class">.expr</span>(n.Left))<br>case n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.IsString</span>(): <br>    <span class="hljs-comment">// String 只能是用 OLEN 求长度</span><br>    <span class="hljs-comment">// string; not reachable for OCAP</span><br>return s<span class="hljs-selector-class">.newValue1</span>(ssa<span class="hljs-selector-class">.OpStringLen</span>, types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINT]</span>, s<span class="hljs-selector-class">.expr</span>(n.Left))<br><span class="hljs-comment">// Map 求 OLEN, OCAP</span><br>case n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.IsMap</span>(), n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.IsChan</span>():<br>return s<span class="hljs-selector-class">.referenceTypeBuiltin</span>(n, s<span class="hljs-selector-class">.expr</span>(n.Left))<br>default: <span class="hljs-comment">// array</span><br>    <span class="hljs-comment">// 默认处理 array</span><br>    <span class="hljs-comment">// OLEN = OCAP</span><br>return s<span class="hljs-selector-class">.constInt</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINT]</span>, n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.NumElem</span>())<br>&#125;<br>&#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>访问切片中的元素使用到的 OINDEX 操作也会在 SSA 中间代码生成阶段转换成对地址的直接访问：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// gc.state.expr()</span><br>func (s *state) expr(n *Node) *ssa.Value &#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>    switch n.OP &#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>    <span class="hljs-comment">// OINDEX 在这里处理了多种数据结构的 case</span><br>    <span class="hljs-keyword">case</span> OINDEX:<br>        switch &#123;<br>        <span class="hljs-comment">// 通过 INDEX 访问 String</span><br><span class="hljs-keyword">case</span> n.Left.<span class="hljs-keyword">Type</span>.IsString():<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br><br><span class="hljs-comment">// 通过 INDEX 访问 Slice</span><br><span class="hljs-keyword">case</span> n.Left.<span class="hljs-keyword">Type</span>.IsSlice():<br>p := s.addr(n)<br><span class="hljs-keyword">return</span> s.load(n.Left.<span class="hljs-keyword">Type</span>.Elem(), p)<br><span class="hljs-comment">// 通过 INDEX 访问 Array</span><br><span class="hljs-keyword">case</span> n.Left.<span class="hljs-keyword">Type</span>.IsArray():<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br><br>default:<br>    <span class="hljs-comment">// 其他 数据结构 无法使用 INDEX 访问</span><br>s.Fatalf(<span class="hljs-string">&quot;bad type for index %v&quot;</span>, n.Left.<span class="hljs-keyword">Type</span>)<br><span class="hljs-keyword">return</span> nil<br>&#125;<br>&#125;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对 切片 的 len(), cap(), Index 等操作，是在 编译期间完成的</p><h3><span id="324-追加-和-扩容-append-amp-grow">3.2.4 追加 和 扩容 append &amp; grow</span></h3><h4><span id="追加-append">追加 append</span></h4><p>使用 append() 关键字向 切片 中追加元素，在 SSA 中间代码生成阶段，对应到<br><a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/ssa.go#L2841">cmd/compile/internal/gc.state.append()</a> 将该操作转换为一个 OAPPEND 节点；根据是否为 <strong>In Place（原地）</strong> 操作，进入到不同的处理流程：</p><ol><li>非原地操作：append() 返回的新切片 不需要 覆盖原切片</li><li>原地操作：append() 返回的新切片 覆盖原切片</li></ol><p>如果是 非原地 操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// append(slice, 1, 2, 3) 返回新切片</span><br>ptr, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> := slice<br>newlen := <span class="hljs-built_in">len</span> + <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> newlen &gt; <span class="hljs-built_in">cap</span> &#123; <span class="hljs-comment">// 需要 growslice() 扩容</span><br>    ptr, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span> = growslice(slice, newlen)<br>    newlen = <span class="hljs-built_in">len</span> + <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-comment">// append 到 切片</span><br>*(ptr + <span class="hljs-built_in">len</span>) = <span class="hljs-number">1</span><br>*(ptr + <span class="hljs-built_in">len</span> + <span class="hljs-number">1</span>) = <span class="hljs-number">2</span><br>*(ptr + <span class="hljs-built_in">len</span> + <span class="hljs-number">2</span>) = <span class="hljs-number">3</span><br><br><span class="hljs-comment">// 返回生成的新的 Slice</span><br><span class="hljs-keyword">return</span> makeslice(ptr, newlen, <span class="hljs-built_in">cap</span>)<br></code></pre></td></tr></table></figure><p>先解构出切片结构体 SliceHeader 中的 数组指针 ptr, 大小 len, 容量 cap<br>如果追加元素后切片的大小大于容量，会调用 runtime.growslice() 对切片进行扩容<br>将新的元素 依次 加入切片，最后返回新的 切片</p><p>如果是 In place 原地操作（写入到 slice）：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// slice = append(slice, 1, 2, 3) 写入到 原切片</span><br>a :<span class="hljs-type"></span>= &amp;slice <span class="hljs-comment">// 原切片指针</span><br><br>ptr, len, cap :<span class="hljs-type"></span>= slice<br><span class="hljs-keyword">new</span><span class="hljs-type">len</span> :<span class="hljs-type"></span>= len + <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> uint(<span class="hljs-keyword">new</span><span class="hljs-type">len</span>) &gt; uint(cap) &#123; <span class="hljs-comment">// 需要 growslice() 扩容</span><br>    <span class="hljs-keyword">new</span><span class="hljs-type">ptr</span>, len, <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> = growslice(slice, <span class="hljs-keyword">new</span><span class="hljs-type">len</span>)<br>    vardef(a)<br>    <span class="hljs-comment">// cap, 数组 写入到 原切片</span><br>    *a.cap = <span class="hljs-keyword">new</span><span class="hljs-type">cap</span><br>    *a.ptr = <span class="hljs-keyword">new</span><span class="hljs-type">ptr</span><br>&#125;<br><span class="hljs-keyword">new</span><span class="hljs-type">len</span> = len + <span class="hljs-number">3</span><br><span class="hljs-comment">// len 写入到 原切片</span><br>*a.len = <span class="hljs-keyword">new</span><span class="hljs-type">len</span><br><span class="hljs-comment">// 元素写入 到 切片</span><br>*(ptr + len) = <span class="hljs-number">1</span><br>*(ptr + len + <span class="hljs-number">1</span>) = <span class="hljs-number">2</span><br>*(ptr + len + <span class="hljs-number">2</span>) = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4><span id="扩容-growslice">扩容 growslice()</span></h4><p>当切片容量不足时，会调用 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/slice.go#L125">runtime.growslice()</a> 对切片扩容，为切片分配新的内存空间 并 拷贝原切片中元素的过程。</p><p>首先需要确定扩容后，新切片的容量，对应到 growslice() 中不同的策略：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// runtime.growslice()</span><br>func growslice(et *_type, old slice, cap int) slice &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">cap</span> :<span class="hljs-type"></span>= old.cap<br>doublecap :<span class="hljs-type"></span>= <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> + <span class="hljs-keyword">new</span><span class="hljs-type">cap</span><br><span class="hljs-keyword">if</span> cap &gt; doublecap &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">cap</span> = cap<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> old.len &lt; <span class="hljs-number">1024</span> &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">cap</span> = doublecap<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt; <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> &amp;&amp; <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> &lt; cap &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">cap</span> += <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> / <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">new</span><span class="hljs-type">cap</span> &lt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">cap</span> = cap<br>&#125;<br>&#125;<br>&#125;<br>......<br></code></pre></td></tr></table></figure><p>策略：</p><ol><li>如果期望容量 cap 大于 当前容量的两倍 doublecap 就会使用 期望容量</li><li>如果当前切片的长度 小于 1024，就会将容量翻倍</li><li>如果当前切片的长度 大于或等于 1024，每次会增加 25% 的容量，直到新容量 大于 期望容量</li></ol><p>runtime.growslice() 在确定了新的切片容量后，会根据切片中的 元素大小 <strong>对齐内存</strong>。</p><ol><li>当数组中元素所占的字节大小为 1、8 或 2的倍数时，runtime.growslice() 会使用如下代码对齐内存：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.growslice()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">growslice</span><span class="hljs-params">(et *_type, old slice, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">slice</span></span> &#123;<br>......<br><span class="hljs-comment">// 确定新切片的 容量</span><br><span class="hljs-keyword">var</span> overflow <span class="hljs-keyword">bool</span> <span class="hljs-comment">// 溢出判断</span><br><span class="hljs-keyword">var</span> lenmem, newlenmem, capmem <span class="hljs-keyword">uintptr</span><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-comment">// 切片中元素所占的字节 = 1</span><br><span class="hljs-keyword">case</span> et.size == <span class="hljs-number">1</span>:<br>lenmem = <span class="hljs-keyword">uintptr</span>(old.<span class="hljs-built_in">len</span>)<br>newlenmem = <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>)<br>capmem = roundupsize(<span class="hljs-keyword">uintptr</span>(newcap))<br>overflow = <span class="hljs-keyword">uintptr</span>(newcap) &gt; maxAlloc<br>newcap = <span class="hljs-keyword">int</span>(capmem)<br><span class="hljs-comment">// 切片中元素所占的字节 = PtrSize = 8</span><br><span class="hljs-keyword">case</span> et.size == sys.PtrSize:<br>lenmem = <span class="hljs-keyword">uintptr</span>(old.<span class="hljs-built_in">len</span>) * sys.PtrSize<br>newlenmem = <span class="hljs-keyword">uintptr</span>(<span class="hljs-built_in">cap</span>) * sys.PtrSize<br>capmem = roundupsize(<span class="hljs-keyword">uintptr</span>(newcap) * sys.PtrSize)<br>overflow = <span class="hljs-keyword">uintptr</span>(newcap) &gt; maxAlloc/sys.PtrSize<br>newcap = <span class="hljs-keyword">int</span>(capmem / sys.PtrSize)<br><span class="hljs-comment">// 切片中元素所占的字节 = PtrSize = 8</span><br><span class="hljs-keyword">case</span> isPowerOfTwo(et.size):<br>...<br><span class="hljs-keyword">default</span>:<br>...<br>&#125;<br>......<br><br></code></pre></td></tr></table></figure>在计算新切片容量 capmem 时，会调用 <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/msize.go#L13">runtime.roundupsize()</a> 对实际计算出的内存进行 上取整，对齐内存。<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// Returns size of the memory block that mallocgc will allocate if you ask for the size.</span><br><span class="hljs-function">func <span class="hljs-title">roundupsize</span><span class="hljs-params">(size uintptr)</span> uintptr </span>&#123;<br><span class="hljs-keyword">if</span> size &lt; _MaxSmallSize &#123;<br><span class="hljs-keyword">if</span> size &lt;= smallSizeMax<span class="hljs-number">-8</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">uintptr</span>(class_to_size[size_to_class8[<span class="hljs-built_in">divRoundUp</span>(size, smallSizeDiv)]])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">uintptr</span>(class_to_size[size_to_class128[<span class="hljs-built_in">divRoundUp</span>(size-smallSizeMax, largeSizeDiv)]])<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> size+_PageSize &lt; size &#123;<br><span class="hljs-keyword">return</span> size<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">alignUp</span>(size, _PageSize)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>取整时，使用到 <a href="https://github.com/golang/go/blob/b634f5d97a6e65f19057c00ed2095a1a872c7fa8/src/runtime/sizeclasses.go#L84">runtime.class_to_size</a> 数组：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">var</span> <span class="hljs-string">class_to_size</span> <span class="hljs-string">=</span> [<span class="hljs-string">_NumSizeClasses</span>]<span class="hljs-string">uint16&#123;0,</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-number">16</span><span class="hljs-string">,</span> <span class="hljs-number">24</span><span class="hljs-string">,</span> <span class="hljs-number">32</span><span class="hljs-string">,</span> <span class="hljs-number">48</span><span class="hljs-string">,</span> <span class="hljs-number">64</span><span class="hljs-string">,</span> <span class="hljs-number">80</span><span class="hljs-string">,</span> <span class="hljs-number">96</span><span class="hljs-string">,</span> <span class="hljs-number">112</span><span class="hljs-string">,</span> <span class="hljs-number">128</span><span class="hljs-string">,</span> <span class="hljs-number">144</span><span class="hljs-string">,</span> <span class="hljs-number">160</span><span class="hljs-string">,</span> <span class="hljs-number">176</span><span class="hljs-string">,</span> <span class="hljs-number">192</span><span class="hljs-string">,</span> <span class="hljs-number">208</span><span class="hljs-string">,</span> <span class="hljs-number">224</span><span class="hljs-string">,</span> <span class="hljs-number">240</span><span class="hljs-string">,</span> <span class="hljs-number">256</span><span class="hljs-string">,</span> <span class="hljs-number">288</span><span class="hljs-string">,</span> <span class="hljs-number">320</span><span class="hljs-string">,</span> <span class="hljs-number">352</span><span class="hljs-string">,</span> <span class="hljs-number">384</span><span class="hljs-string">,</span> <span class="hljs-number">416</span><span class="hljs-string">,</span> <span class="hljs-number">448</span><span class="hljs-string">,</span> <span class="hljs-number">480</span><span class="hljs-string">,</span> <span class="hljs-number">512</span><span class="hljs-string">,</span> <span class="hljs-number">576</span><span class="hljs-string">,</span> <span class="hljs-number">640</span><span class="hljs-string">,</span> <span class="hljs-number">704</span><span class="hljs-string">,</span> <span class="hljs-number">768</span><span class="hljs-string">,</span> <span class="hljs-number">896</span><span class="hljs-string">,</span> <span class="hljs-number">1024</span><span class="hljs-string">,</span> <span class="hljs-number">1152</span><span class="hljs-string">,</span> <span class="hljs-number">1280</span><span class="hljs-string">,</span> <span class="hljs-number">1408</span><span class="hljs-string">,</span> <span class="hljs-number">1536</span><span class="hljs-string">,</span> <span class="hljs-number">1792</span><span class="hljs-string">,</span> <span class="hljs-number">2048</span><span class="hljs-string">,</span> <span class="hljs-number">2304</span><span class="hljs-string">,</span> <span class="hljs-number">2688</span><span class="hljs-string">,</span> <span class="hljs-number">3072</span><span class="hljs-string">,</span> <span class="hljs-number">3200</span><span class="hljs-string">,</span> <span class="hljs-number">3456</span><span class="hljs-string">,</span> <span class="hljs-number">4096</span><span class="hljs-string">,</span> <span class="hljs-number">4864</span><span class="hljs-string">,</span> <span class="hljs-number">5376</span><span class="hljs-string">,</span> <span class="hljs-number">6144</span><span class="hljs-string">,</span> <span class="hljs-number">6528</span><span class="hljs-string">,</span> <span class="hljs-number">6784</span><span class="hljs-string">,</span> <span class="hljs-number">6912</span><span class="hljs-string">,</span> <span class="hljs-number">8192</span><span class="hljs-string">,</span> <span class="hljs-number">9472</span><span class="hljs-string">,</span> <span class="hljs-number">9728</span><span class="hljs-string">,</span> <span class="hljs-number">10240</span><span class="hljs-string">,</span> <span class="hljs-number">10880</span><span class="hljs-string">,</span> <span class="hljs-number">12288</span><span class="hljs-string">,</span> <span class="hljs-number">13568</span><span class="hljs-string">,</span> <span class="hljs-number">14336</span><span class="hljs-string">,</span> <span class="hljs-number">16384</span><span class="hljs-string">,</span> <span class="hljs-number">18432</span><span class="hljs-string">,</span> <span class="hljs-number">19072</span><span class="hljs-string">,</span> <span class="hljs-number">20480</span><span class="hljs-string">,</span> <span class="hljs-number">21760</span><span class="hljs-string">,</span> <span class="hljs-number">24576</span><span class="hljs-string">,</span> <span class="hljs-number">27264</span><span class="hljs-string">,</span> <span class="hljs-number">28672</span><span class="hljs-string">,</span> <span class="hljs-number">32768</span><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>使用该数组中的整数，可以提高 内存分配效率、减少碎片（与 golang 内存分配机制有关）。</p><p>最后，需要判断扩容后的切片 是否会造成内存溢出 或者 请求内存超过上限，这两种情况将造成程序的崩溃。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runtime.growslice()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">growslice</span><span class="hljs-params">(et *_type, old slice, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">slice</span></span> &#123;<br>......<br><span class="hljs-comment">// 确定新切片的容量</span><br>......<br><span class="hljs-comment">// 内存对齐后，实际占用到的内存</span><br>......<br><br><span class="hljs-comment">// 内存溢出检测</span><br><span class="hljs-keyword">if</span> overflow || capmem &gt; maxAlloc &#123;<br><span class="hljs-built_in">panic</span>(errorString(<span class="hljs-string">&quot;growslice: cap out of range&quot;</span>))<br>&#125;<br><br><span class="hljs-comment">// 分配空间，拷贝原切片中的内容</span><br><span class="hljs-keyword">var</span> p unsafe.Pointer<br><span class="hljs-keyword">if</span> et.kind&amp;kindNoPointers != <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-comment">// mallocgc() 申请 堆上的内存</span><br>p = mallocgc(capmem, <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>)<br><span class="hljs-comment">// 切片中元素 -&gt; 非指针</span><br>memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 切片中元素 -&gt; 指针</span><br>p = mallocgc(capmem, et, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> writeBarrier.enabled &#123;<br>bulkBarrierPreWriteSrcOnly(<span class="hljs-keyword">uintptr</span>(p), <span class="hljs-keyword">uintptr</span>(old.array), lenmem)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 将原切片元素 拷贝 到 新申请的内存</span><br>memmove(p, old.array, lenmem)<br><span class="hljs-comment">// 返回扩容后的切片</span><br><span class="hljs-keyword">return</span> slice&#123;p, old.<span class="hljs-built_in">len</span>, newcap&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下面的代码为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> arr []<span class="hljs-keyword">int64</span><br>arr = <span class="hljs-built_in">append</span>(arr, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>具体执行过程：</p><ol><li>触发 runtime.growslice() 扩容 arr 切片</li><li>期望的内存为 5 * 8 = 40，向上对齐为 48</li><li>将数据写入到扩容后的新切片</li></ol><h3><span id="325-拷贝切片-copy">3.2.5 拷贝切片 copy()</span></h3><p>对切片的 copy() 会在 编译期间 交由  <a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/cmd/compile/internal/gc/walk.go#L3093">src/cmd/compile/internal/gc/copyany()</a> 处理。</p><ol><li>copy 操作不在运行时调用</li><li>copy 操作在运行时调用</li></ol><p>当 copy 操作 不在 运行时调用时，会转为 runtime.memmove() 函数调用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">n := len(a)<br><span class="hljs-keyword">if</span> n &gt; len(b) &#123;<br>    n = len(b)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ptr</span> != <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.ptr</span> &#123;<br>    <span class="hljs-comment">// runtime.memmove()</span><br>    memmove(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.ptr</span>, <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.ptr</span>, n*sizeof(elem(a))) <br>&#125;<br></code></pre></td></tr></table></figure><p>当 copy 操作 在 运行时调用时，会转化为 runtime.slicecopy() 函数调用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">   <span class="hljs-keyword">if</span> runtimecall &#123;<br><span class="hljs-comment">// rely on runtime to instrument:</span><br><span class="hljs-comment">//  copy(n.Left, n.Right)</span><br><span class="hljs-comment">// n.Right can be a slice or string.</span><br><br>n<span class="hljs-selector-class">.Left</span> = cheapexpr(n<span class="hljs-selector-class">.Left</span>, init)<br>ptrL, lenL := n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.backingArrayPtrLen</span>()<br>n<span class="hljs-selector-class">.Right</span> = cheapexpr(n<span class="hljs-selector-class">.Right</span>, init)<br>ptrR, lenR := n<span class="hljs-selector-class">.Right</span><span class="hljs-selector-class">.backingArrayPtrLen</span>()<br>       <br>       <span class="hljs-comment">// runtime.slicecopy()</span><br>fn := syslook(<span class="hljs-string">&quot;slicecopy&quot;</span>)<br>fn = substArgTypes(fn, ptrL<span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.Elem</span>(), ptrR<span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.Elem</span>())<br>       <br>       <span class="hljs-comment">// mkcall1() 重写节点为 OCALL 节点</span><br>       <span class="hljs-comment">// 调用的函数为 runtime.slicecopy()</span><br>return mkcall1(fn, n<span class="hljs-selector-class">.Type</span>, init, ptrL, lenL, ptrR, lenR, nodintconst(n<span class="hljs-selector-class">.Left</span><span class="hljs-selector-class">.Type</span><span class="hljs-selector-class">.Elem</span>().Width))<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/ac0ba6707c1655ea4316b41d06571a0303cc60eb/src/runtime/slice.go#L247">runtime.slicecopy()</a> 的具体实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// slicecopy is used to copy from a string or slice of pointerless elements into a slice.</span><br><span class="hljs-function">func <span class="hljs-title">slicecopy</span><span class="hljs-params">(toPtr unsafe.Pointer, toLen <span class="hljs-keyword">int</span>, fromPtr unsafe.Pointer, fromLen <span class="hljs-keyword">int</span>, width uintptr)</span> <span class="hljs-keyword">int</span> </span>&#123;<br><span class="hljs-keyword">if</span> fromLen == <span class="hljs-number">0</span> || toLen == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br>n := fromLen<br><span class="hljs-keyword">if</span> toLen &lt; n &#123;<br>n = toLen<br>&#125;<br><br><span class="hljs-keyword">if</span> width == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>size := <span class="hljs-built_in">uintptr</span>(n) * width<br><span class="hljs-keyword">if</span> raceenabled &#123;<br>callerpc := <span class="hljs-built_in">getcallerpc</span>()<br>pc := <span class="hljs-built_in">funcPC</span>(slicecopy)<br><span class="hljs-built_in">racereadrangepc</span>(fromPtr, size, callerpc, pc)<br><span class="hljs-built_in">racewriterangepc</span>(toPtr, size, callerpc, pc)<br>&#125;<br><span class="hljs-keyword">if</span> msanenabled &#123;<br><span class="hljs-built_in">msanread</span>(fromPtr, size)<br><span class="hljs-built_in">msanwrite</span>(toPtr, size)<br>&#125;<br><br><span class="hljs-keyword">if</span> size == <span class="hljs-number">1</span> &#123; <span class="hljs-comment">// common case worth about 2x to do here</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> is this still worth it with new memmove impl?</span><br>*(*<span class="hljs-keyword">byte</span>)(toPtr) = *(*<span class="hljs-keyword">byte</span>)(fromPtr) <span class="hljs-comment">// known to be a byte pointer</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 调用 runtime.memmove() 拷贝 切片 中的元素</span><br><span class="hljs-built_in">memmove</span>(toPtr, fromPtr, size)<br>&#125;<br><span class="hljs-keyword">return</span> n<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意到的是，运行时中的 slicecopy() 在最后也是调用到了 runtime.memmove() 拷贝切片中的内容到 新切片 的内存区域中。</p><p>在拷贝 大切片 时，需要注意对性能的影响</p><h3><span id="conclusion">Conclusion</span></h3><ol><li>Slice 底层数据结构还是 Array</li><li>初始化、访问、追加、扩容等操作，都需要 runtime 的支持</li><li>大切片的拷贝会影响性能，需要减少这种情况的发生</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.1 数据结构 -- 数组 Array</title>
    <link href="/2021/12/30/3-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84-Array/"/>
    <url>/2021/12/30/3-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84-Array/</url>
    
    <content type="html"><![CDATA[<h2><span id="31-数组">3.1 数组</span></h2><p>在学习了第二章 编译原理 后，对 Golang 的编译器实现有了较为浅显的认识。让我们可以从 编译期间、运行时 中对数据结构的底层原理进行分析。</p><p><strong>数组 Array</strong> 是由相同类型元素的集合组成的数据结构，计算机会为数组分配一块连续的内存来保存其中的元素。</p><p>数组作为一种基本的数据结构，我们通常会从两个维度描述数组，数组中存储的元素类型( elemtype ) 和 数组最大能存储的元素个数( len )。</p><p>golang 对数组的表示有以下两种：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[10]</span><span class="hljs-built_in">int</span><br><span class="hljs-string">[20]</span><span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>golang 数组在初始化后，无法改变大小、元素类型。</p><h4><span id="编译期间-的-数组生成">编译期间 的 数组生成</span></h4><p>在 typecheck 阶段， <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/typecheck.go#L326">cmd/compile/internal/gc.typecheck1()</a> 将 类型为 OTARRAY 的节点 通过 <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/types/type.go#L482">src/cmd/compile/internal/types/type.NewArray()</a> 生成 数组类型：</p><ol><li>elem 表示 元素的类型</li><li>bound 表示 数组的大小</li></ol><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">// types.NewArray()<br>// NewArray returns a<span class="hljs-built_in"> new </span>fixed-length<span class="hljs-built_in"> array </span>Type.<br>func NewArray(elem *Type, bound int64) *Type &#123;<br><span class="hljs-built_in">if </span>bound &lt; 0 &#123;<br>Fatalf(<span class="hljs-string">&quot;NewArray: invalid bound %v&quot;</span>, bound)<br>&#125;<br>t<span class="hljs-keyword"> :</span>= New(TARRAY)<br>t.Extra = &amp;Array&#123;Elem: elem, Bound: bound&#125;<br>t.SetNotInHeap(elem.NotInHeap())<br><span class="hljs-built_in">return </span>t<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="311-初始化">3.1.1 初始化</span></h3><p>golang 数组的创建方式有两种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 显示的指定数组大小</span><br>arr := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><br><span class="hljs-comment">// [...]T 声明，需要 golang compile 推导 数组大小</span><br>arr := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>golang compile 在编译期间会 推导出 数组的大小，然后将其转换为第一种方式创建。</p><h4><span id="上限推导">上限推导</span></h4><p>如果是第一种声明方式，变量的类型在 <strong>类型检查</strong> 阶段被提取出来，随后使用 gc.NewArray() 创建包含数组大小的 types.Array 结构体。</p><p>当使用 […]T 方式声明数组时，编译器会将其匹配为 OCOMPLIT 类型，然后使用 <a href="https://github.com/golang/go/blob/5b0ec1a6ac0e644c89940e0fe5f79863ad2eafaa/src/cmd/compile/internal/gc/typecheck.go#L2793">cmd/compile/internal/gc.typecheckcomplit()</a> 推导出 数组的大小：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs elm">// gc.typecheckcomplit()<br><span class="hljs-title">func</span> typecheckcomplit(n *<span class="hljs-type">Node</span>) (res *<span class="hljs-type">Node</span>) &#123;<br>...<br>if n.<span class="hljs-type">Right</span>.<span class="hljs-type">Op</span> == <span class="hljs-type">OTARRAY</span> &amp;&amp; n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span> != nil &amp;&amp; n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span>.<span class="hljs-type">Op</span> == <span class="hljs-type">ODDD</span> &#123;<br>n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span> = typecheck(n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>, ctxType)<br>if n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span> == nil &#123;<br>n.<span class="hljs-type">Type</span> = nil<br>return n<br>&#125;<br>elemType := n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span><br>        <br>        // 调用 gc.typecheckarraylist() 获取长度<br>length := typecheckarraylit(elemType, -1, n.<span class="hljs-type">List</span>.<span class="hljs-type">Slice</span>(), &quot;array literal&quot;)<br><br>n.<span class="hljs-type">Op</span> = <span class="hljs-type">OARRAYLIT</span><br>n.<span class="hljs-type">Type</span> = types.<span class="hljs-type">NewArray</span>(elemType, length)<br>n.<span class="hljs-type">Right</span> = nil<br>return n<br>&#125;<br>...<br><br>switch t.<span class="hljs-type">Etype</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">TARRAY</span>:<br>typecheckarraylit(t.<span class="hljs-type">Elem</span>(), t.<span class="hljs-type">NumElem</span>(), n.<span class="hljs-type">List</span>.<span class="hljs-type">Slice</span>(), &quot;array literal&quot;)<br>n.<span class="hljs-type">Op</span> = <span class="hljs-type">OARRAYLIT</span><br>n.<span class="hljs-type">Right</span> = nil<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>gc.typecheckcomplit() 会调用  <a href="https://github.com/golang/go/blob/5b0ec1a6ac0e644c89940e0fe5f79863ad2eafaa/src/cmd/compile/internal/gc/typecheck.go#L3004">cmd/compile/internal/gc.typecheckarraylit()</a> 通过遍历元素的方式来计算数组中元素的数量</p><p>有上述过程可知，两种创建方式在 runtime 完全是等价的，[…]T 这种方式 只是 golang 提供的一种语法糖。</p><h4><span id="语句转换">语句转换</span></h4><p>对于一个由字面量组成的数组，根据数组元素数量的不同，编译器会在负责初始化字面量的  <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/sinit.go#L860">src/cmd/compile/internal/gc.anylit()</a> 函数中做两种不同的优化：</p><ol><li>当元素数量小于或者等于 4 个时，会直接将数组中的元素放置在栈上</li><li>当元素数量大于 4 个时，会将数组中的元素放置到静态区并在运行时取出<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// gc.anylit()</span><br>func anylit(n *Node, var_ *Node, init *Nodes) &#123;<br>t := n<span class="hljs-selector-class">.Type</span><br>switch n<span class="hljs-selector-class">.Op</span> &#123;<br>default:<br>Fatalf(<span class="hljs-string">&quot;anylit: not lit, op=%v node=%v&quot;</span>, n<span class="hljs-selector-class">.Op</span>, n)<br>    <br>    ......<br>    <br>    <span class="hljs-comment">// OARRAYLIT 数组 字面量</span><br>case OSTRUCTLIT, OARRAYLIT:<br><span class="hljs-keyword">if</span> !t<span class="hljs-selector-class">.IsStruct</span>() &amp;&amp; !t<span class="hljs-selector-class">.IsArray</span>() &#123;<br>Fatalf(<span class="hljs-string">&quot;anylit: not struct/array&quot;</span>)<br>&#125;<br>        <br>        <span class="hljs-comment">// 长度大于 4，将数组中的元素放置在 静态区 并在 运行时取出</span><br><span class="hljs-keyword">if</span> var_<span class="hljs-selector-class">.isSimpleName</span>() &amp;&amp; n<span class="hljs-selector-class">.List</span><span class="hljs-selector-class">.Len</span>() &gt; <span class="hljs-number">4</span> &#123;<br><span class="hljs-comment">// lay out static data</span><br>vstat := readonlystaticname(t)<br><br>ctxt := inInitFunction<br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == OARRAYLIT &#123;<br>ctxt = inNonInitFunction<br>&#125;<br>fixedlit(ctxt, initKindStatic, n, vstat, init)<br><br><span class="hljs-comment">// copy static to var</span><br><span class="hljs-selector-tag">a</span> := nod(OAS, var_, vstat)<br><br><span class="hljs-selector-tag">a</span> = typecheck(<span class="hljs-selector-tag">a</span>, ctxStmt)<br><span class="hljs-selector-tag">a</span> = walkexpr(<span class="hljs-selector-tag">a</span>, init)<br>init<span class="hljs-selector-class">.Append</span>(a)<br><br><span class="hljs-comment">// add expressions to automatic</span><br>fixedlit(inInitFunction, initKindDynamic, n, var_, init)<br>break<br>&#125;<br><br>        <span class="hljs-comment">// 长度小于4，将数组中的元素放置在 栈 上</span><br>fixedlit(inInitFunction, initKindLocalCode, n, var_, init)<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>当数组的元素 <strong>小于或者等于四个</strong> 时， <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/sinit.go#L503">cmd/compile/internal/gc.fixedlit</a> 会负责在函数编译之前将 [3]int{1, 2, 3} 转换为更加原始的语句：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// gc.fixedlit()</span><br><span class="hljs-comment">// fixedlit handles struct, array, and slice literals.</span><br>func fixedlit(ctxt initContext, kind initKind, n *Node, var_ *Node, init *Nodes) &#123;<br><span class="hljs-selector-tag">var</span> splitnode func(*Node) (<span class="hljs-selector-tag">a</span> *Node, value *Node)<br>...<br><br><span class="hljs-keyword">for</span> _, r := range n<span class="hljs-selector-class">.List</span><span class="hljs-selector-class">.Slice</span>() &#123;<br><span class="hljs-selector-tag">a</span>, value := splitnode(r)<br><span class="hljs-selector-tag">a</span> = nod(OAS, <span class="hljs-selector-tag">a</span>, value)<br><span class="hljs-selector-tag">a</span> = typecheck(<span class="hljs-selector-tag">a</span>, ctxStmt)<br>switch kind &#123;<br><span class="hljs-comment">// len() &gt; 4, 传入 initKindStatic</span><br>case initKindStatic:<br>genAsStatic(a)<br><span class="hljs-comment">// len() &lt;= 4，传入 initKindLocalCode</span><br>case initKindLocalCode:<br><span class="hljs-selector-tag">a</span> = orderStmtInPlace(<span class="hljs-selector-tag">a</span>, map<span class="hljs-selector-attr">[string]</span><span class="hljs-selector-attr">[]</span>*Node&#123;&#125;)<br><span class="hljs-selector-tag">a</span> = walkstmt(a)<br>init<span class="hljs-selector-class">.Append</span>(a)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 gc.walkstmt() 将 [3]int{1, 2, 3} 拆分成一个声明变量的表达式 以及 几个赋值表达式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 声明变量 表达式</span><br><span class="hljs-selector-tag">var</span> arr <span class="hljs-selector-attr">[3]</span>int<br><br><span class="hljs-comment">// 赋值表达式</span><br>arr<span class="hljs-selector-attr">[0]</span> = <span class="hljs-number">1</span><br>arr<span class="hljs-selector-attr">[1]</span> = <span class="hljs-number">2</span><br>arr<span class="hljs-selector-attr">[2]</span> = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>当数组的元素 <strong>大于四个</strong> 时，gc.anylit() 会先获取一个唯一的 staticname，然后调用 gc.fixedlit() 函数在 静态存储区 初始化数组中的元素并将 临时变量赋值给数组：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">  ......<br>      <span class="hljs-comment">// 长度大于 4，将数组中的元素放置在 静态区 并在 运行时取出</span><br><span class="hljs-keyword">if</span> var_<span class="hljs-selector-class">.isSimpleName</span>() &amp;&amp; n<span class="hljs-selector-class">.List</span><span class="hljs-selector-class">.Len</span>() &gt; <span class="hljs-number">4</span> &#123;<br><span class="hljs-comment">// lay out static data</span><br>vstat := staticname(t)<br>vstat := readonlystaticname(t)<br><br>ctxt := inInitFunction<br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == OARRAYLIT &#123;<br>ctxt = inNonInitFunction<br>&#125;<br>fixedlit(ctxt, initKindStatic, n, vstat, init)<br><br><span class="hljs-comment">// copy static to var</span><br><span class="hljs-selector-tag">a</span> := nod(OAS, var_, vstat)<br><br><span class="hljs-selector-tag">a</span> = typecheck(<span class="hljs-selector-tag">a</span>, ctxStmt)<br><span class="hljs-selector-tag">a</span> = walkexpr(<span class="hljs-selector-tag">a</span>, init)<br>init<span class="hljs-selector-class">.Append</span>(a)<br><br><span class="hljs-comment">// add expressions to automatic</span><br>fixedlit(inInitFunction, initKindDynamic, n, var_, init)<br>break<br>&#125;<br>  ......<br></code></pre></td></tr></table></figure><p>以 [5]int{1, 2, 3, 4, 5} 为例，可以将上述过程理解为以下的伪代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 声明语句</span><br><span class="hljs-selector-tag">var</span> arr <span class="hljs-selector-attr">[5]</span>int<br><span class="hljs-comment">// 静态存储区</span><br>statictmp_0<span class="hljs-selector-attr">[0]</span> = <span class="hljs-number">1</span><br>statictmp_0<span class="hljs-selector-attr">[1]</span> = <span class="hljs-number">2</span><br>statictmp_0<span class="hljs-selector-attr">[2]</span> = <span class="hljs-number">3</span><br>statictmp_0<span class="hljs-selector-attr">[3]</span> = <span class="hljs-number">4</span><br>statictmp_0<span class="hljs-selector-attr">[4]</span> = <span class="hljs-number">5</span><br><br><span class="hljs-comment">// 返回 临时变量</span><br>arr = statictmp_0<br></code></pre></td></tr></table></figure><h3><span id="312-访问-和-赋值">3.1.2 访问 和 赋值</span></h3><h4><span id="访问-index">访问 – index</span></h4><p>无论是在栈上还是静态存储区，数组在内存中都是一连串的内存空间，我们通过指向数组开头的指针、元素的数量以及元素类型占的空间大小表示数组。</p><p>错误的索引，会导致 取数据失败 -&gt; 越界。</p><p>在 访问数组 以及 对数组元素赋值时，都使用到索引。因此，必须保证 数组访问不越界。</p><p>golang 在 编译期间的 <strong>静态类型检查阶段</strong> 检查判断数组是否越界，在  <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/typecheck.go#L326">gc.typecheck1()</a> 中，以下代码验证了访问数组的索引：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs elm">// gc.typecheck1()<br><span class="hljs-title">func</span> typecheck1(n *<span class="hljs-type">Node</span>, top int) (res *<span class="hljs-type">Node</span>) &#123;<br>    ......<br>    <br>switch n.<span class="hljs-type">Op</span> &#123;<br>// <span class="hljs-type">OINDEX</span> 对应到 索引类型<br>case <span class="hljs-type">OINDEX</span>:<br>ok |= ctxExpr<br>l := n.<span class="hljs-type">Left</span>  // array<br>r := n.<span class="hljs-type">Right</span> // index<br>switch n.<span class="hljs-type">Left</span>.<span class="hljs-type">Type</span>.<span class="hljs-type">Etype</span> &#123;<br>case <span class="hljs-type">TSTRING</span>, <span class="hljs-type">TARRAY</span>, <span class="hljs-type">TSLICE</span>:<br>...<br>// 非整数 索引<br>if n.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span> != nil &amp;&amp; !n.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span>.<span class="hljs-type">IsInteger</span>() &#123;<br>yyerror(&quot;non-integer array index %v&quot;, n.<span class="hljs-type">Right</span>)<br>break<br>&#125;<br><br><span class="hljs-keyword">if</span> !n.<span class="hljs-type">Bounded</span>() &amp;&amp; <span class="hljs-type">Isconst</span>(n.<span class="hljs-type">Right</span>, <span class="hljs-type">CTINT</span>) &#123;<br>x := n.<span class="hljs-type">Right</span>.<span class="hljs-type">Int64</span>()<br>// 负数 索引<br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br>yyerror(<span class="hljs-string">&quot;invalid array index %v (index must be non-negative)&quot;</span>, n.<span class="hljs-type">Right</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n.<span class="hljs-type">Left</span>.<span class="hljs-type">Type</span>.<span class="hljs-type">IsArray</span>() &amp;&amp; x &gt;= n.<span class="hljs-type">Left</span>.<span class="hljs-type">Type</span>.<span class="hljs-type">NumElem</span>() &#123;<br>    // 越界 索引<br>yyerror(<span class="hljs-string">&quot;invalid array index %v (out of bounds for %d-element array)&quot;</span>, n.<span class="hljs-type">Right</span>, n.<span class="hljs-type">Left</span>.<span class="hljs-type">Type</span>.<span class="hljs-type">NumElem</span>())<br>&#125;<br>&#125;<br>&#125;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>gc.typecheck1() 只能判断 数组、字符串、切片的一些简单越界错误，如：直接使用 整数 或者 常量访问数组。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">// index error<br>arr[4]: invalid<span class="hljs-built_in"> array </span>index 4 (out of bounds for 3-element array)<br></code></pre></td></tr></table></figure><p>但是当使用 <strong>变量</strong> 去访问数组 或者 字符串 时，编译器就无法提前发现错误，需要在 golang runtime 中，去 <strong>发现</strong> 并 <strong>阻止</strong> 不合法的访问：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">// runtime panic <span class="hljs-meta">error</span><br>arr[i]: panic: runtime <span class="hljs-meta">error</span>: <span class="hljs-meta">index</span> <span class="hljs-meta">out</span> of range [4] with <span class="hljs-meta">length</span> 3<br></code></pre></td></tr></table></figure><p>golang runtime 处理 数组、切片、字符串的索引越界操作时，会由 运行时 的  <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/runtime/asm_386.s#L1412">runtime.panicIndex()</a> 以及 <a href="https://github.com/golang/go/blob/22d28a24c8b0d99f2ad6da5fe680fa3cfa216651/src/runtime/panic.go#L86">runtime.goPanicIndex()</a> 触发程序的运行时错误 并 导致崩溃退出：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// runtime.panicIndex()</span><br>TEXT runtime·panic<span class="hljs-constructor">Index(SB)</span>,NOSPLIT,$<span class="hljs-number">0</span>-<span class="hljs-number">8</span><br>MOVLAX, x+<span class="hljs-number">0</span>(FP)<br>MOVLCX, y+<span class="hljs-number">4</span>(FP)<br>JMPruntime·go<span class="hljs-constructor">PanicIndex(SB)</span><br><br><span class="hljs-comment">// runtime.goPanicIndex()</span><br>func go<span class="hljs-constructor">PanicIndex(<span class="hljs-params">x</span> <span class="hljs-params">int</span>, <span class="hljs-params">y</span> <span class="hljs-params">int</span>)</span> &#123;<br>panic<span class="hljs-constructor">Check1(<span class="hljs-params">getcallerpc</span>()</span>, <span class="hljs-string">&quot;index out of range&quot;</span>)<br>panic(boundsError&#123;x: <span class="hljs-built_in">int64</span>(x), signed: <span class="hljs-literal">true</span>, y: y, code: boundsIndex&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>当数组的访问操作 OINDEX 成功通过编译器的检查后，会被转换成对应的 SSA 指令。以如下存在 索引越界 的代码为例，经过编译得到对应的 ssa.html 文件：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">package<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br>func outOfRange()<span class="hljs-built_in"> int </span>&#123;<br>arr<span class="hljs-keyword"> :</span>= [3]int&#123;1, 2, 3&#125;<br>i<span class="hljs-keyword"> :</span>= 4<br>elem<span class="hljs-keyword"> :</span>= arr[i]<br><span class="hljs-built_in">return </span>elem<br>&#125;<br></code></pre></td></tr></table></figure><p>通过以下命令编译：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 编译命令</span><br><span class="hljs-attribute">GOSSAFUNC</span>=outOfRange go build array.go<br><br>output:<br>dumped SSA <span class="hljs-keyword">to</span> ./ssa.html<br></code></pre></td></tr></table></figure><p>生成的 ssa.html 预览如下：</p><img src="/2021/12/30/3-1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84-Array/golang_index_check.png" class title="OINDEX 生成的 ssa 中间代码"><p>start 阶段生成的 SSA 代码是优化之前的第一版中间代码，以 elem := arr[i] 为例，在这段中间代码中我们发现 Go 语言为数组的访问操作生成了判断数组上限的指令 IsInBounds 以及当条件不满足时触发程序崩溃的 PanicBounds 指令，最后在生成的 SSA 中间代码中，转换为 runtime.panicIndex()</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs smali">// Start 阶段<br>b1:<br><span class="hljs-keyword">    .</span>..<br>    v22 (6) = LocalAddr &lt;*[3]int&gt; &#123;arr&#125; v2 v20<br>    // arr[i] index = i<br>    v23 (6) = IsInBounds &lt;bool&gt; v21 v11<br>If v23 → b2 b3 (likely) (6)<br><br>b2: ← b1-<br>    v26 (6) = PtrIndex &lt;*int&gt; v22 v21<br>    v27 (6) = Copy &lt;mem&gt; v20<br>    v28 (6) = Load &lt;int&gt; v26 v27 (elem[int])<br><span class="hljs-keyword">    .</span>..<br>Ret v30 (+7)<br><br>b3: ← b1-<br>    v24 (6) = Copy &lt;mem&gt; v20<br>    // out of index<br>    v25 (6) = PanicBounds &lt;mem&gt; [0] v21 v11 v24<br>Exit v25 (6)<br><br><br>// gen ssa<br>        <span class="hljs-comment"># /root/index_check/check.go</span><br>        00000 (3) TEXT <span class="hljs-string">&quot;&quot;</span>.outOfRange(SB), ABIInternal<br>        00001 (3) FUNCDATA $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)<br>        00002 (3) FUNCDATA $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)<br>v33     00003 (+6) MOVL $4, AX<br>v23     00004 (6) MOVL $3, CX<br>v26     00005 (6) PCDATA $1, $0<br>        // 最后转换为 runtime.panicIndex()<br>v26     00006 (6) CALL runtime.panicIndex(SB)<br>        00007 (6) XCHGL AX, AX<br>        00008 (?) END<br></code></pre></td></tr></table></figure><p>在正常的情况下，索引没有越界时，编译器会先获取 数组的内存地址 和 访问的下标、利用 PtrIndex 计算出目标元素的地址，最后使用 Load 将指针中的元素加载到内存中。</p><p>以下面正常索引 的代码为例：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">package<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br>func outOfRange()<span class="hljs-built_in"> int </span>&#123;<br>arr<span class="hljs-keyword"> :</span>= [3]int&#123;1, 2, 3&#125;<br>i<span class="hljs-keyword"> :</span>= 2<br>elem<span class="hljs-keyword"> :</span>= arr[i]<br><span class="hljs-built_in">return </span>elem<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Start 阶段 转换为以下代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">b1:<br><span class="hljs-keyword">    .</span>..<br>    v21 (5) = LocalAddr &lt;*[3]int&gt; &#123;arr&#125; v2 v20<br>    // PtrIndex()<br>    v22 (5) = PtrIndex &lt;*int&gt; v21 v14<br>    // Load()<br>    v23 (5) = Load &lt;int&gt; v22 v20 (elem[int])<br><span class="hljs-keyword">    .</span>..<br></code></pre></td></tr></table></figure><p>golang 在 编译期间 &amp; 运行时中，都对数组的访问做了检查，进而保证不存在越界的情况。</p><h4><span id="赋值-更新">赋值 – 更新</span></h4><p>数组的 赋值 和 更新 操作 也会在 SSA 生成期间 计算出数组当前元素的内存地址，然后 修改当前内存地址的内容。</p><p>以下面的代码为例：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">package<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br>func assign() &#123;<br>arr<span class="hljs-keyword"> :</span>= [3]int&#123;1, 2, 3&#125;<br>i<span class="hljs-keyword"> :</span>= 2<br>arr[i] = 4<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Start 阶段 转换为以下代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">b1:<br><span class="hljs-keyword">    .</span>..<br>    // LocalAddr() 确定数组地址<br>    v21 (5) = LocalAddr &lt;*[3]int&gt; &#123;arr&#125; v2 v19<br>    // PtrIndex 获取目标元素的地址<br>    v22 (5) = PtrIndex &lt;*int&gt; v21 v13<br>    // Store() 将数据存入到地址<br>    v23 (5) = Store &lt;mem&gt; &#123;int&#125; v22 v20 v19<br><span class="hljs-keyword">    .</span>..<br></code></pre></td></tr></table></figure><p>数组的寻址 &amp; 赋值操作，不涉及运行时函数，都是在 编译阶段完成。</p><h3><span id="conclusion">Conclusion</span></h3><ol><li>数组的访问 和 赋值 同时依赖 golang compile &amp; runtime</li><li>在编译期间 和 运行时 中，都进行了 索引越界的判断</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.5 编译原理 -- 机器码生成</title>
    <link href="/2021/12/30/2-5-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%99%A8%E7%A0%81%E7%94%9F%E6%88%90/"/>
    <url>/2021/12/30/2-5-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%99%A8%E7%A0%81%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h2><span id="25-机器码生成">2.5 机器码生成</span></h2><p>golang compile 的最后一个阶段是根据 SSA中间代码 生成 机器码</p><p>机器码：目标 CPU 架构上能够运行的二进制代码</p><p>SSA 中间代码生成，多轮转换 49个步骤中， lower 后的一些步骤实际上是属于 机器码生成 阶段的</p><p>机器码生成 -&gt; 对 SSA 中间代码的降级过程，在这一过程中，编译器将一些值重写成了目标CPU架构的特定值，降级的过程处理了所有机器特定的重写规则 并对代码进行了一定程度的优化。</p><p>在 SSA 中间代码生成阶段的最后 <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/ssa.go#L6296">src/cmd/compile/internal/gc/ssa.genssa()</a> 函数中，Go 函数体的代码，实际上被转换为了  <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/internal/obj/link.go#L284">src/cmd/compile/internal/obj.Prog</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> struct Prog<br>type Prog struct &#123;<br>Ctxt     *Link     <span class="hljs-regexp">//</span> linker context<br>Link     *Prog     <span class="hljs-regexp">//</span> <span class="hljs-keyword">next</span> Prog <span class="hljs-keyword">in</span> linked list<br>From     Addr      <span class="hljs-regexp">//</span> first source operand<br>RestArgs []AddrPos <span class="hljs-regexp">//</span> can pack any operands that not fit into &#123;Prog.From, Prog.To&#125;<br>To       Addr      <span class="hljs-regexp">//</span> destination operand (second is RegTo2 below)<br>Pool     *Prog     <span class="hljs-regexp">//</span> constant pool entry, <span class="hljs-keyword">for</span> arm,arm64 back ends<br>Forwd    *Prog     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86 back end<br>Rel      *Prog     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86, arm back ends<br>Pc       int64     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> back ends or assembler: virtual or actual program counter, depending on phase<br>Pos      src.XPos  <span class="hljs-regexp">//</span> source position of this instruction<br>Spadj    int32     <span class="hljs-regexp">//</span> effect of instruction on stack pointer (increment or decrement amount)<br>As       As        <span class="hljs-regexp">//</span> assembler opcode<br>Reg      int16     <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>nd source operand<br>RegTo2   int16     <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>nd destination operand<br>Mark     uint16    <span class="hljs-regexp">//</span> bitmask of arch-specific items<br>Optab    uint16    <span class="hljs-regexp">//</span> arch-specific opcode index<br>Scond    uint8     <span class="hljs-regexp">//</span> bits that describe instruction suffixes (e.g. ARM conditions)<br>Back     uint8     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86 back end: backwards branch state<br>Ft       uint8     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86 back end: type index of Prog.From<br>Tt       uint8     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86 back end: type index of Prog.To<br>Isize    uint8     <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> x86 back end: size of the instruction <span class="hljs-keyword">in</span> bytes<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="251-指令集架构">2.5.1 指令集架构</span></h3><p>指令集架构<br>-&gt; 计算机的抽象模型<br>-&gt; 计算机软件 和 硬件之间的接口和桥梁</p><p>每一个指令集架构都定义了支持的数据结构、寄存器、管理内存的硬件支持、支持的指令集、IO 模型。</p><p>可以将其看做是软件 和 硬件之间的抽象层，能够让同一个二进制文件在不同版本的硬件上运行</p><h3><span id="252-golang-实现">2.5.2 golang 实现</span></h3><p>golang 对 机器码生成的实现包括了两部分：</p><ol><li>src/cmd/internal/ssa 中，对 SSA 中间代码进行降级; 针对目标架构进行优化和重写；生成 src/cmd/compile/internal/obj.Prog 指令</li><li>src/cmd/internal/obj 中，作为汇编器(Assembler) 角色 将 SSA 中间代码 转换为 机器码</li></ol><h4><span id="降级-ssa-lower">降级 SSA Lower</span></h4><p>SSA Lower 实际是在 中间代码生成的 49 轮 处理中完成的，lower 及以后的阶段都属于这一过程：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sqf">var passes = [...]pass&#123;<br>...<br>    &#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;lower&quot;</span>, fn: lower, required: <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;lowered deadcode for cse&quot;</span>, fn: deadcode&#125;, <span class="hljs-comment">// deadcode immediately before CSE avoids CSE making dead values live again</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;lowered cse&quot;</span>, fn: cse&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;elim unread autos&quot;</span>, fn: elimUnreadAutos&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;lowered deadcode&quot;</span>, fn: deadcode, required: <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;checkLower&quot;</span>, fn: checkLower, required: <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;late phielim&quot;</span>, fn: phielim&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;late copyelim&quot;</span>, fn: copyelim&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;tighten&quot;</span>, fn: tighten&#125;, <span class="hljs-comment">// move values closer to their uses</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;late deadcode&quot;</span>, fn: deadcode&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;critical&quot;</span>, fn: critical, required: <span class="hljs-literal">true</span>&#125;, <span class="hljs-comment">// remove critical edges</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;phi tighten&quot;</span>, fn: phiTighten&#125;,            <span class="hljs-comment">// place rematerializable phi args near uses to reduce value lifetimes</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;likelyadjust&quot;</span>, fn: likelyadjust&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;layout&quot;</span>, fn: layout, required: <span class="hljs-literal">true</span>&#125;,     <span class="hljs-comment">// schedule blocks</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;schedule&quot;</span>, fn: schedule, required: <span class="hljs-literal">true</span>&#125;, <span class="hljs-comment">// schedule values</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;late nilcheck&quot;</span>, fn: nilcheckelim2&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;flagalloc&quot;</span>, fn: flagalloc, required: <span class="hljs-literal">true</span>&#125;, <span class="hljs-comment">// allocate flags register</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;regalloc&quot;</span>, fn: regalloc, required: <span class="hljs-literal">true</span>&#125;,   <span class="hljs-comment">// allocate int &amp; float registers + stack slots</span><br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;loop rotate&quot;</span>, fn: loopRotate&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;stackframe&quot;</span>, fn: stackframe, required: <span class="hljs-literal">true</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>: <span class="hljs-string">&quot;trim&quot;</span>, fn: trim&#125;, <span class="hljs-comment">// remove empty blocks</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以 hello.go 为例，对应到 ssa.html 中的步骤：</p><img src="/2021/12/30/2-5-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%99%A8%E7%A0%81%E7%94%9F%E6%88%90/go_compile_ssa_lower.png" class title="ssa中间代码生成期间的 lower 过程"><p>由于过程较多（20步），只对第一个阶段 lower 进行分析，lower 阶段的入口方法是： <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/ssa/lower.go#L8">cmd/compile/internal/ssa.lower()</a></p><ol><li>applyRewrite() 将 SSA中间代码转换成机器特定的指令</li><li>lowerBlock() 以及 lowerValue() 分别转换函数的中的代码块 和 代码块中的值</li></ol><p>applyRewrite() 的实际实现，对应到 <a href="https://github.com/golang/go/tree/c170b14c2c1cfb2fd853a37add92a82fd6eb4318/src/cmd/compile/internal/ssa">src/cmd/compile/internal/ssa</a> 包 rewrite_架构.go; rewriteblock-架构(); rewritevalue-架构() 中</p><p>如：rewriteAMD64.go -&gt; 转换为 AMD64 架构</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// ssa.lower()</span><br><span class="hljs-comment">// convert to machine-dependent ops</span><br>func lower(f *Func) &#123;<br><span class="hljs-comment">// repeat rewrites until we find no more rewrites</span><br>apply<span class="hljs-constructor">Rewrite(<span class="hljs-params">f</span>, <span class="hljs-params">f</span>.Config.<span class="hljs-params">lowerBlock</span>, <span class="hljs-params">f</span>.Config.<span class="hljs-params">lowerValue</span>, <span class="hljs-params">removeDeadValues</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以 x86 架构为例，实际调用到的是： <a href="https://github.com/golang/go/blob/c170b14c2c1cfb2fd853a37add92a82fd6eb4318/src/cmd/compile/internal/ssa/rewrite386.go#L21977">src/cmd/compile/internal/ssa.rewriteBlock386()</a> 以及 <a href="https://github.com/golang/go/blob/c170b14c2c1cfb2fd853a37add92a82fd6eb4318/src/cmd/compile/internal/ssa/rewrite386.go#L9">src/cmd/compile/internal/ssa.rewriteBlock386()</a>；通过巨型的 switch - case 语句 将 通用的 SSA 中间代码转换成 x86 架构特定的指令。</p><p>如：使用 ADCLconst 替换 ADCL 和 MOVLonst 两条指令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ssa.rewriteValue386()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rewriteValue386</span><span class="hljs-params">(v *Value)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">switch</span> v.Op &#123;<br><span class="hljs-keyword">case</span> Op386ADCL:<br><span class="hljs-keyword">return</span> rewriteValue386_Op386ADCL_0(v)<br><span class="hljs-keyword">case</span> Op386ADDL:<br><span class="hljs-keyword">return</span> rewriteValue386_Op386ADDL_0(v) || rewriteValue386_Op386ADDL_10(v) || rewriteValue386_Op386ADDL_20(v)<br>...<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// ssa.rewriteBlock386()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rewriteValue386_Op386ADCL_0</span><span class="hljs-params">(v *Value)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 此处完成命令替换</span><br><span class="hljs-comment">// match: (ADCL x (MOVLconst [c]) f)</span><br><span class="hljs-comment">// cond:</span><br><span class="hljs-comment">// result: (ADCLconst [c] x f)</span><br><span class="hljs-keyword">for</span> &#123;<br>_ = v.Args[<span class="hljs-number">2</span>]<br>x := v.Args[<span class="hljs-number">0</span>]<br>v_1 := v.Args[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> v_1.Op != Op386MOVLconst &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>c := v_1.AuxInt<br>f := v.Args[<span class="hljs-number">2</span>]<br>v.reset(Op386ADCLconst)<br>v.AuxInt = c<br>v.AddArg(x)<br>v.AddArg(f)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>lower() 等相关步骤实际运行在 gc.buildSSA() 中，在 gc.compileSSA() 中，后续的调用为：</p><ol><li>genssa() 将中间代码保存在 Progs 结构体</li><li><a href="cmd/compile/internal/gc.Progs.Flush">pp.flush()</a> 使用 <a href="cmd/internal/obj">src/cmd/internal/obj</a> 包中的汇编器 Assembler 将优化后的 SSA 中间代码转换成 汇编代码</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compileSSA</span><span class="hljs-params">(fn *Node, worker <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-comment">// ssa lower</span><br>f := buildssa(fn, worker)<br><br>......<br><br><span class="hljs-comment">// 1. 初始化 Progs 结构体</span><br>pp := newProgs(fn, worker)<br><span class="hljs-keyword">defer</span> pp.Free()<br><span class="hljs-comment">// 1. 将 SSA 中间代码 存入 pp 中</span><br>genssa(f, pp)<br>    <br>    <span class="hljs-comment">// 2. SSA 中间代码 -&gt; 汇编代码</span><br>pp.Flush()<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 SSA 降级的代码，在形式上和汇编代码非常相似，<strong>genssa()</strong> 中生成的就是经过 优化后的 SSA 中间代码。以 hello.go 最后生成的 ssa 中间代码为例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># /root/ssa_test/hello.go</span><br>        <span class="hljs-attribute">00000</span> (<span class="hljs-number">3</span>) TEXT <span class="hljs-string">&quot;&quot;</span>.hello(SB), ABIInternal<br>        <span class="hljs-attribute">00001</span> (<span class="hljs-number">3</span>) FUNCDATA $<span class="hljs-number">0</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe<span class="hljs-number">80329</span>f<span class="hljs-number">1</span>fdbee<span class="hljs-number">7</span>f<span class="hljs-number">5874</span>cb(SB)<br>        <span class="hljs-attribute">00002</span> (<span class="hljs-number">3</span>) FUNCDATA $<span class="hljs-number">1</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe<span class="hljs-number">80329</span>f<span class="hljs-number">1</span>fdbee<span class="hljs-number">7</span>f<span class="hljs-number">5874</span>cb(SB)<br>        <span class="hljs-attribute">00003</span> (<span class="hljs-number">3</span>) FUNCDATA $<span class="hljs-number">5</span>, <span class="hljs-string">&quot;&quot;</span>.hello.arginfo<span class="hljs-number">1</span>(SB)<br><span class="hljs-attribute">v10</span>     <span class="hljs-number">00004</span> (+<span class="hljs-number">4</span>) ADDQ $<span class="hljs-number">2</span>, AX<br><span class="hljs-attribute">b1</span>      <span class="hljs-number">00005</span> (+<span class="hljs-number">5</span>) RET<br>        <span class="hljs-attribute">00006</span> (?) END<br></code></pre></td></tr></table></figure><p>gc.Progs.Flush() 函数源码：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func (pp *Progs) Flush() &#123;<br><span class="hljs-attribute">plist</span> := &amp;obj<span class="hljs-variable">.Plist</span>&#123;Firstpc: pp<span class="hljs-variable">.Text</span>, Curfn: pp<span class="hljs-variable">.curfn</span>&#125;<br>// 调用 obj<span class="hljs-variable">.Flushlist</span>() 对 SSA 中间代码 进行 逐行转换<br>obj<span class="hljs-variable">.Flushplist</span>(Ctxt, plist, pp<span class="hljs-variable">.NewProg</span>, myimportpath)<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="汇编器-assembler">汇编器 Assembler</span></h4><p>汇编器：将汇编语言翻译为机器语言的程序</p><p>golang 的汇编器是基于 Plan 9 汇编器的输入类型设计的，且网上对汇编语言 Plan9 以及 汇编器的资料 简直是凤毛麟角。</p><p>所以，很难去分析 golang 汇编器的实现。</p><p>汇编代码是由 <a href="https://github.com/golang/go/blob/b2482e481722357c6daa98ef074d8eaf8ac4baf3/src/cmd/internal/obj/plist.go#L22">src/cmd/internal/obj.Flushplist</a> 这个函数生成的。</p><ol><li>分析目标架构类型</li><li>调用目标架构特定的 Preprocess 和 Assemble 方法</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe">func Flushplist(ctxt *Link, plist *Plist, <span class="hljs-keyword">new</span><span class="hljs-type">prog</span> ProgAlloc, myimportpath string) &#123;<br>......<br><br>    <span class="hljs-comment">// 转换为 机器码</span><br><span class="hljs-comment">// Turn functions into machine code images.</span><br><span class="hljs-keyword">for</span> <span class="hljs-literal">_</span>, s :<span class="hljs-type"></span>= range text &#123;<br>mkfwd(s)<br>linkpatch(ctxt, s, <span class="hljs-keyword">new</span><span class="hljs-type">prog</span>)<br><span class="hljs-comment">// 调用 对应架构的 Preprocess()</span><br>ctxt.Arch.Preprocess(ctxt, s, <span class="hljs-keyword">new</span><span class="hljs-type">prog</span>)<br><span class="hljs-comment">// 调用 对应架构的 Assemble()</span><br>ctxt.Arch.Assemble(ctxt, s, <span class="hljs-keyword">new</span><span class="hljs-type">prog</span>)<br><span class="hljs-keyword">if</span> ctxt.Errors &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>linkpcln(ctxt, s)<br>ctxt.populateDWARF(plist.Curfn, s, myimportpath)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处的源码位于： <a href="https://github.com/golang/go/tree/498eaee461adefd5e578e62c134382ece94198da/src/cmd/internal/obj">src/cmd/internal/obj</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">x86</span> 架构 -&gt;</span> /x86<br><span class="hljs-function"><span class="hljs-title">arm</span> 架构 -&gt;</span> /arm<br></code></pre></td></tr></table></figure><p>以 x86 架构为例，最终调用的是 <a href="https://github.com/golang/go/blob/b2482e481722357c6daa98ef074d8eaf8ac4baf3/src/cmd/internal/obj/x86/obj6.go#L565">cmd/internal/obj/x86.preprocess()</a> 以及 <a href="https://github.com/golang/go/blob/498eaee461adefd5e578e62c134382ece94198da/src/cmd/internal/obj/x86/asm6.go#L1848">cmd/internal/obj/x86.span6()</a>。</p><p>以 hello.go 为例，最后生成的汇编指令为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 编译指令</span><br>GOOS=linux GOARCH=amd64 go tool compile -S hello<span class="hljs-selector-class">.go</span><br><br><span class="hljs-comment">// 汇编代码</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-selector-class">.hello</span> STEXT nosplit size=<span class="hljs-number">15</span> args=<span class="hljs-number">0</span>x10 locals=<span class="hljs-number">0</span>x0<br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">3</span>)TEXT<span class="hljs-string">&quot;&quot;</span><span class="hljs-selector-class">.hello</span>(SB), NOSPLIT, $<span class="hljs-number">0</span>-<span class="hljs-number">16</span><br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">3</span>)FUNCDATA$<span class="hljs-number">0</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)<br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">3</span>)FUNCDATA$<span class="hljs-number">1</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)<br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">3</span>)FUNCDATA$<span class="hljs-number">3</span>, gclocals·<span class="hljs-number">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)<br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">4</span>)PCDATA$<span class="hljs-number">2</span>, $<span class="hljs-number">0</span><br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">4</span>)PCDATA$<span class="hljs-number">0</span>, $<span class="hljs-number">0</span><br><span class="hljs-number">0</span>x0000 <span class="hljs-number">00000</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">4</span>)MOVQ<span class="hljs-string">&quot;&quot;</span>.a+<span class="hljs-number">8</span>(SP), AX<br><span class="hljs-number">0</span>x0005 <span class="hljs-number">00005</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">4</span>)ADDQ$<span class="hljs-number">2</span>, AX<br><span class="hljs-number">0</span>x0009 <span class="hljs-number">00009</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">5</span>)MOVQAX, <span class="hljs-string">&quot;&quot;</span>.~r1+<span class="hljs-number">16</span>(SP)<br><span class="hljs-number">0</span>x000e <span class="hljs-number">00014</span> (<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span>:<span class="hljs-number">5</span>)RET<br><span class="hljs-number">0</span>x0000 <span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span> <span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">02</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">10</span> c3     H.D$<span class="hljs-selector-class">.H</span>..<span class="hljs-selector-class">.H</span>.D$..<br>...<br></code></pre></td></tr></table></figure><h3><span id="conclusion">Conclusion</span></h3><ol><li>机器码生成与底层交互较多，涉及到 内存、寄存器等较为难理解的原理和代码</li><li>作为开发人员，掌握这些知识的投资回报率太低，有所了解即可</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.4 编译原理 -- SSA中间代码生成</title>
    <link href="/2021/12/30/2-4-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-SSA%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    <url>/2021/12/30/2-4-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-SSA%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h2><span id="24-中间代码生成">2.4 中间代码生成</span></h2><p>词法、语法分析 &amp; 类型检查 都属于 compile frontend，负责对源码进行分析并检查其中存在的词法和语法错误</p><p>经过以上两个阶段生成的 AST，不包含任何的语法错误。</p><p>中间代码生成 &amp; 机器码生成 都属于 compile backend。</p><h3><span id="241-中间代码">2.4.1 中间代码</span></h3><p>中间代码是 编译器 或者 虚拟机 使用的语言，它可以用来帮组我们分析计算机程序。</p><p>在编译过程中，编译器会在将源代码转换到机器码的过程中，先把源代码转换成一种中间的表示形式 – 中间代码</p><p>设计优点：</p><ol><li>更接近机器语言的表现形式，易于分析</li><li>编译器需要对接到多种平台，要翻译成多种机器码，通过添加 中间代码 简化了这一过程</li><li>源代码 -&gt; ASt -&gt; 中间代码（适配多种平台, 架构） -&gt; 机器码</li><li>对 中间代码 的优化和分析，相比于 机器语言 要简单。如：golang compile 在生成 中间码时，通过了 SSA 这一特性进行了优化</li></ol><h4><span id="golang-compile-中间码生成的-入口">golang compile 中间码生成的 入口</span></h4><p>编译器主函数 <a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/gc/main.go#L148">src/cmd/compile/internal/gc.Main()</a> 中关于 中间代码生成 的代码如下；其主要逻辑为：</p><ol><li>通过 gc.initssaconfig() 初始化 SSA 生成的配置</li><li>调用 gc.funccompile() 函数 生成 中间代码</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Main</span><span class="hljs-params">(archInit <span class="hljs-keyword">func</span>(*Arch)</span>)</span> &#123;<br><br>...<br><br>    <span class="hljs-comment">// Prepare for SSA compilation.</span><br><span class="hljs-comment">// This must be before peekitabs, because peekitabs</span><br><span class="hljs-comment">// can trigger function compilation.</span><br>initssaconfig()<br><br><span class="hljs-comment">// Just before compilation, compile itabs found on</span><br><span class="hljs-comment">// the right side of OCONVIFACE so that methods</span><br><span class="hljs-comment">// can be de-virtualized during compilation.</span><br>Curfn = <span class="hljs-literal">nil</span><br>peekitabs()<br><br><span class="hljs-comment">// Phase 8: Compile top level functions.</span><br><span class="hljs-comment">// Don&#x27;t use range--walk can add functions to xtop.</span><br>timings.Start(<span class="hljs-string">&quot;be&quot;</span>, <span class="hljs-string">&quot;compilefuncs&quot;</span>)<br>fcount = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> n.Op == ODCLFUNC &#123;<br>funccompile(n)<br>fcount++<br>&#125;<br>&#125;<br>timings.AddEvent(fcount, <span class="hljs-string">&quot;funcs&quot;</span>)<br><br>compileFunctions()<br>    <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="242-配置初始化">2.4.2 配置初始化</span></h3><p>gc.initssaconfig() 函数初始化了 SSA配置，进行了 中间代码生成 之前的准备工作：</p><ol><li>初始化结构体 ssa.Type, 缓存可能会用到的类型指针</li><li>初始化 SSA配置 以及 可能会用到的 runtime 函数</li><li>根据当前编译的架构、设备信息，初始化特定的 ABI（Application Binary Interface 应用二进制接口）</li></ol><p>源码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// gc.initssaconfig()</span><br>func initssaconfig() &#123;<br>    <span class="hljs-comment">// 1. 初始化结构体 ssa.Types</span><br>types_ := ssa<span class="hljs-selector-class">.NewTypes</span>()<br><br><span class="hljs-keyword">if</span> thearch<span class="hljs-selector-class">.SoftFloat</span> &#123;<br>softfloatInit()<br>&#125;<br>    <br>    <span class="hljs-comment">// 1. 调用 types.NewPtr() 缓存 可能会用到的 类型指针</span><br><span class="hljs-comment">// Generate a few pointer types that are uncommon in the frontend but common in the backend.</span><br><span class="hljs-comment">// Caching is disabled in the backend, so generating these here avoids allocations.</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINTER]</span>)                             <span class="hljs-comment">// *interface&#123;&#125;</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TSTRING]</span>))              <span class="hljs-comment">// **string</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewSlice</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINTER]</span>))             <span class="hljs-comment">// *[]interface&#123;&#125;</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewPtr</span>(types.Bytetype))                    <span class="hljs-comment">// **byte</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewSlice</span>(types.Bytetype))                  <span class="hljs-comment">// *[]byte</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewSlice</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TSTRING]</span>))            <span class="hljs-comment">// *[]string</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TUINT8]</span>))) <span class="hljs-comment">// ***uint8</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINT16]</span>)                             <span class="hljs-comment">// *int16</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types<span class="hljs-selector-class">.Types</span><span class="hljs-selector-attr">[TINT64]</span>)                             <span class="hljs-comment">// *int64</span><br>_ = types<span class="hljs-selector-class">.NewPtr</span>(types.Errortype)                                 <span class="hljs-comment">// *error</span><br>types<span class="hljs-selector-class">.NewPtrCacheEnabled</span> = false<br><br><span class="hljs-comment">// 2. 通过 ssa.NewConfig() 初始化 SSA 配置，需要传入：</span><br><span class="hljs-comment">// CPU 架构、ssa.Types 结构体、上下文信息、debug 配置</span><br>ssaConfig = ssa<span class="hljs-selector-class">.NewConfig</span>(thearch<span class="hljs-selector-class">.LinkArch</span><span class="hljs-selector-class">.Name</span>, *types_, Ctxt, Debug<span class="hljs-selector-class">.N</span> == <span class="hljs-number">0</span>)<br>ssaConfig<span class="hljs-selector-class">.SoftFloat</span> = thearch<span class="hljs-selector-class">.SoftFloat</span><br>ssaConfig<span class="hljs-selector-class">.Race</span> = flag_race<br>ssaCaches = make(<span class="hljs-selector-attr">[]</span>ssa<span class="hljs-selector-class">.Cache</span>, nBackendWorkers)<br>    <br>    <span class="hljs-comment">// 2. 初始化 可能会用到的 运行时函数</span><br><span class="hljs-comment">// Set up some runtime functions we&#x27;ll need to call.</span><br>assertE2I = sysfunc(<span class="hljs-string">&quot;assertE2I&quot;</span>)<br>    ......<br>deferproc = sysfunc(<span class="hljs-string">&quot;deferproc&quot;</span>)            <span class="hljs-comment">// defer() func</span><br>deferprocStack = sysfunc(<span class="hljs-string">&quot;deferprocStack&quot;</span>)<br>......<br>gcWriteBarrier = sysfunc(<span class="hljs-string">&quot;gcWriteBarrier&quot;</span>)<br>goschedguarded = sysfunc(<span class="hljs-string">&quot;goschedguarded&quot;</span>)<br>growslice = sysfunc(<span class="hljs-string">&quot;growslice&quot;</span>)            <span class="hljs-comment">// slice grow</span><br>    ......<br>newobject = sysfunc(<span class="hljs-string">&quot;newobject&quot;</span>)<br>newproc = sysfunc(<span class="hljs-string">&quot;newproc&quot;</span>)                <span class="hljs-comment">// new() func</span><br>panicdivide = sysfunc(<span class="hljs-string">&quot;panicdivide&quot;</span>)        <span class="hljs-comment">// panic() func</span><br>......<br>x86HasPOPCNT = sysvar(<span class="hljs-string">&quot;x86HasPOPCNT&quot;</span>)       <span class="hljs-comment">// bool</span><br>x86HasSSE41 = sysvar(<span class="hljs-string">&quot;x86HasSSE41&quot;</span>)         <span class="hljs-comment">// bool</span><br>x86HasFMA = sysvar(<span class="hljs-string">&quot;x86HasFMA&quot;</span>)             <span class="hljs-comment">// bool</span><br>armHasVFPv4 = sysvar(<span class="hljs-string">&quot;armHasVFPv4&quot;</span>)         <span class="hljs-comment">// bool</span><br>arm64HasATOMICS = sysvar(<span class="hljs-string">&quot;arm64HasATOMICS&quot;</span>) <span class="hljs-comment">// bool</span><br>typedmemclr = sysfunc(<span class="hljs-string">&quot;typedmemclr&quot;</span>)<br>typedmemmove = sysfunc(<span class="hljs-string">&quot;typedmemmove&quot;</span>)<br>Udiv = sysvar(<span class="hljs-string">&quot;udiv&quot;</span>)                 <span class="hljs-comment">// asm func with special ABI</span><br>writeBarrier = sysvar(<span class="hljs-string">&quot;writeBarrier&quot;</span>) <span class="hljs-comment">// struct &#123; bool; ... &#125;</span><br>zerobaseSym = sysvar(<span class="hljs-string">&quot;zerobase&quot;</span>)<br>    <br>    <span class="hljs-comment">// 3. 根据当前编译的架构、设备信息，初始化特定的 ABI</span><br><span class="hljs-comment">// asm funcs with special ABI</span><br><span class="hljs-keyword">if</span> thearch<span class="hljs-selector-class">.LinkArch</span><span class="hljs-selector-class">.Name</span> == <span class="hljs-string">&quot;amd64&quot;</span> &#123;<br>    <span class="hljs-comment">// amd64 x86</span><br>GCWriteBarrierReg = map<span class="hljs-selector-attr">[int16]</span>*obj.LSym&#123;<br>x86<span class="hljs-selector-class">.REG_AX</span>: sysfunc(<span class="hljs-string">&quot;gcWriteBarrier&quot;</span>),<br>            ......<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// wsam</span><br><span class="hljs-keyword">if</span> thearch<span class="hljs-selector-class">.LinkArch</span><span class="hljs-selector-class">.Family</span> == sys<span class="hljs-selector-class">.Wasm</span> &#123;<br>BoundsCheckFunc<span class="hljs-selector-attr">[ssa.BoundsIndex]</span> = sysfunc(<span class="hljs-string">&quot;goPanicIndex&quot;</span>)<br>        ......<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 非 wsam </span><br>BoundsCheckFunc<span class="hljs-selector-attr">[ssa.BoundsIndex]</span> = sysfunc(<span class="hljs-string">&quot;panicIndex&quot;</span>)<br>        ......<br>&#125;<br><span class="hljs-keyword">if</span> thearch<span class="hljs-selector-class">.LinkArch</span><span class="hljs-selector-class">.PtrSize</span> == <span class="hljs-number">4</span> &#123;<br>ExtendCheckFunc<span class="hljs-selector-attr">[ssa.BoundsIndex]</span> = sysvar(<span class="hljs-string">&quot;panicExtendIndex&quot;</span>)<br>        ......<br>&#125;<br><br><span class="hljs-comment">// Wasm (all asm funcs with special ABIs)</span><br>WasmMove = sysvar(<span class="hljs-string">&quot;wasmMove&quot;</span>)<br>WasmZero = sysvar(<span class="hljs-string">&quot;wasmZero&quot;</span>)<br>WasmDiv = sysvar(<span class="hljs-string">&quot;wasmDiv&quot;</span>)<br>WasmTruncS = sysvar(<span class="hljs-string">&quot;wasmTruncS&quot;</span>)<br>WasmTruncU = sysvar(<span class="hljs-string">&quot;wasmTruncU&quot;</span>)<br>SigPanic = sysfunc(<span class="hljs-string">&quot;sigpanic&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="ssanewtypes-对-ssatypes-结构体的初始化">ssa.NewTypes() 对 ssa.Types 结构体的初始化</span></h4><p>初始化的第一步就调用了 ssa.NewTypes() 对结构体 ssa.Types 进行了初始化：</p><ol><li>new() 创建 ssa.Types 结构体</li><li>通过 SetTypPtrs() 填充/缓存 类型信息</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// NewTypes creates and populates a Types.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTypes</span><span class="hljs-params">()</span> *<span class="hljs-title">Types</span></span> &#123;<br>t := <span class="hljs-built_in">new</span>(Types)<br>t.SetTypPtrs()<br><span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></td></tr></table></figure><p>ssa.Types 结构体定义为：包含了 golang 基本类型对应的指针</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Types</span> struct &#123;<br><span class="hljs-type">Bool</span>       *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Int8</span>       *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Int16</span>      *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Int32</span>      *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Int64</span>      *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt8</span>      *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt16</span>     *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt32</span>     *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt64</span>     *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Int</span>        *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Float32</span>    *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Float64</span>    *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt</span>       *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Uintptr</span>    *types.<span class="hljs-type">Type</span><br><span class="hljs-type">String</span>     *types.<span class="hljs-type">Type</span><br><span class="hljs-type">BytePtr</span>    *types.<span class="hljs-type">Type</span> // <span class="hljs-type">TODO</span>: use unsafe.<span class="hljs-type">Pointer</span> instead?<br><span class="hljs-type">Int32Ptr</span>   *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UInt32Ptr</span>  *types.<span class="hljs-type">Type</span><br><span class="hljs-type">IntPtr</span>     *types.<span class="hljs-type">Type</span><br><span class="hljs-type">UintptrPtr</span> *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Float32Ptr</span> *types.<span class="hljs-type">Type</span><br><span class="hljs-type">Float64Ptr</span> *types.<span class="hljs-type">Type</span><br><span class="hljs-type">BytePtrPtr</span> *types.<span class="hljs-type">Type</span><br>&#125;<br></code></pre></td></tr></table></figure><p>SetTypPtrs() 函数具体实现：</p><ol><li>基础类型如：Bool, Int, String 等，使用了默认的 types.TBOOL 等进行了填充</li><li>指针类型如：BytePtr, IntPtr 等，调用 types.NewPtr() 生成对应类型的指针<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// SetTypPtrs populates t.<br>func (t *<span class="hljs-keyword">Types</span>) SetTypPtrs() &#123;<br>t.Bool = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TBOOL]<br>t.Int8 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT8]<br>t.Int16 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT16]<br>t.Int32 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT32]<br>t.Int64 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT64]<br>t.UInt8 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT8]<br>t.UInt16 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT16]<br>t.UInt32 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT32]<br>t.UInt64 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT64]<br>t.Int = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT]<br>t.Float32 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TFLOAT32]<br>t.Float64 = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TFLOAT64]<br>t.UInt = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT]<br>t.Uintptr = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINTPTR]<br>t.String = <span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TSTRING]<br>t.BytePtr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT8])<br>t.Int32Ptr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT32])<br>t.UInt32Ptr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT32])<br>t.IntPtr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TINT])<br>t.UintptrPtr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINTPTR])<br>t.Float32Ptr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TFLOAT32])<br>t.Float64Ptr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TFLOAT64])<br>t.BytePtrPtr = <span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.NewPtr(<span class="hljs-keyword">types</span>.<span class="hljs-keyword">Types</span>[<span class="hljs-keyword">types</span>.TUINT8]))<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>types.NewPtr() 函数实现如下：</p><ol><li>根据传入的类型 生成 指向目标类型的指针</li><li>编译器配置 NewPtrCacheEnabled = true 时，会将 生成的指针类型 缓存到 当前类型中，优化类型指针的获取效率</li></ol><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">// NewPtr returns the pointer type pointing to t.</span><br><span class="hljs-variable">func</span> <span class="hljs-function"><span class="hljs-title">NewPtr</span>(<span class="hljs-variable">elem</span> *<span class="hljs-variable">Type</span>) *<span class="hljs-variable">Type</span> &#123;</span><br><span class="hljs-function"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">elem</span> == <span class="hljs-variable"><span class="hljs-literal">nil</span></span> &#123;</span><br><span class="hljs-function"><span class="hljs-title">Fatalf</span>(<span class="hljs-string">&quot;NewPtr: pointer to elem Type is nil&quot;</span>)</span><br>&#125;<br><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">t</span> := <span class="hljs-variable">elem.Cache.ptr</span>; <span class="hljs-variable">t</span> <span class="hljs-variable">!</span>= <span class="hljs-variable"><span class="hljs-literal">nil</span></span> &#123;<br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">t.Elem</span>() <span class="hljs-variable">!</span>= <span class="hljs-variable">elem</span> &#123;<br><span class="hljs-function"><span class="hljs-title">Fatalf</span>(<span class="hljs-string">&quot;NewPtr: elem mismatch&quot;</span>)</span><br>&#125;<br><span class="hljs-variable">return</span> <span class="hljs-variable">t</span><br>&#125;<br><br><span class="hljs-variable">t</span> := <span class="hljs-function"><span class="hljs-title">New</span>(<span class="hljs-variable">TPTR</span>)</span><br><span class="hljs-variable">t.Extra</span> = <span class="hljs-variable">Ptr</span>&#123;<span class="hljs-variable">Elem</span>: <span class="hljs-variable">elem</span>&#125;<br><span class="hljs-variable">t.Width</span> = <span class="hljs-function"><span class="hljs-title">int64</span>(<span class="hljs-variable">Widthptr</span>)</span><br><span class="hljs-variable">t.Align</span> = <span class="hljs-function"><span class="hljs-title">uint8</span>(<span class="hljs-variable">Widthptr</span>)</span><br><br><span class="hljs-comment">// 是否 缓存</span><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">NewPtrCacheEnabled</span> &#123;<br><span class="hljs-variable">elem.Cache.ptr</span> = <span class="hljs-variable">t</span><br>&#125;<br><span class="hljs-variable">return</span> <span class="hljs-variable">t</span><br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="ssa-配置-amp-runtime-func-初始化">ssa 配置 &amp; runtime func 初始化</span></h4><p>ssa 配置初始化，调用了  <a href="https://github.com/golang/go/blob/15f01d6ae9853fd51ee8842d9af93d04ce25458c/src/cmd/compile/internal/ssa/config.go#L208">cmd/compile/internal/ssa.NewConfig()</a></p><p>根据传入的 CPU 架构等配置 设置用于生成中间代码和机器码的函数，当前编译器使用的指针、寄存器大小、可用寄存器列表、掩码等编译选项：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// NewConfig returns a new configuration object for the given architecture.</span><br>func NewConfig(arch string, types Types, ctxt *obj<span class="hljs-selector-class">.Link</span>, optimize bool) *Config &#123;<br>    <span class="hljs-comment">// 初始化 Config 结构体</span><br>c := &amp;Config&#123;arch: arch, Types: types&#125;<br>c<span class="hljs-selector-class">.useAvg</span> = true<br>c<span class="hljs-selector-class">.useHmul</span> = true<br><span class="hljs-comment">// 根据架构不通，设定不同配置</span><br>switch arch &#123;<br>case <span class="hljs-string">&quot;amd64&quot;</span>:<br>c<span class="hljs-selector-class">.PtrSize</span> = <span class="hljs-number">8</span>   <span class="hljs-comment">// 指针大小</span><br>c<span class="hljs-selector-class">.RegSize</span> = <span class="hljs-number">8</span>   <span class="hljs-comment">// 寄存器大小</span><br>c<span class="hljs-selector-class">.lowerBlock</span> = rewriteBlockAMD64<br>c<span class="hljs-selector-class">.lowerValue</span> = rewriteValueAMD64<br>c<span class="hljs-selector-class">.splitLoad</span> = rewriteValueAMD64splitload<br>c<span class="hljs-selector-class">.registers</span> = registersAMD64<span class="hljs-selector-attr">[:]</span><br>c<span class="hljs-selector-class">.gpRegMask</span> = gpRegMaskAMD64<br>c<span class="hljs-selector-class">.fpRegMask</span> = fpRegMaskAMD64<br>c<span class="hljs-selector-class">.FPReg</span> = framepointerRegAMD64<br>c<span class="hljs-selector-class">.LinkReg</span> = linkRegAMD64<br>c<span class="hljs-selector-class">.hasGReg</span> = false<br>case <span class="hljs-string">&quot;386&quot;</span>:<br>        <span class="hljs-comment">// 386 架构</span><br>        .....<br>case <span class="hljs-string">&quot;arm&quot;</span>:<br><span class="hljs-comment">// arm</span><br>......<br>case <span class="hljs-string">&quot;arm64&quot;</span>:<br><span class="hljs-comment">// arm64</span><br>    ......<br>    ......<br>default:<br>ctxt<span class="hljs-selector-class">.Diag</span>(<span class="hljs-string">&quot;arch %s not implemented&quot;</span>, arch)<br>&#125;<br><span class="hljs-comment">// 上下文</span><br>c<span class="hljs-selector-class">.ctxt</span> = ctxt<br><span class="hljs-comment">// 优化选项</span><br>c<span class="hljs-selector-class">.optimize</span> = optimize<br>c<span class="hljs-selector-class">.useSSE</span> = true<br>c<span class="hljs-selector-class">.UseFMA</span> = true<br><br>    ......<br><br>    <span class="hljs-comment">// GC 寄存器配置</span><br><span class="hljs-comment">// Create the GC register map index.</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> This is only used for debug printing. Maybe export config.registers?</span><br>gcRegMapSize := int16(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, r := range c<span class="hljs-selector-class">.registers</span> &#123;<br><span class="hljs-keyword">if</span> r.gcNum+<span class="hljs-number">1</span> &gt; gcRegMapSize &#123;<br>gcRegMapSize = r<span class="hljs-selector-class">.gcNum</span> + <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>c<span class="hljs-selector-class">.GCRegMap</span> = make(<span class="hljs-selector-attr">[]</span>*Register, gcRegMapSize)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span>, r := range c<span class="hljs-selector-class">.registers</span> &#123;<br><span class="hljs-keyword">if</span> r<span class="hljs-selector-class">.gcNum</span> != -<span class="hljs-number">1</span> &#123;<br>c<span class="hljs-selector-class">.GCRegMap</span><span class="hljs-selector-attr">[r.gcNum]</span> = &amp;c<span class="hljs-selector-class">.registers</span><span class="hljs-selector-attr">[i]</span><br>&#125;<br>&#125;<br><br>return c<br>&#125;<br></code></pre></td></tr></table></figure><p>配置初始化完成后，通过 ssa.sysfunc() 初始化一些编译器可能用到的 runtime func，如：defer(), newproc(), growslice() 等</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">// func </span><br><span class="hljs-comment">// Set up some runtime functions we&#x27;ll need to call.</span><br>...<br><span class="hljs-comment">// defer</span><br><span class="hljs-variable">deferproc</span> = <span class="hljs-function"><span class="hljs-title">sysfunc</span>(<span class="hljs-string">&quot;deferproc&quot;</span>)</span><br><span class="hljs-variable">deferprocStack</span> = <span class="hljs-function"><span class="hljs-title">sysfunc</span>(<span class="hljs-string">&quot;deferprocStack&quot;</span>)</span><br><span class="hljs-variable">Deferreturn</span> = <span class="hljs-function"><span class="hljs-title">sysfunc</span>(<span class="hljs-string">&quot;deferreturn&quot;</span>)</span><br>...<br><span class="hljs-comment">// growslice</span><br><span class="hljs-variable">growslice</span> = <span class="hljs-function"><span class="hljs-title">sysfunc</span>(<span class="hljs-string">&quot;growslice&quot;</span>)</span><br>...<br><span class="hljs-comment">// newproc</span><br><span class="hljs-variable">newproc</span> = <span class="hljs-function"><span class="hljs-title">sysfunc</span>(<span class="hljs-string">&quot;newproc&quot;</span>)</span><br>...<br></code></pre></td></tr></table></figure><h4><span id="gcfuncccompile-调用链">gc.funcccompile() 调用链</span></h4><p>ssa 相关配置初始化完成后，将调用 <a href="https://github.com/golang/go/blob/912262b806a432a29302e0cee45e4f42ef7038a2/src/cmd/compile/internal/gc/pgen.go#L195">cmd/compile/internal/gc.funccompile ()</a> 针对每一个源文件生成 中间代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// gc.funccompile()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">funccompile</span>(fn <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span> &#123;<br><span class="hljs-operator">......</span><br><br>dclcontext <span class="hljs-operator">=</span> <span class="hljs-type">PAUTO</span><br><span class="hljs-type">Curfn</span> <span class="hljs-operator">=</span> fn<br>    <br>    <span class="hljs-comment">// 实际调用了 gc.compile()</span><br>compile(fn)<br><br><span class="hljs-type">Curfn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>dclcontext <span class="hljs-operator">=</span> <span class="hljs-type">PEXTERN</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/912262b806a432a29302e0cee45e4f42ef7038a2/src/cmd/compile/internal/gc/pgen.go#L226">cmd/compile/internal/gc.compile()</a> 函数的逻辑较为复杂：</p><ol><li>调用 gc.walk() 遍历 AST 中的节点，同时将 关键字 和 内建函数转换成 函数调用</li><li>调用 gc.compileSSA() 将 AST 转换成 中间代码</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">func</span> compile(<span class="hljs-meta">fn</span> *Node) &#123;<br><br>    ......<br><br>    <span class="hljs-comment">// 遍历 &amp; 替换</span><br>walk(<span class="hljs-meta">fn</span>)<br><span class="hljs-meta">if</span> nerrors != <span class="hljs-number">0</span> &#123;<br>return<br>&#125;<br><span class="hljs-meta">if</span> instrumenting &#123;<br>instrument(<span class="hljs-meta">fn</span>)<br>&#125;<br><br>    ......<br><br><span class="hljs-meta">if</span> compilenow(<span class="hljs-meta">fn</span>) &#123;<br>    <span class="hljs-comment">// AST 转换为 SSA 中间代码</span><br>compileSSA(<span class="hljs-meta">fn</span>, <span class="hljs-number">0</span>)<br>&#125; <span class="hljs-meta">else</span> &#123;<br>compilequeue = append(compilequeue, <span class="hljs-meta">fn</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="243-遍历和替换">2.4.3 遍历和替换</span></h3><p><a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/walk.go#L21">cmd/compile/internal/gc.walk()</a> 遍历了 AST 的全部节点，将 关键字 和 内联函数 替换为 函数调用。</p><p>walk() 和相关函数的定义如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walk</span>(fn <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span><br><span class="hljs-comment">// append()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkappend</span>(n <span class="hljs-operator">*</span><span class="hljs-type">Node</span>, <span class="hljs-keyword">init</span> <span class="hljs-operator">*</span><span class="hljs-type">Nodes</span>, dst <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span> <span class="hljs-operator">*</span><span class="hljs-type">Node</span><br><span class="hljs-operator">...</span><br><span class="hljs-comment">// range</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkrange</span>(n <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span> <span class="hljs-operator">*</span><span class="hljs-type">Node</span><br><span class="hljs-comment">// select</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkselect</span>(sel <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span><br><span class="hljs-comment">// select case</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkselectcases</span>(cases <span class="hljs-operator">*</span><span class="hljs-type">Nodes</span>)</span> []<span class="hljs-operator">*</span><span class="hljs-type">Node</span><br><span class="hljs-comment">// statement</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkstmt</span>(n <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span> <span class="hljs-operator">*</span><span class="hljs-type">Node</span><br><span class="hljs-comment">// statement list</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkstmtlist</span>(s []<span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span><br><span class="hljs-comment">// switch case</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkswitch</span>(sw <span class="hljs-operator">*</span><span class="hljs-type">Node</span>)</span><br></code></pre></td></tr></table></figure><p>关键字、操作符 到 runtime func 的映射关系，如下图所示：</p><img src="/2021/12/30/2-4-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-SSA%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/golang-keyword-and-builtin-mapping.png" class title="映射关系"><p>映射后的函数的<strong>定义</strong>位于 运行时包： <a href="https://github.com/golang/go/blob/dev.boringcrypto.go1.15/src/cmd/compile/internal/gc/builtin/runtime.go">src/cmd/compile/internal/gc/builtin/runtime.go</a> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// map</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap64</span><span class="hljs-params">(mapType *<span class="hljs-keyword">byte</span>, hint <span class="hljs-keyword">int64</span>, mapbuf *any)</span> <span class="hljs-params">(hmap <span class="hljs-keyword">map</span>[any]any)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap</span><span class="hljs-params">(mapType *<span class="hljs-keyword">byte</span>, hint <span class="hljs-keyword">int</span>, mapbuf *any)</span> <span class="hljs-params">(hmap <span class="hljs-keyword">map</span>[any]any)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap_small</span><span class="hljs-params">()</span> <span class="hljs-params">(hmap <span class="hljs-keyword">map</span>[any]any)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapaccess1</span><span class="hljs-params">(mapType *<span class="hljs-keyword">byte</span>, hmap <span class="hljs-keyword">map</span>[any]any, key *any)</span> <span class="hljs-params">(val *any)</span></span><br>...<br><span class="hljs-comment">// channel</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makechan64</span><span class="hljs-params">(chanType *<span class="hljs-keyword">byte</span>, size <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(hchan <span class="hljs-keyword">chan</span> any)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makechan</span><span class="hljs-params">(chanType *<span class="hljs-keyword">byte</span>, size <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(hchan <span class="hljs-keyword">chan</span> any)</span></span><br>...<br></code></pre></td></tr></table></figure><p>相关运行时函数的实现，仍位于 <a href="https://github.com/golang/go/tree/master/src/runtime">src/runtime</a> 包中</p><p>由此可分析得到，关键字 和 内置函数的功能是由 golang compile 和 runtime 共同完成的</p><p>以 channel 为例，包含了 发送消息 &amp; 接收消息 两个操作，对应到 golang compile 为 OSEND 和 ORECV，<a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/walk.go#L1562">cmd/compile/internal/gc.walkexpr()</a> 根据 操作类型 的不同，进入到不同的分支：</p><ol><li>OSEND：调用 gc.makecall1() 创建一个 OCALL 节点，这个节点包含了当前调用的 runtime.chansend1() 函数 和 参数，新的 OCALL 节点会替换当前的 OSEND 节点，完成了对  OSEND 子树的改写</li><li>ORECV：同上，调用 gc.makecall1() 创建一个 包含 runtime.chanreccv1() 函数 和 参数的 OCALL 节点，替换 ORECV 节点，完成对 ORECV 子树的改写</li><li>OCLOSE：同上，调用 gc.makecall1() 函数 创建一个包含 runtime.closechan() 函数 和参数的 OCALL 节点，替换 OCLOSE 节点</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">walkexpr</span>(n <span class="hljs-operator">*</span><span class="hljs-type">Node</span>, <span class="hljs-keyword">init</span> <span class="hljs-operator">*</span><span class="hljs-type">Nodes</span>)</span> <span class="hljs-operator">*</span><span class="hljs-type">Node</span> &#123;<br><span class="hljs-operator">...</span><br><span class="hljs-keyword">case</span> <span class="hljs-type">OSEND</span>:<br>    <span class="hljs-comment">// c &lt;- x;</span><br>n1 :<span class="hljs-operator">=</span> n.<span class="hljs-type">Right</span><br>n1 <span class="hljs-operator">=</span> assignconv(n1, n.<span class="hljs-type">Left</span>.<span class="hljs-keyword">Type</span>.<span class="hljs-type">Elem</span>(), <span class="hljs-string">&quot;chan send&quot;</span>)<br>n1 <span class="hljs-operator">=</span> walkexpr(n1, <span class="hljs-keyword">init</span>)<br>n1 <span class="hljs-operator">=</span> nod(<span class="hljs-type">OADDR</span>, n1, <span class="hljs-literal">nil</span>)<br>n <span class="hljs-operator">=</span> mkcall1(chanfn(<span class="hljs-string">&quot;chansend1&quot;</span>, <span class="hljs-number">2</span>, n.<span class="hljs-type">Left</span>.<span class="hljs-keyword">Type</span>), <span class="hljs-literal">nil</span>, <span class="hljs-keyword">init</span>, n.<span class="hljs-type">Left</span>, n1)<br><span class="hljs-operator">...</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-type">ORECV</span>:<br>    <span class="hljs-comment">// x = &lt;-c; n.Left is x, n.Right.Left is c.</span><br>    <span class="hljs-comment">// order.stmt made sure x is addressable.</span><br>    n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> walkexpr(n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span>, <span class="hljs-keyword">init</span>)<br>    <br>    n1 :<span class="hljs-operator">=</span> nod(<span class="hljs-type">OADDR</span>, n.<span class="hljs-type">Left</span>, <span class="hljs-literal">nil</span>)<br>    r :<span class="hljs-operator">=</span> n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span> <span class="hljs-comment">// the channel</span><br>    n <span class="hljs-operator">=</span> mkcall1(chanfn(<span class="hljs-string">&quot;chanrecv1&quot;</span>, <span class="hljs-number">2</span>, r.<span class="hljs-keyword">Type</span>), <span class="hljs-literal">nil</span>, <span class="hljs-keyword">init</span>, r, n1)<br>    n <span class="hljs-operator">=</span> walkexpr(n, <span class="hljs-keyword">init</span>)<br>    <span class="hljs-keyword">break</span> opswitch<br>    <br>    <span class="hljs-operator">......</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">OCLOSE</span>:<br>fn :<span class="hljs-operator">=</span> syslook(<span class="hljs-string">&quot;closechan&quot;</span>)<br><br>fn <span class="hljs-operator">=</span> substArgTypes(fn, n.<span class="hljs-type">Left</span>.<span class="hljs-keyword">Type</span>)<br>n <span class="hljs-operator">=</span> mkcall1(fn, <span class="hljs-literal">nil</span>, <span class="hljs-keyword">init</span>, n.<span class="hljs-type">Left</span>)<br><br><span class="hljs-operator">......</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会在编译期间 将 channel 的内置操作（接收、发送、关闭等）转换成对应的 运行时函数，runtime 包中的 chanrecv1() chansend1() 以及 closechan() 分别在<strong>底层实现</strong>了 Channel 的接收、发送、关闭操作</p><h3><span id="244-ssa-生成">2.4.4 ssa 生成</span></h3><p>walk() 函数对 关键字、内置函数 进行了替换后，AST 将不会再改变，随后会调用 <a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/pgen.go#L318">cmd/compile/internal/gc.compileSSA()</a> 将其转换为 中间代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gc.compileSSA()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compileSSA</span><span class="hljs-params">(fn *Node, worker <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-comment">// gc.buildssa() 生成具有 SSA 特性的中间代码</span><br>f := buildssa(fn, worker)<br><span class="hljs-comment">// 初始化结构体 gc.Progs，用于存放 新生成的 SSA 中间代码</span><br>pp := newProgs(fn, worker)<br><span class="hljs-keyword">defer</span> pp.Free()<br><br><span class="hljs-comment">// genssa() 将生成的 SSA 中间代码存入到 gc.Progs</span><br>genssa(f, pp)<br><br>pp.Flush()<br>&#125;<br></code></pre></td></tr></table></figure><p>gc.buildssa() 负责生成具有 SSA 特性的中间代码，为了易于理解其具体执行过程，我们使用 go build 命令观察中间代码的生成过程。示例源代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> hello<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(a <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>c := a + <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><p>通过以下命令对其进行 build，将过程中进行的几十次迭代 保存到 ssa.html 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 指定 GOSSAFUNCC=hello</span><br>GOSSAFUNC=hello <span class="hljs-keyword">go</span> build hello.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p>最左侧是 源代码；中间过程是 源代码生成的 AST；经过了 number lines 等 几十轮 步骤后，最后生成了 ssa 中间代码。</p><p>如下图所示：</p><img src="/2021/12/30/2-4-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-SSA%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/go_compile_ssa_sample.png" class title="SSA中间代码生成示例"><p><a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/ssa.go#L290">src/cmd/compile/internal/gc.buildssa()</a> 简化逻辑如下：</p><ol><li>通过 gc.state.stmtList() 将 AST 转换为 中间代码</li><li>通过 ssa.Compile() 经过几十轮的迭代 更新 SSA 中间代码(ssa 优化)</li></ol><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">// gc.buildssa()<br>func buildssa(fn *Node, worker int) *ssa.Func &#123;<br><span class="hljs-attribute">name</span> := fn<span class="hljs-variable">.funcname</span>()<br>var astBuf *bytes<span class="hljs-variable">.Buffer</span><br>var s state<br>    <br>    ......<br>    <br>fe := ssafn&#123;<br>curfn: fn,<br>log:   printssa &amp;&amp; ssaDumpStdout,<br>&#125;<br>s<span class="hljs-variable">.curfn</span> = fn<br>    <br>    ......<br><br>s<span class="hljs-variable">.f</span> = ssa<span class="hljs-variable">.NewFunc</span>(&amp;fe)<br>s<span class="hljs-variable">.config</span> = ssaConfig<br>s<span class="hljs-variable">.f</span><span class="hljs-variable">.Type</span> = fn<span class="hljs-variable">.Type</span><br>s<span class="hljs-variable">.f</span><span class="hljs-variable">.Config</span> = ssaConfig<br><br>......<br>    <br>    // 1. gc<span class="hljs-variable">.state</span><span class="hljs-variable">.stmtList</span>() 分别将 Func 和 Nbody 部分 转换为 中间代码<br>s<span class="hljs-variable">.stmtList</span>(fn<span class="hljs-variable">.Func</span><span class="hljs-variable">.Enter</span>)<br>s<span class="hljs-variable">.stmtList</span>(fn<span class="hljs-variable">.Nbody</span>)<br>    <br>    ......<br>    <br>    // 2. ssa<span class="hljs-variable">.Compile</span>() 多轮迭代，更新 SSA 中间代码<br>ssa<span class="hljs-variable">.Compile</span>(s<span class="hljs-variable">.f</span>)<br><br>// 返回生成的 ssa 中间代码<br>return s<span class="hljs-variable">.f</span><br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="ast-到-ssa">AST 到 SSA</span></h4><p><a href="https://github.com/golang/go/blob/91b7619310cc05c2ffa3fa558f041a3b3cf6e948/src/cmd/compile/internal/gc/ssa.go#L1042">src/cmd/compile/internal/gc.state.stmtList()</a> 将传入的数组中的每个节点转换为 中间代码。</p><ol><li>遍历数组中的节点</li><li>调用 gc.state.stmt() 将其转换为对应的中间代码</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// stmtList converts the statement list n to SSA and adds it to s.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *state)</span> <span class="hljs-title">stmtList</span><span class="hljs-params">(l Nodes)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> l.Slice() &#123;<br>s.stmt(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/91b7619310cc05c2ffa3fa558f041a3b3cf6e948/src/cmd/compile/internal/gc/ssa.go#L1049">src/cmd/compile/internal/gc.state.stmt()</a> 根据节点操作符的不同，将当前的 AST 节点转换成对应的中间代码：</p><ol><li>switch - case 判断 AST 节点的类型，对应到几种情况：函数调用, 方法调用, defer or go 等关键字</li><li>根据匹配到的节点类型，通过 gc.state.call() 生成 SSA 节点</li></ol><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs coq">// gc.state.stmt()<br>// stmt converts the statement n to SSA and adds it to s.<br>func (s *state) stmt(n *Node) &#123;<br>...<br>// switch - <span class="hljs-built_in">case</span> 判断操作符类型<br>switch n.Op &#123;<br><span class="hljs-built_in">case</span> OCALLMETH, OCALLINTER:<br>s.call(n, callNormal)<br><span class="hljs-keyword">if</span> n.Op == OCALLFUNC &amp;&amp; n.<span class="hljs-keyword">Left</span>.Op == ONAME &amp;&amp; n.<span class="hljs-keyword">Left</span>.<span class="hljs-keyword">Class</span>() == PFUNC &#123;<br><span class="hljs-keyword">if</span> fn := n.<span class="hljs-keyword">Left</span>.Sym.Name; compiling_runtime &amp;&amp; fn == <span class="hljs-string">&quot;throw&quot;</span> |<span class="hljs-type">|</span><br><span class="hljs-type">n</span>.<span class="hljs-keyword">Left</span>.Sym.Pkg == Runtimepkg &amp;&amp; (fn == <span class="hljs-string">&quot;throwinit&quot;</span> |<span class="hljs-type">| fn</span> == <span class="hljs-string">&quot;gopanic&quot;</span> |<span class="hljs-type">| fn</span> == <span class="hljs-string">&quot;panicwrap&quot;</span> |<span class="hljs-type">| fn</span> == <span class="hljs-string">&quot;block&quot;</span> |<span class="hljs-type">| fn</span> == <span class="hljs-string">&quot;panicmakeslicelen&quot;</span> |<span class="hljs-type">| fn</span> == <span class="hljs-string">&quot;panicmakeslicecap&quot;</span>) &#123;<br>m := s.mem()<br>b := s.endBlock()<br>b.Kind = ssa.BlockExit<br>b.SetControl(m)<br>&#125;<br>&#125;<br>// defer 关键字，将 AST 节点转换成 callDefer() 中间代码<br>s.call(n.<span class="hljs-keyword">Left</span>, callDefer)<br><span class="hljs-built_in">case</span> OGO:<br>    // go 关键字，将 AST 节点 转换成 callGo() 中间代码<br>s.call(n.<span class="hljs-keyword">Left</span>, callGo)<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/cmd/compile/internal/gc/ssa.go#L4537">cmd/compile/internal/gc.state.call()</a> switch - case 结构，匹配到对应的 AST 节点操作符，将其实现为静态的底层函数调用，上层的 gc.state.stmtList() 以及 gc.state.call() 只是提供了一种语法糖：</p><ol><li>switch - case 匹配 AST 节点的类型</li><li>根据节点类型，通过 gc.state.newValue1A() 等函数 生成对应的 SSA 节点</li></ol><p>在 AST 到 SSA 的转化过程中，编译器首先会生成 将函数调用的参数放到栈上的中间代码，处理参数之后才回生成一条 运行函数的命令 ssa.OptionalCall()：</p><ol><li>defer -&gt; 插入 runtime.deferproc()</li><li>go -&gt; 插入 runtime.newproc()</li><li>sym != nil -&gt; 其他普通函数 -&gt; 插入 sym.Linksym() 函数符号</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// gc.state.call()</span><br>func (s *state) call(n *Node, k callKind) *ssa.Value &#123;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>var call *ssa.Value<br>switch &#123;<br><span class="hljs-comment">// defer func()</span><br>case k<span class="hljs-operator"> == </span>callDefer:<br>call = s.<span class="hljs-keyword">new</span><span class="hljs-constructor">Value1A(<span class="hljs-params">ssa</span>.OpStaticCall, <span class="hljs-params">types</span>.TypeMem, <span class="hljs-params">deferproc</span>, <span class="hljs-params">s</span>.<span class="hljs-params">mem</span>()</span>)<br><span class="hljs-comment">// go func()</span><br>case k<span class="hljs-operator"> == </span>callGo:<br>call = s.<span class="hljs-keyword">new</span><span class="hljs-constructor">Value1A(<span class="hljs-params">ssa</span>.OpStaticCall, <span class="hljs-params">types</span>.TypeMem, <span class="hljs-params">newproc</span>, <span class="hljs-params">s</span>.<span class="hljs-params">mem</span>()</span>)<br><span class="hljs-comment">// other common func() call</span><br>case sym != nil:<br>call = s.<span class="hljs-keyword">new</span><span class="hljs-constructor">Value1A(<span class="hljs-params">ssa</span>.OpStaticCall, <span class="hljs-params">types</span>.TypeMem, <span class="hljs-params">sym</span>.Linksym()</span>, s.mem<span class="hljs-literal">()</span>)<br>..<br>&#125;<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>&#125;<br></code></pre></td></tr></table></figure><p>以 hello.go 为例，AST -&gt; SSA 过程中，before insert phis 阶段 生成的代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smali">compiling hello<br>hello func(int)<span class="hljs-built_in"> int</span><br><span class="hljs-built_in"></span>  b1:<br>    v1 = InitMem &lt;mem&gt;<br>    v2 = SP &lt;uintptr&gt;<br>    v3 = SB &lt;uintptr&gt; DEAD<br>    v4 = LocalAddr &lt;*int&gt; &#123;a&#125; v2 v1 DEAD<br>    v5 = LocalAddr &lt;*int&gt; &#123;~r1&#125; v2 v1<br>    v6 = Arg &lt;int&gt; &#123;a&#125;<br>    v7 = Const64 &lt;int&gt; [0] DEAD<br>    v8 = Const64 &lt;int&gt; [2]<br>    v9 = Add64 &lt;int&gt; v6 v8 (c[int])<br>    v10 = VarDef &lt;mem&gt; &#123;~r1&#125; v1<br>    v11 = Store &lt;mem&gt; &#123;int&#125; v5 v9 v10<br>    Ret v11<br></code></pre></td></tr></table></figure><p>ssa.go 中有近 7000 行代码，包含了用于处理不同节点的各种方法，golang compile 根据节点类型的不同在一个 巨型 switch - case 语句中，处理不同的情况。</p><h4><span id="多轮转换">多轮转换</span></h4><p>gc.state.stmtList() 以及 gc.state.stmt() 生成了 SSA 中间代码，但是仍需要 golang ccompile 在其基础上进行优化，以去掉无用代码并精简操作数。</p><p>该过程由 <a href="https://github.com/golang/go/blob/4d5bb9c60905b162da8b767a8a133f6b4edcaa65/src/cmd/compile/internal/ssa/compile.go#L29">cmd/compile/internal/ssa.Compile()</a> 执行 &amp; 实现：</p><ol><li>遍历 passes，逐轮进行</li><li>执行 预定义的 fn() 函数，完成本轮转换</li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// gc.state.Compile()</span><br>func Compile(f *Func) &#123;<br>    <span class="hljs-comment">// Log 信息</span><br><span class="hljs-keyword">if</span> f.<span class="hljs-keyword">Log</span>() &#123;<br>f.Logf(<span class="hljs-string">&quot;compiling %s\n&quot;</span>, f.Name)<br>&#125;<br>    <br>    <span class="hljs-params">...</span>..<br>    <br>    <span class="hljs-comment">// 当前处于 init 阶段</span><br>phaseName := <span class="hljs-string">&quot;init&quot;</span><br>    <br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>    <br>    <span class="hljs-comment">// 逐轮 转换</span><br>for _, p := range passes &#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>    <span class="hljs-comment">// 当前阶段</span><br>f.pass = &amp;p<br><span class="hljs-comment">// 进行本轮转换</span><br>p.fn(f)<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br><br>phaseName = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>passes 变量，存储了每一轮处理的名字、使用的函数、required 是否必要字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">var</span> <span class="hljs-string">passes</span> <span class="hljs-string">=</span> [<span class="hljs-string">...</span>]<span class="hljs-string">pass&#123;</span><br>    <span class="hljs-string">//</span> <span class="hljs-number">49</span> <span class="hljs-string">个阶段定义</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;number lines&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">numberLines</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span>&#125;<span class="hljs-string">,</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;early phielim&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">phielim</span>&#125;<span class="hljs-string">,</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;early copyelim&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">copyelim</span>&#125;<span class="hljs-string">,</span><br><span class="hljs-string">...</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;loop rotate&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">loopRotate</span>&#125;<span class="hljs-string">,</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;stackframe&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">stackframe</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span>&#125;<span class="hljs-string">,</span><br>&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;trim&quot;</span>, <span class="hljs-attr">fn:</span> <span class="hljs-string">trim</span>&#125;<span class="hljs-string">,</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>近 50 轮的处理，包含了针对一些机器特定的修改，针对目标架构的改写，进行了如：dead code elime等优化，执行效率有了较大的提升</p><h3><span id="conclusion">Conclusion</span></h3><ol><li>AST -&gt; SSA 中间代码 转换</li><li>改写 AST 语法树中的关键字</li><li>多轮处理，代码优化，提升执行效率</li><li>golang 关键字 和 内置函数 实际上是在 AST 改写阶段进行展开的，对应到了其 runtime 阶段的具体实现</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.3 编译原理 -- 类型检查</title>
    <link href="/2021/12/30/2-3-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/"/>
    <url>/2021/12/30/2-3-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1><span id="23-type-checking类型检查">2.3 Type checking（类型检查）</span></h1><p>经过 Parsing(词法分析 &amp; 语法分析)阶段后，我们得到了源文件的 AST 树，表明了此时的源码文件已经不存在 词法、语法错误等问题</p><p>后续将要执行的类型检查，会遍历 AST 中的节点，对每一个节点的类型进行检验，找出其中存在的 语法 &amp; 类型错误；</p><p>同时在这个过程中可能会改写 AST，剔除不会被执行的代码、优化代码、改写 make, new 等关键字</p><h2><span id="231-强类型-strong-与-弱类型-weak">2.3.1 强类型 Strong 与 弱类型 Weak</span></h2><p>强类型：<br>-&gt; 在编译过程中有更严格的类型限制<br>-&gt; 编译器需要发现 变量赋值、返回值、函数调用时的类型错误<br>-&gt; 典型的强类型语言：C#, Java, Golang</p><p>弱类型：<br>-&gt; 较为宽松的类型限制<br>-&gt; 内置隐式的类型转换<br>-&gt; 在发现类型错误时，可能会在 runtime 中进行隐式的类型转换<br>-&gt; 隐式的类型转换可能会造成 runtime error<br>-&gt; 典型的弱类型语言：PHP, JavaScript</p><p>需要思考的问题：</p><ol><li>类型的转换是 <strong>显式</strong> 还是 <strong>隐式</strong> ？</li><li>编译器是否会帮助编程人员 <strong>推断</strong> 变量的类型 ？</li></ol><h2><span id="232-静态类型-static-与-动态类型-dynamic">2.3.2 静态类型 Static 与 动态类型 Dynamic</span></h2><p>静态类型<br>-&gt; 静态类型检查<br>-&gt; 基于对源代码的分析来确定运行程序类型安全的过程<br>-&gt; 减少了程序在运行时的类型检查<br>-&gt; 在编译期间能够约束变量的类型</p><p>动态类型<br>-&gt; 动态类型检查<br>-&gt; 在 <strong>运行时</strong> 确定程序类型安全的过程</p><p>静态类型，动态类型并不冲突：</p><ol><li>静态类型编程语言 如：Java，既在编译期间进行了类型检查，又在 runtime 中使用 反射机制，根据对象的类型动态执行方法</li><li>动态类型编程语言 如：JavaScript 通过 Flow 工具，也可以在编译期间发现代码中的类型错误</li></ol><h2><span id="233-执行过程-golang-源码实现">2.3.3 执行过程 – golang 源码实现</span></h2><p>golang 的编译器在编译期间使用 静态类型检查 确保了程序运行的类型安全</p><p>golang 较为特殊的一点是：interface{}（可以将其看做简易的 泛型）</p><p>当需要将 interface{} 转换成具体类型时，golang 还会在 runtime 中进行 动态类型检查，如果遇到无法发生转换的情况就会发生程序崩溃</p><h3><span id="main-中的类型转换逻辑">Main() 中的类型转换逻辑</span></h3><p><a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/gc/main.go#L603">src/cmd/compile/internal/gc.Main()</a>  在完成 词法 &amp; 语法分析后，会执行以下操作进行类型检查：</p><ol><li>检查 常量、类型、命名、函数声明的类型，通过 <strong>gc.typecheck()</strong> 函数</li><li>检查 变量赋值 的类型，通过 <strong>gc.typecheck()</strong> 函数</li><li>检查 函数体 的类型，通过 <strong>gc.typecheckslice()</strong> 函数</li><li>检查 hashMap 中的 key-value 类型，通过 <strong>gc.checkMapKeys()</strong> 函数</li></ol><p>具体源码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"># gc.Main()<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Main</span><span class="hljs-params">(archInit <span class="hljs-keyword">func</span>(*Arch)</span>)</span> &#123;<br>    ...<br>    ...<br>    ...<br>    <span class="hljs-comment">// Phase 1: const, type, and names and types of funcs.</span><br><span class="hljs-comment">//   This will gather all the information about types</span><br><span class="hljs-comment">//   and methods but doesn&#x27;t depend on any of it.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//   We also defer type alias declarations until phase 2</span><br><span class="hljs-comment">//   to avoid cycles like #18640.</span><br><span class="hljs-comment">//   TODO(gri) Remove this again once we have a fix for #25838.</span><br><br><span class="hljs-comment">// Don&#x27;t use range--typecheck can add closures to xtop.</span><br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;top1&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> op := n.Op; op != ODCL &amp;&amp; op != OAS &amp;&amp; op != OAS2 &amp;&amp; (op != ODCLTYPE || !n.Left.Name.Param.Alias()) &#123;<br>xtop[i] = typecheck(n, ctxStmt)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Phase 2: Variable assignments.</span><br><span class="hljs-comment">//   To check interface assignments, depends on phase 1.</span><br><br><span class="hljs-comment">// Don&#x27;t use range--typecheck can add closures to xtop.</span><br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;top2&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> op := n.Op; op == ODCL || op == OAS || op == OAS2 || op == ODCLTYPE &amp;&amp; n.Left.Name.Param.Alias() &#123;<br>xtop[i] = typecheck(n, ctxStmt)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Phase 3: Type check function bodies.</span><br><span class="hljs-comment">// Don&#x27;t use range--typecheck can add closures to xtop.</span><br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;func&quot;</span>)<br><span class="hljs-keyword">var</span> fcount <span class="hljs-keyword">int64</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> n.Op == ODCLFUNC &#123;<br>Curfn = n<br>decldepth = <span class="hljs-number">1</span><br>saveerrors()<br>typecheckslice(Curfn.Nbody.Slice(), ctxStmt)<br>checkreturn(Curfn)<br><span class="hljs-keyword">if</span> nerrors != <span class="hljs-number">0</span> &#123;<br>Curfn.Nbody.Set(<span class="hljs-literal">nil</span>) <span class="hljs-comment">// type errors; do not compile</span><br>&#125;<br><span class="hljs-comment">// Now that we&#x27;ve checked whether n terminates,</span><br><span class="hljs-comment">// we can eliminate some obviously dead code.</span><br>deadcode(Curfn)<br>fcount++<br>&#125;<br>&#125;<br><span class="hljs-comment">// With all types checked, it&#x27;s now safe to verify map keys. One single</span><br><span class="hljs-comment">// check past phase 9 isn&#x27;t sufficient, as we may exit with other errors</span><br><span class="hljs-comment">// before then, thus skipping map key errors.</span><br>checkMapKeys()<br>timings.AddEvent(fcount, <span class="hljs-string">&quot;funcs&quot;</span>)<br>    <br>    ...<br>    ...<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="gctypecheck">gc.typecheck()</span></h3><p><a href="https://github.com/golang/go/blob/f5978a09589badb927d3aa96998fc785524cae02/src/cmd/compile/internal/gc/typecheck.go#L202">cmd/compile/internal/gc.typecheck()</a> 做了一些类型检查前的准备工作，实际的逻辑位于 gc.typecheck1() 中</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs elm">// typecheck <span class="hljs-keyword">type</span> checks node n.<br>// <span class="hljs-type">The</span> result <span class="hljs-keyword">of</span> typecheck <span class="hljs-type">MUST</span> be assigned back to n, e.g.<br>// n.<span class="hljs-type">Left</span> = typecheck(n.<span class="hljs-type">Left</span>, top)<br>// n *<span class="hljs-type">Node</span> -&gt; 源文件的 <span class="hljs-type">AST</span><br><span class="hljs-title">func</span> typecheck(n *<span class="hljs-type">Node</span>, top int) (res *<span class="hljs-type">Node</span>) &#123;<br>// typecheckok 在 词法、语法分析后才会被设定为 <span class="hljs-type">True</span><br>if !typecheckok &#123;<br><span class="hljs-type">Fatalf</span>(&quot;early typecheck&quot;)<br>&#125;<br><br><span class="hljs-keyword">if</span> n == nil &#123;<br>return nil<br>&#125;<br><br>...<br>...<br>...<br><br>typecheck_tcstack = append(typecheck_tcstack, n)<br>// 此处调用 gc.typecheck1() 进行类型检查<br>n = typecheck1(n, top)<br><br>n.<span class="hljs-type">SetTypecheck</span>(<span class="hljs-number">1</span>)<br><br>last := len(typecheck_tcstack) - 1<br>typecheck_tcstack[last] = nil<br>typecheck_tcstack = typecheck_tcstack[:last]<br><br>lineno = lno<br>return n<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="gctypecheck1">gc.typecheck1()</span></h3><p><a href="https://github.com/golang/go/blob/da54dfb6a1f3bef827b9ec3780c98fde77a97d11/src/cmd/compile/internal/gc/typecheck.go#L326">cmd/compile/internal/gc.typecheck1()</a> 核心逻辑是由 switch-case 语句构成的函数</p><p>根据传入节点 Op 的类型进入到不同的分支，如：加减乘除等操作符、函数调用、方法调用等 150 多种</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs elm"># gc.typecheck1()<br><span class="hljs-title">func</span> typecheck1(n *<span class="hljs-type">Node</span>, top int) (res *<span class="hljs-type">Node</span>) &#123;<br>    <br>switch n.<span class="hljs-type">Op</span> &#123;<br>case <span class="hljs-type">OTARRAY</span>:<br>...<br><br>case <span class="hljs-type">OTMAP</span>:<br>...<br><br>case <span class="hljs-type">OTCHAN</span>:<br>...<br>&#125;<br><br>...<br><br>return n<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="syntaxnode-结构体">syntax.Node 结构体</span></h3><p><a href="https://github.com/golang/go/blob/f5978a09589badb927d3aa96998fc785524cae02/src/cmd/compile/internal/gc/syntax.go#L22">src/cmd/compile/internal/gc/syntax.go#Node</a> 表示了 AST 中的单个节点，对于理解类型检查的具体执行过程有较大帮助，其定义如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// <span class="hljs-type">A</span> <span class="hljs-type">Node</span> is a single node <span class="hljs-keyword">in</span> the syntax tree.<br>// <span class="hljs-type">Actually</span> the syntax tree is a syntax <span class="hljs-type">DAG</span>, because there is only one<br>// node with <span class="hljs-type">Op</span>=<span class="hljs-type">ONAME</span> for a given <span class="hljs-keyword">instance</span> <span class="hljs-keyword">of</span> a variable x.<br>// <span class="hljs-type">The</span> same is true for <span class="hljs-type">Op</span>=<span class="hljs-type">OTYPE</span> and <span class="hljs-type">Op</span>=<span class="hljs-type">OLITERAL</span>. <span class="hljs-type">See</span> <span class="hljs-type">Node</span>.mayBeShared.<br><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">Node</span> struct &#123;</span><br><span class="hljs-class">// <span class="hljs-type">Tree</span> <span class="hljs-title">structure</span>.</span><br><span class="hljs-class">// <span class="hljs-type">Generic</span> <span class="hljs-title">recursive</span> <span class="hljs-title">walks</span> <span class="hljs-title">should</span> <span class="hljs-title">follow</span> <span class="hljs-title">these</span> <span class="hljs-title">fields</span>.</span><br><span class="hljs-class"><span class="hljs-type">Left</span>  *<span class="hljs-type">Node</span></span><br><span class="hljs-class"><span class="hljs-type">Right</span> *<span class="hljs-type">Node</span></span><br><span class="hljs-class"><span class="hljs-type">Ninit</span> <span class="hljs-type">Nodes</span></span><br><span class="hljs-class"><span class="hljs-type">Nbody</span> <span class="hljs-type">Nodes</span></span><br><span class="hljs-class"><span class="hljs-type">List</span>  <span class="hljs-type">Nodes</span></span><br><span class="hljs-class"><span class="hljs-type">Rlist</span> <span class="hljs-type">Nodes</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">// <span class="hljs-title">most</span> <span class="hljs-title">nodes</span></span><br><span class="hljs-class"><span class="hljs-type">Type</span> *<span class="hljs-title">types</span>.<span class="hljs-type">Type</span></span><br><span class="hljs-class"><span class="hljs-type">Orig</span> *<span class="hljs-type">Node</span> // <span class="hljs-title">original</span> <span class="hljs-title">form</span>, <span class="hljs-title">for</span> <span class="hljs-title">printing</span>, <span class="hljs-title">and</span> <span class="hljs-title">tracking</span> <span class="hljs-title">copies</span> <span class="hljs-title">of</span> <span class="hljs-type">ONAMEs</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">// <span class="hljs-title">func</span></span><br><span class="hljs-class"><span class="hljs-type">Func</span> *<span class="hljs-type">Func</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">// <span class="hljs-type">ONAME</span>, <span class="hljs-type">OTYPE</span>, <span class="hljs-type">OPACK</span>, <span class="hljs-type">OLABEL</span>, <span class="hljs-title">some</span> <span class="hljs-type">OLITERAL</span></span><br><span class="hljs-class"><span class="hljs-type">Name</span> *<span class="hljs-type">Name</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-type">Sym</span> *<span class="hljs-title">types</span>.<span class="hljs-type">Sym</span>  // <span class="hljs-title">various</span></span><br><span class="hljs-class"><span class="hljs-type">E</span>   <span class="hljs-title">interface</span>&#123;&#125; // <span class="hljs-type">Opt</span> or <span class="hljs-type">Val</span>, see methods below</span><br><br>// <span class="hljs-type">Various</span>. <span class="hljs-type">Usually</span> an offset into a struct.<br><span class="hljs-type">Xoffset</span> int64<br><br><span class="hljs-type">Pos</span> src.<span class="hljs-type">XPos</span><br><br>flags bitset32<br><br><span class="hljs-type">Esc</span> uint16 // <span class="hljs-type">EscXXX</span><br><br><span class="hljs-type">Op</span>  <span class="hljs-type">Op</span><br>aux uint8<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="切片-otarray">切片 OTARRAY</span></h3><p>如果当前节点的操作类型是 OTARRAY, 首先会对右节点 -&gt; 切片 &amp; 数组中的元素进行类型检查</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">case</span> <span class="hljs-type">OTARRAY</span>:<br>    <span class="hljs-comment">// 检查右节点</span><br>r :<span class="hljs-operator">=</span> typecheck(n.<span class="hljs-type">Right</span>, <span class="hljs-type">Etype</span>)<br><span class="hljs-keyword">if</span> r.<span class="hljs-keyword">Type</span> <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br></code></pre></td></tr></table></figure><p>然后根据当前节点左节点的不同，去更新 gc.Node 的类型，切片的声明方式有以下三种：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[]</span><span class="hljs-built_in">int</span><br><span class="hljs-string">[...]</span><span class="hljs-built_in">int</span><br><span class="hljs-string">[3]</span><span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>对于第一种声明方式，直接调用了 types.NewSlice()：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm">  <span class="hljs-keyword">if</span> n.<span class="hljs-type">Left</span> == nil &#123;<br><span class="hljs-title">t</span> = types.<span class="hljs-type">NewSlice</span>(r.<span class="hljs-type">Type</span>)<br></code></pre></td></tr></table></figure><p>NewSlice() 返回 TSLICE 类型的结构体，其中包含了元素的类型信息。</p><p>对于第二种声明方式，会调用 gc.typechecckcomplit() 处理。<br>在检查了其长度和类型后，调用 types.NewArray() 初始化一个存储着 元素类型 elemType 和 数组大小 length 的结构体。</p><p>具体逻辑如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs elm">    <span class="hljs-keyword">case</span> <span class="hljs-type">OCOMPLIT</span>:<br>ok |= ctxExpr<br>n = typecheckcomplit(n)<br><span class="hljs-keyword">if</span> n.<span class="hljs-type">Type</span> == nil &#123;<br>return n<br>&#125;<br><br>// typecheckcomplit() 实现<br><span class="hljs-title">func</span> typecheckcomplit(n *<span class="hljs-type">Node</span>) (res *<span class="hljs-type">Node</span>) &#123;<br>...<br>if n.<span class="hljs-type">Right</span>.<span class="hljs-type">Op</span> == <span class="hljs-type">OTARRAY</span> &amp;&amp; n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span> != nil &amp;&amp; n.<span class="hljs-type">Right</span>.<span class="hljs-type">Left</span>.<span class="hljs-type">Op</span> == <span class="hljs-type">ODDD</span> &#123;<br>n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span> = typecheck(n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>, ctxType)<br>if n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span> == nil &#123;<br>n.<span class="hljs-type">Type</span> = nil<br>return n<br>&#125;<br>elemType := n.<span class="hljs-type">Right</span>.<span class="hljs-type">Right</span>.<span class="hljs-type">Type</span><br><br>length := typecheckarraylit(elemType, -1, n.<span class="hljs-type">List</span>.<span class="hljs-type">Slice</span>(), &quot;array literal&quot;)<br><br>n.<span class="hljs-type">Op</span> = <span class="hljs-type">OARRAYLIT</span><br>n.<span class="hljs-type">Type</span> = types.<span class="hljs-type">NewArray</span>(elemType, length)<br>n.<span class="hljs-type">Right</span> = nil<br>return n<br>&#125;<br>...<br>&#125;<br><br>// types.<span class="hljs-type">NewArray</span>()<br>// <span class="hljs-type">NewArray</span> returns a new fixed-length array <span class="hljs-type">Type</span>.<br><span class="hljs-title">func</span> <span class="hljs-type">NewArray</span>(elem *<span class="hljs-type">Type</span>, bound int64) *<span class="hljs-type">Type</span> &#123;<br><span class="hljs-keyword">if</span> bound &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-type">Fatalf</span>(<span class="hljs-string">&quot;NewArray: invalid bound %v&quot;</span>, bound)<br>&#125;<br>t := <span class="hljs-type">New</span>(<span class="hljs-type">TARRAY</span>)<br>t.<span class="hljs-type">Extra</span> = &amp;<span class="hljs-type">Array</span>&#123;<span class="hljs-type">Elem</span>: elem, <span class="hljs-type">Bound</span>: bound&#125;<br>t.<span class="hljs-type">SetNotInHeap</span>(elem.<span class="hljs-type">NotInHeap</span>())<br>return t<br>&#125;<br></code></pre></td></tr></table></figure><p>对于第三种方式，数组大小直接可获取到，调用 types.NewArray() 返回初始化后的 Array 结构体：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// gc.typecheck1()</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    n<span class="hljs-selector-class">.Left</span> = indexlit(typecheck(n<span class="hljs-selector-class">.Left</span>, ctxExpr))<br>    l := n<span class="hljs-selector-class">.Left</span><br>    v := l<span class="hljs-selector-class">.Val</span>()<br>    bound := v<span class="hljs-selector-class">.U</span>.(*Mpint)<span class="hljs-selector-class">.Int64</span>()<br>    <span class="hljs-comment">// bound -&gt; length</span><br>    t = types<span class="hljs-selector-class">.NewArray</span>(r<span class="hljs-selector-class">.Type</span>, bound)<br>        &#125;<br>        <br>n<span class="hljs-selector-class">.Op</span> = OTYPE<br>n<span class="hljs-selector-class">.Type</span> = t<br>n<span class="hljs-selector-class">.Left</span> = nil<br>n<span class="hljs-selector-class">.Right</span> = nil<br></code></pre></td></tr></table></figure><p>以上的三个分支，会分别处理 数组 和切片 声明的不同形式，每一个分支都会更新 <strong>gc.Node</strong> 结构体中存储的 类型 并修改 AST。</p><p>数组的长度是在 type check 期间确定的， […]int 这种声明方式只是 Golang 提供的语法糖</p><h3><span id="哈希-otmap">哈希 OTMAP</span></h3><p>hashMap 初始化方式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span> map<span class="hljs-selector-attr">[keyType]</span> valueType<br></code></pre></td></tr></table></figure><p>hashMap 对应到的标识为 OTMAP，具体处理逻辑如下：</p><ol><li>检查 hash 的 keyType</li><li>检查 hash 的 valueType</li><li>通过 gc.NewMap() 创建一个 TMAP 结构体</li><li>当前节点加入到 mapqueue，后续通过 gc.checkMapKeys() 再次检查 hash 类型</li></ol><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs smali">// gc.typecheck1()<br>    case OTMAP:<br>ok |= ctxType<br>// 1.<span class="hljs-built_in"> check </span>key Type<br>n.Left = typecheck(n.Left, ctxType)<br>// 2.<span class="hljs-built_in"> check </span>value Type<br>n.Right = typecheck(n.Right, ctxType)<br>l<span class="hljs-keyword"> :</span>= n.Left<br>r<span class="hljs-keyword"> :</span>= n.Right<br><span class="hljs-built_in">if </span>l.Type == nil || r.Type == nil &#123;<br>n.Type = nil<br><span class="hljs-built_in">return </span>n<br>&#125;<br><span class="hljs-built_in">if </span>l.Type.NotInHeap() &#123;<br>yyerror(<span class="hljs-string">&quot;incomplete (or unallocatable) map key not allowed&quot;</span>)<br>&#125;<br><span class="hljs-built_in">if </span>r.Type.NotInHeap() &#123;<br>yyerror(<span class="hljs-string">&quot;incomplete (or unallocatable) map value not allowed&quot;</span>)<br>&#125;<br>        // 3. gc.NewMap()<span class="hljs-built_in"> return </span>TMAP struct<br>setTypeNode(n, types.NewMap(l.Type, r.Type))<br>// 4. put node into mapqueue, recheck through gc.checkMapKeys<br>mapqueue = append(mapqueue, n) //<span class="hljs-built_in"> check </span>map keys when all types are settled<br>n.Left = nil<br>n.Right = nil<br></code></pre></td></tr></table></figure><h4><span id="typesnewmap">types.NewMap()</span></h4><p><a href="https://github.com/golang/go/blob/f5978a09589badb927d3aa96998fc785524cae02/src/cmd/compile/internal/types/type.go#L536">cmd/compile/internal/types.NewMap()</a> 创建 TMAP 结构体，并初始化 hash 的键值类型</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">// NewMap returns a <span class="hljs-keyword">new</span> map <span class="hljs-keyword">Type</span> <span class="hljs-type">with </span>key <span class="hljs-keyword">type</span> <span class="hljs-type">k </span><span class="hljs-keyword">and</span> element (aka value) <span class="hljs-keyword">type</span> <span class="hljs-type">v.</span><br><span class="hljs-type"></span>func NewMap(k, v *<span class="hljs-keyword">Type</span>) *<span class="hljs-keyword">Type</span> <span class="hljs-type">&#123;</span><br><span class="hljs-type"></span>t := <span class="hljs-keyword">New</span>(TMAP)<br>mt := t.MapType()<br>mt.Key = k<br>mt.Elem = v<br><span class="hljs-keyword">return</span> t<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="gccheckmapkeys">gc.checkMapKeys()</span></h3><p>golang compile 会在第三阶段调用 <a href="https://github.com/golang/go/blob/f5978a09589badb927d3aa96998fc785524cae02/src/cmd/compile/internal/gc/typecheck.go#L3449">cmd/compile/internal/gc.checkMapKeys()</a> 再次检查 mapqueue 队列中 hash 节点的 key 类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gc.checkMapKeys()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkMapKeys</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 遍历 mapqueue</span><br><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> mapqueue &#123;<br>    <span class="hljs-comment">// 获取 key Type</span><br>k := n.Type.MapType().Key<br><span class="hljs-comment">// 检查 key</span><br><span class="hljs-keyword">if</span> !k.Broke() &amp;&amp; !IsComparable(k) &#123;<br>yyerrorl(n.Pos, <span class="hljs-string">&quot;invalid map key type %v&quot;</span>, k)<br>&#125;<br>&#125;<br>mapqueue = <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="make关键字-omake">make关键字 OMAKE</span></h3><p>golang 内置 make() 函数，用于创建 切片、哈希、channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// hashmap</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>)<br><br><span class="hljs-comment">// array</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-comment">// channel</span><br><span class="hljs-keyword">var</span> ch = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>类型检查阶段会根据创建的类型，将 make() 替换为特定的函数：</p><ol><li>检查 make 的第一个类型参数</li><li>根据类型不同，进入不同的分支：TSLICE、TMAP、TCHAN</li></ol><p>case TSLICE：</p><ol><li>获取参数：len = args[1] 切片长度, cap = args[2] 切片容量</li><li>len, cap 校验</li><li>设定节点类型为 OMAKESLICE</li></ol><p>case TMAP:</p><ol><li>获取参数：len = args[1]</li><li>设定节点类型为 OMAKETYPE</li></ol><p>case TCCHAN:</p><ol><li>获取参数：len = args[1] 缓冲区大小</li><li>设定节点类型为 OMAKECHAN</li></ol><p>具体代码为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">case</span> <span class="hljs-type">OMAKE</span>:<br>ok <span class="hljs-operator">|=</span> ctxExpr<br><span class="hljs-comment">// 获取参数 args</span><br>args :<span class="hljs-operator">=</span> n.<span class="hljs-type">List</span>.<span class="hljs-type">Slice</span>()<br><span class="hljs-keyword">if</span> len(args) <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>yyerror(<span class="hljs-string">&quot;missing argument to make&quot;</span>)<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>n.<span class="hljs-type">List</span>.<span class="hljs-type">Set</span>(<span class="hljs-literal">nil</span>)<br><span class="hljs-comment">// 获取 第一个参数 的类型</span><br>l :<span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>]<br>l <span class="hljs-operator">=</span> typecheck(l, <span class="hljs-type">Etype</span>)<br>t :<span class="hljs-operator">=</span> l.<span class="hljs-keyword">Type</span><br><span class="hljs-keyword">if</span> t <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>i :<span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">switch</span> t.<span class="hljs-type">Etype</span> &#123;<br><span class="hljs-keyword">default</span>:<br>yyerror(<span class="hljs-string">&quot;cannot make type %v&quot;</span>, t)<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br><br>    <span class="hljs-comment">// make slice</span><br><span class="hljs-keyword">case</span> <span class="hljs-type">TSLICE</span>:<br><span class="hljs-keyword">if</span> i <span class="hljs-operator">&gt;=</span> len(args) &#123;<br>yyerror(<span class="hljs-string">&quot;missing len argument to make(%v)&quot;</span>, t)<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>l <span class="hljs-operator">=</span> args[i]<br>i<span class="hljs-operator">++</span><br>l <span class="hljs-operator">=</span> typecheck(l, ctxExpr)<br><span class="hljs-keyword">var</span> r <span class="hljs-operator">*</span><span class="hljs-type">Node</span><br><span class="hljs-keyword">if</span> i <span class="hljs-operator">&lt;</span> len(args) &#123;<br>r <span class="hljs-operator">=</span> args[i]<br>i<span class="hljs-operator">++</span><br>r <span class="hljs-operator">=</span> typecheck(r, ctxExpr)<br>&#125;<br><br><span class="hljs-keyword">if</span> l.<span class="hljs-keyword">Type</span> <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> (r <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> r.<span class="hljs-keyword">Type</span> <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span>) &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>checkmake(t, <span class="hljs-string">&quot;len&quot;</span>, l) <span class="hljs-operator">||</span> r <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-operator">!</span>checkmake(t, <span class="hljs-string">&quot;cap&quot;</span>, r) &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-type">Isconst</span>(l, <span class="hljs-type">CTINT</span>) <span class="hljs-operator">&amp;&amp;</span> r <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-type">Isconst</span>(r, <span class="hljs-type">CTINT</span>) <span class="hljs-operator">&amp;&amp;</span> l.<span class="hljs-type">Val</span>().<span class="hljs-type">U</span>.(<span class="hljs-operator">*</span><span class="hljs-type">Mpint</span>).<span class="hljs-type">Cmp</span>(r.<span class="hljs-type">Val</span>().<span class="hljs-type">U</span>.(<span class="hljs-operator">*</span><span class="hljs-type">Mpint</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>yyerror(<span class="hljs-string">&quot;len larger than cap in make(%v)&quot;</span>, t)<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>n.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> l<br>n.<span class="hljs-type">Right</span> <span class="hljs-operator">=</span> r<br>n.<span class="hljs-type">Op</span> <span class="hljs-operator">=</span> <span class="hljs-type">OMAKESLICE</span><br><br>    <span class="hljs-comment">// make map</span><br><span class="hljs-keyword">case</span> <span class="hljs-type">TMAP</span>:<br><span class="hljs-keyword">if</span> i <span class="hljs-operator">&lt;</span> len(args) &#123;<br>l <span class="hljs-operator">=</span> args[i]<br>i<span class="hljs-operator">++</span><br>l <span class="hljs-operator">=</span> typecheck(l, ctxExpr)<br>l <span class="hljs-operator">=</span> defaultlit(l, types.<span class="hljs-type">Types</span>[<span class="hljs-type">TINT</span>])<br><span class="hljs-keyword">if</span> l.<span class="hljs-keyword">Type</span> <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>checkmake(t, <span class="hljs-string">&quot;size&quot;</span>, l) &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br>n.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> l<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>n.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> nodintconst(<span class="hljs-number">0</span>)<br>&#125;<br>n.<span class="hljs-type">Op</span> <span class="hljs-operator">=</span> <span class="hljs-type">OMAKEMAP</span><br><br>    <span class="hljs-comment">// make channel</span><br><span class="hljs-keyword">case</span> <span class="hljs-type">TCHAN</span>:<br>l <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">if</span> i <span class="hljs-operator">&lt;</span> len(args) &#123;<br>l <span class="hljs-operator">=</span> args[i]<br>i<span class="hljs-operator">++</span><br>l <span class="hljs-operator">=</span> typecheck(l, ctxExpr)<br>l <span class="hljs-operator">=</span> defaultlit(l, types.<span class="hljs-type">Types</span>[<span class="hljs-type">TINT</span>])<br><span class="hljs-keyword">if</span> l.<span class="hljs-keyword">Type</span> <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>checkmake(t, <span class="hljs-string">&quot;buffer&quot;</span>, l) &#123;<br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br>n.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> l<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>n.<span class="hljs-type">Left</span> <span class="hljs-operator">=</span> nodintconst(<span class="hljs-number">0</span>)<br>&#125;<br>n.<span class="hljs-type">Op</span> <span class="hljs-operator">=</span> <span class="hljs-type">OMAKECHAN</span><br>&#125;<br><br><span class="hljs-keyword">if</span> i <span class="hljs-operator">&lt;</span> len(args) &#123;<br>yyerror(<span class="hljs-string">&quot;too many arguments to make(%v)&quot;</span>, t)<br>n.<span class="hljs-type">Op</span> <span class="hljs-operator">=</span> <span class="hljs-type">OMAKE</span><br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> n<br>&#125;<br><br>n.<span class="hljs-keyword">Type</span> <span class="hljs-operator">=</span> t<br></code></pre></td></tr></table></figure><h3><span id="conclusion">Conclusion</span></h3><ol><li><p>类型检查是 golang compile 的第二个阶段，在 词法&amp;语法分析后，我们得到了每个源文件对应的抽象语法树，随后的类型检查会遍历 AST 中的节点，对每个节点的类型进行校验，找出其中存在的 语法错误 导致的 类型错误。</p></li><li><p>对 AST 进行改写，如：make() 关键字; Slice、Map、Channel 的处理</p></li><li><p>make() 和 new() 内置函数，不会直接对应某些函数的实现，而是在编译期间被转换成真正存在的其他函数</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.2 编译原理 -- 语法分析器设计与实现</title>
    <link href="/2021/12/30/2-2-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/12/30/2-2-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1><span id="22-parsing词法分析-amp-语法分析">2.2 Parsing（词法分析 &amp; 语法分析 ）</span></h1><p>同属于编译过程，将源码文件转换成更易于 理解、分析 并且 结构化 的AST。</p><p>可以通过以下工具，对比分析 源文件 以及其对应的 AST 树<br><a href="https://astexplorer.net/#/gist/825ad220483f53e3a7eec8bacd2bbac1/1245c33ba48428cdded60d7b65e6352d504371b4">astexplorer.net</a></p><h2><span id="222-语法分析-grammar-分析方法-go-实现">2.2.2 语法分析 – Grammar, 分析方法, go 实现</span></h2><p>语法分析<br>-&gt; 根据某种特定的形式文法对 Token 序列 进行分析，并确定其语法结构的过程</p><p>具体实现分为：自顶向下、自底向上 两种方式</p><h3><span id="grammar-文法">Grammar 文法</span></h3><p>文法 -&gt; 形式化、精确描述某种编程语言的工具</p><p>通过文法 -&gt; 定义一种语言的语法 -&gt; 一系列用于转换字符串的生产规则</p><p>Golang 文法的生产规则，定义在 <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/parser.go">src/cmd/compile/internal/syntax/parse.go</a>，以 源文件、Package、Import  生产规则的定义为例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 源文件</span><br><span class="hljs-attr">SourceFile</span> = PackageClause <span class="hljs-string">&quot;;&quot;</span> &#123; ImportDecl <span class="hljs-string">&quot;;&quot;</span> &#125; &#123; TopLevelDecl <span class="hljs-string">&quot;;&quot;</span> &#125; .<br><br><span class="hljs-comment"># Package</span><br><span class="hljs-attr">PackageClause</span>  = <span class="hljs-string">&quot;package&quot;</span> PackageName .<br><span class="hljs-attr">PackageName</span>    = identifier .<br><br><span class="hljs-comment"># Import</span><br><span class="hljs-attr">ImportDecl</span>       = <span class="hljs-string">&quot;import&quot;</span> ( ImportSpec | <span class="hljs-string">&quot;(&quot;</span> &#123; ImportSpec <span class="hljs-string">&quot;;&quot;</span> &#125; <span class="hljs-string">&quot;)&quot;</span> ) .<br><span class="hljs-attr">ImportSpec</span>       = [ <span class="hljs-string">&quot;.&quot;</span> | PackageName ] ImportPath .<br><span class="hljs-attr">ImportPath</span>       = string_lit .<br></code></pre></td></tr></table></figure><h4><span id="sourcefile">SourceFile</span></h4><p>每个 Golang 源文件都会被解析成一个独立的 AST，AST 最顶层的结构/开始符号都是 SourceFile：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SourceFile</span> = PackageClause <span class="hljs-string">&quot;;&quot;</span> &#123; <span class="hljs-attribute">ImportDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125; &#123; <span class="hljs-attribute">TopLevelDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125; .<br></code></pre></td></tr></table></figure><p>包括了 一个 Package 的定义 以及 可选的 import 声明(ImportDecl) 和其他的顶层声明(TopLevelDecl)</p><p>其中，Package、ImportDecl、TopLevelDecl 都可以继续细化，如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ImportDecl</span>       = <span class="hljs-string">&quot;import&quot;</span> ( ImportSpec | <span class="hljs-string">&quot;(&quot;</span> &#123; ImportSpec <span class="hljs-string">&quot;;&quot;</span> &#125; <span class="hljs-string">&quot;)&quot;</span> ) .<br><span class="hljs-attribute">ImportSpec</span>       = [ <span class="hljs-string">&quot;.&quot;</span> | PackageName ] ImportPath .<br><span class="hljs-attribute">ImportPath</span>       = string_lit .<br></code></pre></td></tr></table></figure><p><strong>因此，可以将 Go 源码文件 -&gt; SourceFile -&gt; 独立的、抽象的 语法树</strong></p><p>在具体实现上，对应到了 <a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/nodes.go#L36">src/cmd/compile/internal/syntax.File 结构体</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Files<br><span class="hljs-regexp">//</span> package PkgName; DeclList[<span class="hljs-number">0</span>], DeclList[<span class="hljs-number">1</span>], ...<br>type File struct &#123;<br>Pragma   Pragma<br>PkgName  *Name  <span class="hljs-regexp">//</span> 包名<br>DeclList []Decl <span class="hljs-regexp">//</span> 包含各种声明的列表<br>Lines    uint   <span class="hljs-regexp">//</span> 源文件代码行数<br>node            <br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="topleveldecl-顶层声明">TopLevelDecl – 顶层声明</span></h4><p>分为了 常量、类型、变量、函数、方法 五种类型。</p><p>定义在 <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/parser.go#L555">src/cmd/compile/internal/syntax/parser.go</a></p><p>const、type、var 类型的 <strong>文法定义</strong> 如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># const</span><br><span class="hljs-attr">ConstDecl</span> = <span class="hljs-string">&quot;const&quot;</span> ( ConstSpec | <span class="hljs-string">&quot;(&quot;</span> &#123; ConstSpec <span class="hljs-string">&quot;;&quot;</span> &#125; <span class="hljs-string">&quot;)&quot;</span> ) .<br><span class="hljs-attr">ConstSpec</span> = IdentifierList [ [ Type ] <span class="hljs-string">&quot;=&quot;</span> ExpressionList ] .<br><br><span class="hljs-comment"># type</span><br><span class="hljs-attr">TypeDecl</span>  = <span class="hljs-string">&quot;type&quot;</span> ( TypeSpec | <span class="hljs-string">&quot;(&quot;</span> &#123; TypeSpec <span class="hljs-string">&quot;;&quot;</span> &#125; <span class="hljs-string">&quot;)&quot;</span> ) .<br><span class="hljs-attr">TypeSpec</span>  = AliasDecl | TypeDef .<br><span class="hljs-attr">AliasDecl</span> = identifier <span class="hljs-string">&quot;=&quot;</span> Type .<br><span class="hljs-attr">TypeDef</span>   = identifier Type .<br><br><span class="hljs-comment"># var </span><br><span class="hljs-attr">VarDecl</span> = <span class="hljs-string">&quot;var&quot;</span> ( VarSpec | <span class="hljs-string">&quot;(&quot;</span> &#123; VarSpec <span class="hljs-string">&quot;;&quot;</span> &#125; <span class="hljs-string">&quot;)&quot;</span> ) .<br><span class="hljs-attr">VarSpec</span> = IdentifierList ( Type [ <span class="hljs-string">&quot;=&quot;</span> ExpressionList ] | <span class="hljs-string">&quot;=&quot;</span> ExpressionList ) .<br></code></pre></td></tr></table></figure><p>func(函数) 和 method(方法) 的定义稍微复杂</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># func</span><br><span class="hljs-attr">FunctionDecl</span> = <span class="hljs-string">&quot;func&quot;</span> FunctionName [ TypeParams ] ( Function | Signature ) .<br><span class="hljs-attr">FunctionName</span> = identifier .<br><span class="hljs-attr">Function</span>     = Signature FunctionBody .<br><br><span class="hljs-comment"># method</span><br><span class="hljs-attr">MethodDecl</span>   = <span class="hljs-string">&quot;func&quot;</span> Receiver MethodName ( Function | Signature ) .<br><span class="hljs-attr">Receiver</span>     = Parameters .<br></code></pre></td></tr></table></figure><p>此外还能看到 statement(声明) 的 文法定义 ：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># Block 代码块</span><br>Block = <span class="hljs-string">&quot;&#123;&quot;</span> StatementList <span class="hljs-string">&quot;&#125;&quot;</span> .<br><br><span class="hljs-comment"># 声明列表</span><br>StatementList = &#123; Statement <span class="hljs-string">&quot;;&quot;</span> &#125; .<br><br><span class="hljs-comment"># 声明 -- 15 中不同的语法结构：go、return、break、contine、goto、block、if、switch-case、select、for loop、defer</span><br>Statement =<br>Declaration |<span class="hljs-string"> LabeledStmt </span>|<span class="hljs-string"> SimpleStmt </span>|<br>GoStmt |<span class="hljs-string"> ReturnStmt </span>|<span class="hljs-string"> BreakStmt </span>|<span class="hljs-string"> ContinueStmt </span>|<span class="hljs-string"> GotoStmt </span>|<br>FallthroughStmt |<span class="hljs-string"> Block </span>|<span class="hljs-string"> IfStmt </span>|<span class="hljs-string"> SwitchStmt </span>|<span class="hljs-string"> SelectStmt </span>|<span class="hljs-string"> ForStmt </span>|<br>DeferStmt .<br><br><span class="hljs-comment"># 表达式</span><br>SimpleStmt = EmptyStmt |<span class="hljs-string"> ExpressionStmt </span>|<span class="hljs-string"> SendStmt </span>|<span class="hljs-string"> IncDecStmt </span>|<span class="hljs-string"> Assignment </span>|<span class="hljs-string"> ShortVarDecl .</span><br></code></pre></td></tr></table></figure><h3><span id="分析方法-ll-lr-la">分析方法 – LL, LR, LA</span></h3><p>自顶向下（LL）：找到当前输入流 最左推导 的过程 -&gt; 对于任意一个输入流，根据当前的输入符号，确定一个生产规则，使用生产规则右侧的符号替代相应的非终结符向下推导</p><p>自底向上（LR(0), SLR, LR(1), LALR(1)）：解析器会从最简单的符号进行推导，在解析的最后合并成开始符号</p><p>向前查看（LA）：在不同规则发生冲突时，当前解析器需要通过预读一些 Token 判断当前应该用什么规则对输入流进行展开 或者 规约</p><p>golang 采用的 <strong>LALR(1)</strong> 文法，需要 <strong>预读</strong> 一些 Token 保证出现冲突的生产规则能够被正确处理  </p><p>结合代码来看，能在 scanner 中看到预读下一个字符，生成当前 Token 的代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># syntax.scanner.next()</span><br><span class="hljs-keyword">func</span> (s *scanner) <span class="hljs-keyword">next</span>() &#123;<br>......<br>switch s.ch &#123;<br>......<br><span class="hljs-regexp">//</span> scanner 扫描到 . 后，预读下一个字符<br><span class="hljs-regexp">//</span> 判断是否为 .. or ...<br>    case <span class="hljs-string">&#x27;.&#x27;</span>:<br>s.nextch()<br><span class="hljs-keyword">if</span> isDecimal(s.ch) &#123;<br>s.number(true)<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> s.ch == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br>s.nextch()<br><span class="hljs-keyword">if</span> s.ch == <span class="hljs-string">&#x27;.&#x27;</span> &#123;<br>s.nextch()<br>s.tok = _DotDotDot<br><span class="hljs-keyword">break</span><br>&#125;<br>s.rewind() <span class="hljs-regexp">//</span> now s.ch holds <span class="hljs-number">1</span>st <span class="hljs-string">&#x27;.&#x27;</span><br>s.nextch() <span class="hljs-regexp">//</span> consume <span class="hljs-number">1</span>st <span class="hljs-string">&#x27;.&#x27;</span> again<br>&#125;<br>s.tok = _Dot<br><span class="hljs-regexp">//</span> scanner 扫描到 /后，预读一个字符<br><span class="hljs-regexp">//</span> 判断是否为 <span class="hljs-regexp">//</span> or /*<br>case <span class="hljs-string">&#x27;/&#x27;</span>:<br>s.nextch()<br><span class="hljs-keyword">if</span> s.ch == <span class="hljs-string">&#x27;/&#x27;</span> &#123;<br>s.nextch()<br>s.lineComment()<br>goto redo<br>&#125;<br><span class="hljs-keyword">if</span> s.ch == <span class="hljs-string">&#x27;*&#x27;</span> &#123;<br>s.nextch()<br>s.fullComment()<br><span class="hljs-keyword">if</span> line, _ := s.pos(); line &gt; s.line &amp;&amp; nlsemi &#123;<br><span class="hljs-regexp">//</span> A multi-line comment acts like a newline;<br><span class="hljs-regexp">//</span> it translates to a <span class="hljs-string">&#x27;;&#x27;</span> <span class="hljs-keyword">if</span> nlsemi is set.<br>s.lit = <span class="hljs-string">&quot;newline&quot;</span><br>s.tok = _Semi<br><span class="hljs-keyword">break</span><br>&#125;<br>goto redo<br>&#125;<br>s.op, s.prec = Div, precMul<br>goto assignop<br>    ......<br></code></pre></td></tr></table></figure><h3><span id="golang-实现">golang 实现</span></h3><p>最右推导 + 向前看 构成了 Golang paeser 的基本原理，也是大部分编程语言的选择</p><p>2.1 中提到的 编译器的主函数 Main() 调用的 <a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/gc/noder.go#L28">src/cmd/compile/internal/gc.parseFiles()</a> 使用多个 goroutine 对源文件进行解析</p><p><strong>解析完成后，将其转化为 AST 树：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>. 遍历 <span class="hljs-selector-tag">noder</span> 集合<br><span class="hljs-selector-tag">2</span>. 调用 <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.node</span>() 方法，实际是对应到了 <span class="hljs-selector-tag">noder</span><span class="hljs-selector-class">.go</span> 中的 <span class="hljs-selector-tag">node</span>()<br><span class="hljs-selector-tag">3</span>. <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.node</span>() 方法，将 <span class="hljs-selector-tag">AST</span> 的根节点，<span class="hljs-selector-tag">push</span> 到 <span class="hljs-selector-tag">xtop</span><span class="hljs-selector-attr">[]</span> 中<br><span class="hljs-selector-tag">4</span>. 类型检查 及 中间代码生成等步骤，直接使用到了 <span class="hljs-selector-tag">xtop</span><span class="hljs-selector-attr">[]</span><br></code></pre></td></tr></table></figure><p>具体源码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// parseFile() 并发的将源代码文件解析到 *syntax.File 结构体中</span><br><span class="hljs-comment">// *syntax.File -&gt; 对应源码文件的 AST</span><br><span class="hljs-comment">// xtop[*Node] 用于存放 AST 的 root</span><br><span class="hljs-comment">// 函数最后返回解析代码的总行数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseFiles</span><span class="hljs-params">(filenames []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">uint</span></span> &#123;<br>noders := <span class="hljs-built_in">make</span>([]*noder, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(filenames))<br><span class="hljs-comment">// 限制同时打开文件的数量</span><br>sem := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, runtime.GOMAXPROCS(<span class="hljs-number">0</span>)+<span class="hljs-number">10</span>)<br>    <br>    <span class="hljs-comment">// 遍历每个源文件</span><br><span class="hljs-keyword">for</span> _, filename := <span class="hljs-keyword">range</span> filenames &#123;<br>p := &amp;noder&#123;<br>basemap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[*syntax.PosBase]*src.PosBase),<br>err:     <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> syntax.Error),<br>&#125;<br>noders = <span class="hljs-built_in">append</span>(noders, p)<br>        <span class="hljs-comment">// 多个 goroutine 并发解析源文件</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(filename <span class="hljs-keyword">string</span>)</span></span> &#123;<br>sem &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// defer 控制 goroutine</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; &lt;-sem &#125;()<br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(p.err)<br>base := syntax.NewFileBase(filename)<br>            <br>f, err := os.Open(filename)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>p.error(syntax.Error&#123;Msg: err.Error()&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> f.Close()<br>            <span class="hljs-comment">// 实际调用了 syntax.Parse() 对源文件进行 词法&amp;语法 解析</span><br>p.file, _ = syntax.Parse(base, f, p.error, p.pragma, syntax.CheckBranches) <span class="hljs-comment">// errors are tracked via p.error</span><br>&#125;(filename)<br>&#125;<br>    <span class="hljs-comment">// 统计解析代码的总行数</span><br><span class="hljs-keyword">var</span> lines <span class="hljs-keyword">uint</span><br><br>    <span class="hljs-comment">// 遍历 noders 集合</span><br>    <span class="hljs-comment">// 通过 noder.node() 将其转化为 AST</span><br>    <span class="hljs-comment">// 最后放入到 xtop[] 中</span><br>    <span class="hljs-comment">// type check 阶段实际遍历的是：xtop[]</span><br><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> noders &#123;<br><span class="hljs-keyword">for</span> e := <span class="hljs-keyword">range</span> p.err &#123;<br>p.yyerrorpos(e.Pos, <span class="hljs-string">&quot;%s&quot;</span>, e.Msg)<br>&#125;<br><br>p.node()<br>lines += p.file.Lines<br>p.file = <span class="hljs-literal">nil</span> <span class="hljs-comment">// release memory</span><br><br><span class="hljs-keyword">if</span> nsyntaxerrors != <span class="hljs-number">0</span> &#123;<br>errorexit()<br>&#125;<br><span class="hljs-comment">// Always run testdclstack here, even when debug_dclstack is not set, as a sanity measure.</span><br>testdclstack()<br>&#125;<br><br>localpkg.Height = myheight<br>    <span class="hljs-comment">// 返回</span><br><span class="hljs-keyword">return</span> lines<br>&#125;<br></code></pre></td></tr></table></figure><p>解析过程中，调用了 <a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/syntax.go#L67">src/cmd/compile/internal/syntax.parse()</a> 对单个文件进行 词法&amp;语法解析。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"># Parse()<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Parse</span><span class="hljs-params">(base *PosBase, src io.Reader, errh ErrorHandler, pragh PragmaHandler, mode Mode)</span> <span class="hljs-params">(_ *File, first error)</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> p := <span class="hljs-built_in">recover</span>(); p != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err, ok := p.(Error); ok &#123;<br>first = err<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-built_in">panic</span>(p)<br>&#125;<br>&#125;()<br><br>    <span class="hljs-comment">// 初始化 parser</span><br><span class="hljs-keyword">var</span> p parser<br>p.init(base, src, errh, pragh, mode)<br>p.next()<br><span class="hljs-comment">// 实际调用了 parser.fileOrNil()</span><br><span class="hljs-keyword">return</span> p.fileOrNil(), p.first<br>&#125;<br></code></pre></td></tr></table></figure><p>syntax.parse() 初始化了一个新的 <a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/parser.go#L17"> src/cmd/compile/internal/syntax.parser</a> 结构体，结构体中包含了 <strong>scanner 结构体</strong>，用于对文件进行词法分析</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">type parser struct &#123;<br>file  *PosBase<br>errh  ErrorHandler<br>mode  Mode<br>pragh PragmaHandler<br><span class="hljs-regexp">//</span> 词法分析结构体<br>scanner<br><br>base   *PosBase <span class="hljs-regexp">//</span> current position base<br>first  error    <span class="hljs-regexp">//</span> first error encountered<br>errcnt int      <span class="hljs-regexp">//</span> number of errors encountered<br>pragma Pragma   <span class="hljs-regexp">//</span> pragmas<br><br>fnest  int    <span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> nesting level (<span class="hljs-keyword">for</span> error handling)<br>xnest  int    <span class="hljs-regexp">//</span> expression nesting level (<span class="hljs-keyword">for</span> complit ambiguity resolution)<br>indent []byte <span class="hljs-regexp">//</span> tracing support<br>&#125;<br></code></pre></td></tr></table></figure><p>同时通过 <a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/parser.go#L376">src/cmd/compile/internal/syntax.parser.fileOrNil()</a> 基于 Golang 文法的定义，实现对源文件的词法&amp;语法分析</p><p>逻辑大致如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>. 匹配必选项 <span class="hljs-selector-tag">PackageClause</span>, 如果该步骤发生错误，直接返回<br><span class="hljs-selector-tag">2</span>. 匹配可选项 <span class="hljs-selector-tag">Import</span>, 通过 <span class="hljs-selector-tag">parser</span><span class="hljs-selector-class">.appendGroup</span>() 将解析后的结果放入到 <span class="hljs-selector-tag">DeclList</span><span class="hljs-selector-attr">[]</span><br><span class="hljs-selector-tag">3</span>. 根据匹配到的不同关键字：<br>若当前传入 <span class="hljs-selector-tag">Token</span> 为 <span class="hljs-selector-tag">_Func</span>，则需要调用 <span class="hljs-selector-tag">parser</span><span class="hljs-selector-class">.funcDeclOrNil</span>() 单独处理后，放入到 <span class="hljs-selector-tag">DeclList</span><span class="hljs-selector-attr">[]</span> 中<br>若匹配到其他 <span class="hljs-selector-tag">Token</span>，则通过向 <span class="hljs-selector-tag">parser</span><span class="hljs-selector-class">.appendGroup</span>()  传入不同类型的处理函数，将解析结果放入到 <span class="hljs-selector-tag">DeclList</span><span class="hljs-selector-attr">[]</span> 中<br><span class="hljs-selector-tag">4</span>. 异常情况处理<br></code></pre></td></tr></table></figure><p>具体源码为：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// SourceFile = PackageClause &quot;;&quot; &#123; ImportDecl &quot;;&quot; &#125; &#123; TopLevelDecl &quot;;&quot; &#125; .</span><br>func (p *parser) fileOrNil() *File &#123;<br><span class="hljs-keyword">if</span> trace &#123;<br>defer p.trace(<span class="hljs-string">&quot;file&quot;</span>)()<br>&#125;<br>    <span class="hljs-comment">// 0 打开 source file</span><br>f := new(File)<br>f.pos = p.pos()<br><br><span class="hljs-comment">// 1. 首先解析 PackageClause 定义</span><br><span class="hljs-comment">// 判断读取的 Token 是否为 Package，若不是则返回</span><br><span class="hljs-keyword">if</span> !p.got(<span class="hljs-variable">_Package</span>) &#123;<br>p.syntaxError(<span class="hljs-string">&quot;package statement must be first&quot;</span>)<br>return <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 获取 package 定义</span><br>f.Pragma = p.takePragma()<br><span class="hljs-comment">// p.name() 返回当前的字面量</span><br>f.PkgName = p.<span class="hljs-built_in">name</span>()<br>p.want(<span class="hljs-variable">_Semi</span>)<br><br><span class="hljs-comment">// don&#x27;t bother continuing if package clause has errors</span><br><span class="hljs-keyword">if</span> p.first != <span class="hljs-literal">nil</span> &#123;<br>return <span class="hljs-literal">nil</span><br>&#125;<br><br>    <span class="hljs-comment">// 2. 解析 Import 声明</span><br><span class="hljs-comment">// &#123; ImportDecl &quot;;&quot; &#125;</span><br><span class="hljs-comment">// 判断读取的 Token 是否为 Import</span><br><span class="hljs-keyword">for</span> p.got(<span class="hljs-variable">_Import</span>) &#123;<br>    <span class="hljs-comment">// Import 加入到 DeclList</span><br>f.DeclList = p.appendGroup(f.DeclList, p.importDecl)<br>p.want(<span class="hljs-variable">_Semi</span>)<br>&#125;<br>    <br>    <span class="hljs-comment">// 3. 解析 TopLevelDecl 顶层声明</span><br><span class="hljs-comment">// &#123; TopLevelDecl &quot;;&quot; &#125;</span><br><span class="hljs-comment">// 直到解析到 文件末尾</span><br><span class="hljs-keyword">for</span> p.tok != <span class="hljs-variable">_EOF</span> &#123;<br>    <span class="hljs-comment">// switch-case 判断 Token 类型，跳转到对应的处理逻辑</span><br><span class="hljs-keyword">switch</span> p.tok &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-variable">_Const</span>:    <span class="hljs-comment">// 解析常量，传入了函数 constDecl()</span><br>p.next()<br>f.DeclList = p.appendGroup(f.DeclList, p.constDecl)<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">_Type</span>:     <span class="hljs-comment">// 解析 Type，传入了函数 typeDecl()</span><br>p.next()<br>f.DeclList = p.appendGroup(f.DeclList, p.typeDecl)<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">_Var</span>:      <span class="hljs-comment">// 解析 Var，传入了函数 varDecl()</span><br>p.next()<br>f.DeclList = p.appendGroup(f.DeclList, p.varDecl)<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">_Func</span>:     <span class="hljs-comment">// 解析 Func，p.funcDeclOrNil() 用来解析函数</span><br>p.next()<br><span class="hljs-keyword">if</span> d := p.funcDeclOrNil(); d != <span class="hljs-literal">nil</span> &#123;<br>f.DeclList = <span class="hljs-built_in">append</span>(f.DeclList, d)<br>&#125;<br><br><span class="hljs-keyword">default</span>:    <span class="hljs-comment">// 处理其余 Case</span><br><span class="hljs-keyword">if</span> p.tok == <span class="hljs-variable">_Lbrace</span> &amp;&amp; len(f.DeclList) &gt; <span class="hljs-number">0</span> &amp;&amp; isEmptyFuncDecl(f.DeclList[len(f.DeclList)-<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">// opening &#123; of function declaration on next line</span><br>p.syntaxError(<span class="hljs-string">&quot;unexpected semicolon or newline before &#123;&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>p.syntaxError(<span class="hljs-string">&quot;non-declaration statement outside function body&quot;</span>)<br>&#125;<br>p.advance(<span class="hljs-variable">_Const</span>, <span class="hljs-variable">_Type</span>, <span class="hljs-variable">_Var</span>, <span class="hljs-variable">_Func</span>)<br>continue<br>&#125;<br><br><span class="hljs-comment">// Reset p.pragma BEFORE advancing to the next token (consuming &#x27;;&#x27;)</span><br><span class="hljs-comment">// since comments before may set pragmas for the next function decl.</span><br>p.clearPragma()<br>        <span class="hljs-comment">// 异常处理</span><br><span class="hljs-keyword">if</span> p.tok != <span class="hljs-variable">_EOF</span> &amp;&amp; !p.got(<span class="hljs-variable">_Semi</span>) &#123;<br>p.syntaxError(<span class="hljs-string">&quot;after top level declaration&quot;</span>)<br>p.advance(<span class="hljs-variable">_Const</span>, <span class="hljs-variable">_Type</span>, <span class="hljs-variable">_Var</span>, <span class="hljs-variable">_Func</span>)<br>&#125;<br>&#125;<br><span class="hljs-comment">// p.tok == _EOF</span><br><br>p.clearPragma()<br>f.Lines = p.line<br>    <br>    <span class="hljs-comment">// 4. 返回 syntax.File 解析完成的源文件</span><br>return f<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="syntaxparserappengroup-处理批量定义">syntax.parser.appenGroup() 处理批量定义</span></h4><p>用于解析 import、const、var、type等声明：<br>eg:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    a <span class="hljs-keyword">int</span><br>    b <span class="hljs-keyword">int</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>    c := <span class="hljs-number">1</span><br>    d := <span class="hljs-number">2</span><br>)<br></code></pre></td></tr></table></figure><p>顶层定义的结构体，如：importDecl、constDecl、typeDecl、varDecl 都是通过 appendGroup() 进行解析，在进行语法分析时，需要传入额外的参数 group *Group：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// ConstSpec = IdentifierList [ [ Type ] &quot;=&quot; ExpressionList ] .</span><br>func (<span class="hljs-selector-tag">p</span> *parser) constDecl(group *Group) Decl &#123;<br><span class="hljs-keyword">if</span> trace &#123;<br>defer <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.trace</span>(<span class="hljs-string">&quot;constDecl&quot;</span>)()<br>&#125;<br><br>d := new(ConstDecl)<br>d<span class="hljs-selector-class">.pos</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.pos</span>()<br>d<span class="hljs-selector-class">.Group</span> = group<br>d<span class="hljs-selector-class">.Pragma</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.takePragma</span>()<br><br>d<span class="hljs-selector-class">.NameList</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.nameList</span>(<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>())<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.tok</span> != _EOF &amp;&amp; <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.tok</span> != _Semi &amp;&amp; <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.tok</span> != _Rparen &#123;<br>d<span class="hljs-selector-class">.Type</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.typeOrNil</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.gotAssign</span>() &#123;<br>d<span class="hljs-selector-class">.Values</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.exprList</span>()<br>&#125;<br>&#125;<br><br>return d<br>&#125;<br><br><span class="hljs-comment">// VarSpec = IdentifierList ( Type [ &quot;=&quot; ExpressionList ] | &quot;=&quot; ExpressionList ) .</span><br>func (<span class="hljs-selector-tag">p</span> *parser) varDecl(group *Group) Decl &#123;<br><span class="hljs-keyword">if</span> trace &#123;<br>defer <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.trace</span>(<span class="hljs-string">&quot;varDecl&quot;</span>)()<br>&#125;<br><br>d := new(VarDecl)<br>d<span class="hljs-selector-class">.pos</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.pos</span>()<br>d<span class="hljs-selector-class">.Group</span> = group<br>d<span class="hljs-selector-class">.Pragma</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.takePragma</span>()<br><br>d<span class="hljs-selector-class">.NameList</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.nameList</span>(<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>())<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.gotAssign</span>() &#123;<br>d<span class="hljs-selector-class">.Values</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.exprList</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>d<span class="hljs-selector-class">.Type</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.type_</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.gotAssign</span>() &#123;<br>d<span class="hljs-selector-class">.Values</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.exprList</span>()<br>&#125;<br>&#125;<br><br>return d<br>&#125;<br></code></pre></td></tr></table></figure><p>Group 定义为：实际上只包含了 dummy 这一个值</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// All declarations belonging to the same <span class="hljs-keyword">group</span> <span class="hljs-title">point</span> to the same <span class="hljs-keyword">Group</span> <span class="hljs-title">node</span>.<br><span class="hljs-keyword">type</span> <span class="hljs-keyword">Group</span> <span class="hljs-title">struct</span> &#123;<br>dummy int // not empty so we are guaranteed different <span class="hljs-keyword">Group</span> <span class="hljs-title">instances</span><br>&#125;<br></code></pre></td></tr></table></figure><p>syntax.parser.appenGroup() 具体实现为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// appendGroup(f) = f | &quot;(&quot; &#123; f &quot;;&quot; &#125; &quot;)&quot; . // &quot;;&quot; is optional before &quot;)&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *parser)</span> <span class="hljs-title">appendGroup</span><span class="hljs-params">(list []Decl, f <span class="hljs-keyword">func</span>(*Group)</span> <span class="hljs-title">Decl</span>) []<span class="hljs-title">Decl</span></span> &#123;<br><span class="hljs-keyword">if</span> p.tok == _Lparen &#123;<br>g := <span class="hljs-built_in">new</span>(Group)<br>p.list(_Lparen, _Semi, _Rparen, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br>list = <span class="hljs-built_in">append</span>(list, f(g))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>list = <span class="hljs-built_in">append</span>(list, f(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-keyword">if</span> debug &#123;<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">if</span> d == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;nil list entry&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> list<br>&#125;<br></code></pre></td></tr></table></figure><p>appendGroup() 调用传入的方法 f() 对输入流进行匹配，并将匹配的结果保存到 DeclList 数组中。</p><p>参见 <strong>syntax.fileOrNil()</strong> 方法中，输入流中的 Token 匹配为 import, var, const, type 时，会调用 appendGroup() 同时传入具体的 importDecl(), constDecl(), typeDecl(), varDecl() 进行解析。</p><h4><span id="syntaxparserfuncdeclornil-处理-函数声明">syntax.parser.funcDeclOrNil() 处理 函数声明</span></h4><p>对于函数这种较为特殊的声明， <a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/parser.go#L621">syntax.parser.funcDeclOrNil()</a> 做了单独的实现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>. 初始化 <span class="hljs-selector-tag">funcDecl</span> 函数声明结构体<br><span class="hljs-selector-tag">2</span>. 匹配 <span class="hljs-selector-tag">func</span> 后的 () 中的内容 <span class="hljs-selector-tag">-</span>&gt; 函数调用者，分别对 <span class="hljs-selector-tag">1</span>, <span class="hljs-selector-tag">2</span>, &gt;<span class="hljs-selector-tag">2</span> 的情况做了处理<br><span class="hljs-selector-tag">3</span>. 获取函数名称 <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>()<br><span class="hljs-selector-tag">4</span>. 匹配 () 内，各参数，() 外的函数返回值<br><span class="hljs-selector-tag">5</span>. 匹配 &#123;&#125; 函数体 <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.funcBody</span>()<br></code></pre></td></tr></table></figure><p>源码实现为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// FunctionDecl = &quot;func&quot; FunctionName ( Function | Signature ) .</span><br><span class="hljs-comment">// FunctionName = identifier .</span><br><span class="hljs-comment">// Function     = Signature FunctionBody .</span><br><span class="hljs-comment">// MethodDecl   = &quot;func&quot; Receiver MethodName ( Function | Signature ) .</span><br><span class="hljs-comment">// Receiver     = Parameters .</span><br>func (<span class="hljs-selector-tag">p</span> *parser) funcDeclOrNil() *FuncDecl &#123;<br><span class="hljs-keyword">if</span> trace &#123;<br>defer <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.trace</span>(<span class="hljs-string">&quot;funcDecl&quot;</span>)()<br>&#125;<br>    <span class="hljs-comment">// 1. 初始化 funcDecl</span><br>f := new(FuncDecl)<br>f<span class="hljs-selector-class">.pos</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.pos</span>()<br>f<span class="hljs-selector-class">.Pragma</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.takePragma</span>()<br>    <br>    <span class="hljs-comment">// 2. 匹配函数调用者</span><br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.got</span>(_Lparen) &#123;<br>rcvr := <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.paramList</span>(nil, _Rparen, false)<br>switch len(rcvr) &#123;<br>case <span class="hljs-number">0</span>:<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.error</span>(<span class="hljs-string">&quot;method has no receiver&quot;</span>)<br>default:<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.error</span>(<span class="hljs-string">&quot;method has multiple receivers&quot;</span>)<br>fallthrough<br>case <span class="hljs-number">1</span>:<br>f<span class="hljs-selector-class">.Recv</span> = rcvr<span class="hljs-selector-attr">[0]</span><br>&#125;<br>&#125;<br>    <br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.tok</span> != _Name &#123;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.syntaxError</span>(<span class="hljs-string">&quot;expecting name or (&quot;</span>)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.advance</span>(_Lbrace, _Semi)<br>return nil<br>&#125;<br>    <span class="hljs-comment">// 3. 获取函数名称</span><br>f<span class="hljs-selector-class">.Name</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>()<br><span class="hljs-comment">// 4. 匹配 参数 &amp; 返回值</span><br>f<span class="hljs-selector-class">.TParamList</span>, f<span class="hljs-selector-class">.Type</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.funcType</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">// 5. 匹配 函数体</span><br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.tok</span> == _Lbrace &#123;<br>f<span class="hljs-selector-class">.Body</span> = <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.funcBody</span>()<br>&#125;<br>    <br>return f<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="词法解析器-scanner-的使用">词法解析器 scanner 的使用</span></h4><p>词法解析器 scanner 嵌入在 parser 中，通过 p.next() 的方式进行了调用，详见:<br><a href="https://github.com/golang/go/blob/6965b01ea248cabb70c3749fd218b36089a21efb/src/cmd/compile/internal/syntax/parser.go#L181">src/cmd/compile/internal/syntax.parser.got()</a> </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># p.got()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *parser)</span> <span class="hljs-title">got</span><span class="hljs-params">(tok token)</span> <span class="hljs-title">bool</span> &#123;</span><br><span class="hljs-keyword">if</span> p.tok == tok &#123;<br>    // 此处实际使用的是 scanner.<span class="hljs-keyword">next</span>()、scanner.nextch()<br>p.<span class="hljs-keyword">next</span>()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此外， parser 还提供了对 parser.got() 的封装 <a href="https://github.com/golang/go/blob/4d5bb9c60905b162da8b767a8a133f6b4edcaa65/src/cmd/compile/internal/syntax/parser.go#L166">cmd/compile/internal/syntax.parser.want()</a> 用于快速判断下一个 Token 是否是我们想要的 Token：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"># <span class="hljs-selector-tag">want</span>()<br><span class="hljs-selector-tag">func</span> (p *parser) <span class="hljs-selector-tag">want</span>(tok token) &#123;<br><span class="hljs-selector-tag">if</span> !<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.got</span>(tok) &#123;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.syntaxError</span>(<span class="hljs-string">&quot;expecting &quot;</span> + tokstring(tok))<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.advance</span>()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4><span id="srccmdcompileinternalsyntaxnodesgo-中相关结构体定义">src/cmd/compile/internal/syntax/nodes.go 中相关结构体定义</span></h4><p><a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/nodes.go">src/cmd/compile/internal/syntax/nodes.go</a> 包含了 parser 中使用到的各结构体的定义</p><p>parser.fileOrNil() 在完成对源文件的解析后，返回 syntax.File 结构体</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> package PkgName; DeclList[<span class="hljs-number">0</span>], DeclList[<span class="hljs-number">1</span>], ...<br>type File struct &#123;<br>Pragma   Pragma<br>PkgName  *Name  <span class="hljs-regexp">//</span> 包名<br>DeclList []Decl <span class="hljs-regexp">//</span> 声明结构的列表<br>Lines    uint   <span class="hljs-regexp">//</span> 源文件代码行数<br>node            <span class="hljs-regexp">//</span> 内嵌 node 结构体<br>&#125;<br></code></pre></td></tr></table></figure><p>其他的声明定义，如 函数声明 FuncDecl:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> match case 匹配情况<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">func</span>          Name Type &#123; Body &#125;<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">func</span>          Name Type<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">func</span> Receiver Name Type &#123; Body &#125;<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">func</span> Receiver Name Type<br>type FuncDecl struct &#123;<br>Pragma     Pragma<br>Recv       *Field       <span class="hljs-regexp">//</span> 函数接收者<br>Name       *Name        <span class="hljs-regexp">//</span> 函数名称<br>TParamList []*Field     <span class="hljs-regexp">//</span> 参数<br>Type       *FuncType    <span class="hljs-regexp">//</span> 函数类型<br>Body       *BlockStmt   <span class="hljs-regexp">//</span> 函数体<br>decl                    <span class="hljs-regexp">//</span> 内嵌 decl 结构体<br>&#125;<br></code></pre></td></tr></table></figure><p>函数体 BlockStmt 由一系列的 Stmt 表达式组成</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">BlockStmt</span> struct &#123;<br>    <span class="hljs-comment">// 表达式列表</span><br>List   []<span class="hljs-keyword">Stmt</span><br>Rbrace Pos<br><span class="hljs-keyword">stmt</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Stmt 实际是一个 接口，共有 14 种不同类型的 Stmt 实现，如：EmptyStmt、BlockStmt、DeclStmt 等</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs elm">// interface <span class="hljs-type">Stmt</span><br><span class="hljs-keyword">type</span> <span class="hljs-type">Stmt</span> interface &#123;<br><span class="hljs-type">Node</span><br>aStmt()<br>&#125;<br><br>// <span class="hljs-type">BlockStmt</span><br><span class="hljs-keyword">type</span> <span class="hljs-type">BlockStmt</span> struct &#123;<br><span class="hljs-type">List</span>   []<span class="hljs-type">Stmt</span><br><span class="hljs-type">Rbrace</span> <span class="hljs-type">Pos</span><br>stmt<br>&#125;<br><br>// <span class="hljs-type">AssignStmt</span><br><span class="hljs-keyword">type</span> <span class="hljs-type">AssignStmt</span> struct &#123;<br><span class="hljs-type">Op</span>       <span class="hljs-type">Operator</span> // 0 means no operation<br><span class="hljs-type">Lhs</span>, <span class="hljs-type">Rhs</span> <span class="hljs-type">Expr</span>     // <span class="hljs-type">Rhs</span> == <span class="hljs-type">ImplicitOne</span> means <span class="hljs-type">Lhs</span>++ (<span class="hljs-type">Op</span> == <span class="hljs-type">Add</span>) or <span class="hljs-type">Lhs</span><span class="hljs-comment">-- (Op == Sub)</span><br>simpleStmt<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="conclusion">Conclusion</span></h3><ol><li>Golang 基于 LALR(1) 思想，对语法分析器进行了实现</li><li>词法分析器 scanner 嵌入到了 parser 中，通过 got(), want() 被 parser 调用</li><li>知识点串起来了</li><li>抽象 -&gt; 具体</li><li>具体 -&gt; 抽象</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.2 编译原理 -- 词法分析</title>
    <link href="/2021/12/30/2-2-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <url>/2021/12/30/2-2-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1><span id="22-parsing词法分析-amp-语法分析">2.2 Parsing（词法分析 &amp; 语法分析 ）</span></h1><p>同属于编译过程，将源码文件转换成更易于 理解、分析 并且 结构化 的AST。</p><h2><span id="221-词法分析-lex-go-实现">2.2.1 词法分析 – lex, go 实现</span></h2><p>词法分析<br>-&gt; 将字符串分组，降低理解字符串的成本，简化源码的分析过程<br>-&gt; 字符序列转化为 Token(标记) 序列的过程</p><h3><span id="lex">lex</span></h3><p><a href="http://dinosaur.compilertools.net/lex/index.html">lex 官方文档</a> – 如何使用 lex 构建自己的词法分析器</p><p>lex 用于生成词法分析器，将源码文件中的字符分解成 Token 序列。</p><p>可以将其理解为 <strong>正则匹配</strong> 的生成器，使用 正则匹配 扫描源码文件的字符流。</p><p>参照官方 doc, 一个简单的 lex demo 如下：( .l 文件 -&gt; lex 文件格式)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># simplegolex.l</span><br>%&#123;<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br>%&#125;<br><br>%%<br>package      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PACKAGE &quot;</span>);<br>import       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMPORT &quot;</span>);<br>\.           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DOT &quot;</span>);<br>\&#123;           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LBRACE &quot;</span>);<br>\&#125;           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RBRACE &quot;</span>);<br>\(           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LPAREN &quot;</span>);<br>\)           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RPAREN &quot;</span>);<br>\&quot;           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;QUOTE &quot;</span>);<br>\n           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>[0-9]+       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NUMBER &quot;</span>);<br>[a-zA-Z_]+   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IDENT &quot;</span>);<br>%%<br></code></pre></td></tr></table></figure><p>以 golang Hello world 源码为目标解析文件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">package</span> <span class="hljs-selector-tag">main</span><br><br><span class="hljs-selector-tag">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-selector-tag">func</span> <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">fmt</span><span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>.l 文件需要通过 lex 命令将其展开为 C 代码，执行步骤如下(Centos 7.6)：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 安装 flex 及其依赖包</span><br>yum -y install gcc gcc-c++ cgdb git flex flex-dvel bison<br><br><span class="hljs-meta"># lex 展开</span><br>lex simplegolex.l<br><br><span class="hljs-meta"># 生成文件 lex.yy.c</span><br></code></pre></td></tr></table></figure><p>lex.yy.c 文件有 1794 行代码，其中：<br>前 600 行 -&gt; 宏 和 函数 的声明和定义<br>核心代码从 681 行 while(1) 开始, 使用了 <strong>有限自动机(DFA)</strong> 的程序结构，分析输入的字符流</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"># Line <span class="hljs-number">681</span><br><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> ) &#123; <span class="hljs-comment">/* loops until end-of-file is reached */</span><br>...<br>yy_match:<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">register</span> YY_CHAR yy_c = yy_ec[<span class="hljs-built_in">YY_SC_TO_UI</span>(*yy_cp)];<br><span class="hljs-keyword">if</span> ( yy_accept[yy_current_state] ) &#123;<br>(yy_last_accepting_state) = yy_current_state;<br>(yy_last_accepting_cpos) = yy_cp;<br>&#125;<br><span class="hljs-keyword">while</span> ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) &#123;<br>yy_current_state = (<span class="hljs-keyword">int</span>) yy_def[yy_current_state];<br><span class="hljs-keyword">if</span> ( yy_current_state &gt;= <span class="hljs-number">30</span> )<br>yy_c = yy_meta[(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) yy_c];<br>&#125;<br>yy_current_state = yy_nxt[yy_base[yy_current_state] + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) yy_c];<br>++yy_cp;<br>&#125; <span class="hljs-keyword">while</span> ( yy_base[yy_current_state] != <span class="hljs-number">37</span> );<br>...<br><br>do_action:<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> ( yy_act )<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>    ...<br><br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-function">YY_RULE_SETUP</span><br><span class="hljs-function">    <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;PACKAGE &quot;</span>)</span></span>;<br>    YY_BREAK<br>...<br></code></pre></td></tr></table></figure><p>需要通过 gcc 添加额外的 -ll 选项将其编译为二进制：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># -o 指定输出文件的名称</span><br><span class="hljs-meta"># -ll 指定使用 liblec 库</span><br>cc lex.yy.c -o simplego -ll<br><br><span class="hljs-meta"># 生成文件 simplego</span><br></code></pre></td></tr></table></figure><p>通过管道的方式，将 main.go 输入到 simplego 词法分析器，自动输出到终端：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"># &lt; 输入 <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span><br>./simplego &lt; <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span><br><br># 词法分析后，生成结果：<br>PACKAGE  IDENT<br><br>IMPORT  LPAREN<br>        <span class="hljs-selector-tag">QUOTE</span> IDENT <span class="hljs-selector-tag">QUOTE</span><br>RPAREN<br><br>IDENT  IDENT LPAREN RPAREN  LBRACE<br>        IDENT DOT IDENT LPAREN <span class="hljs-selector-tag">QUOTE</span> IDENT  IDENT <span class="hljs-selector-tag">QUOTE</span> RPAREN<br>RBRACE<br></code></pre></td></tr></table></figure><p>以上的 lex demo，将 main.go 源代码中的字符序列，转化为了 Token 序列，利于后续 语法分析器的处理</p><h3><span id="golang-实现">golang 实现</span></h3><p>Golang 的词法解析器 源码位于： <a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/syntax">/src/cmd/compile/internal/syntax</a></p><p><a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/scanner.go">scanner.go</a> 包含了 扫描源文件 代码实现。</p><p>其中，<a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/scanner.go#L30">scanner</a> 结构体 持有当前扫描的数据源文件、启用的扫描模式、当前被扫描到的 Token：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># scanner.go<br><span class="hljs-keyword">type</span> scanner struct &#123;<br>source          // 结构体，用于扫描源文件，获取字符序列<br>mode   uint     // 启用模式<br>nlsemi <span class="hljs-type">bool</span>     // 开启后会将 <span class="hljs-string">&#x27;\n&#x27;</span> EOF 转换为 <span class="hljs-string">&#x27;;&#x27;</span><br><br>// <span class="hljs-keyword">current</span> token, <span class="hljs-keyword">valid</span> <span class="hljs-keyword">after</span> calling next()<br><span class="hljs-type">line</span>, col uint<br>blank     <span class="hljs-type">bool</span> // <span class="hljs-type">line</span> <span class="hljs-keyword">is</span> blank up <span class="hljs-keyword">to</span> col<br>tok       token<br>lit       string   // <span class="hljs-keyword">valid</span> <span class="hljs-keyword">if</span> tok <span class="hljs-keyword">is</span> _Name, _Literal, <span class="hljs-keyword">or</span> _Semi (&quot;semicolon&quot;, &quot;newline&quot;, <span class="hljs-keyword">or</span> &quot;EOF&quot;); may be malformed <span class="hljs-keyword">if</span> bad <span class="hljs-keyword">is</span> <span class="hljs-keyword">true</span><br>bad       <span class="hljs-type">bool</span>     // <span class="hljs-keyword">valid</span> <span class="hljs-keyword">if</span> tok <span class="hljs-keyword">is</span> _Literal, <span class="hljs-keyword">true</span> <span class="hljs-keyword">if</span> a syntax error occurred, lit may be malformed<br>kind      LitKind  // <span class="hljs-keyword">valid</span> <span class="hljs-keyword">if</span> tok <span class="hljs-keyword">is</span> _Literal<br>op        <span class="hljs-keyword">Operator</span> // <span class="hljs-keyword">valid</span> <span class="hljs-keyword">if</span> tok <span class="hljs-keyword">is</span> _Operator, _AssignOp, <span class="hljs-keyword">or</span> _IncOp<br>prec      <span class="hljs-type">int</span>      // <span class="hljs-keyword">valid</span> <span class="hljs-keyword">if</span> tok <span class="hljs-keyword">is</span> _Operator, _AssignOp, <span class="hljs-keyword">or</span> _IncOp<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/tokens.go">/src/cmd/compile/internal/syntax/tokens.go</a> 中对 Golang 支持的全部 Token 类型进行了定义，所有的 Token 类型都使用了 正整数 来定义，如：操作符、括号、关键字：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">const (<br>_    token = iota<br>_EOF       <span class="hljs-regexp">//</span> EOF<br><br><span class="hljs-regexp">//</span> operators and operations<br>_Operator <span class="hljs-regexp">//</span> op<br>...<br><br><span class="hljs-regexp">//</span> delimiters<br>_Lparen    <span class="hljs-regexp">//</span> (<br>_Lbrack    <span class="hljs-regexp">//</span> [<br>...<br><br><span class="hljs-regexp">//</span> keywords<br>_Break       <span class="hljs-regexp">//</span> <span class="hljs-keyword">break</span><br>...<br>_Type        <span class="hljs-regexp">//</span> type<br>_Var         <span class="hljs-regexp">//</span> var<br><br>tokenCount <span class="hljs-regexp">//</span><br>)<br></code></pre></td></tr></table></figure><p>Token 类型：名称、字面量、操作符、分隔符、关键字。</p><p><a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/syntax/scanner.go#L88">cmd/compile/internal/syntax.scanner.next</a> 词法分析 由 next() 驱动，主要逻辑是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 调用 nextch() 获取文件中最近未被解析的字符<br><span class="hljs-bullet">2.</span> 空，异常判断，遇到换行、空格会跳过<br><span class="hljs-bullet">3.</span> 通过 switch-case 模式，根据读取字符的类型 执行不同的 case<br><span class="hljs-bullet">4.</span> 循环执行，直到读取到文件 EOF 结束<br></code></pre></td></tr></table></figure><p>next() 具体代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *scanner)</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span> &#123;<br>...<br>s.stop()<br>startLine, startCol := s.pos()<br><span class="hljs-keyword">for</span> s.ch == <span class="hljs-string">&#x27; &#x27;</span> || s.ch == <span class="hljs-string">&#x27;\t&#x27;</span> || s.ch == <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; !nlsemi || s.ch == <span class="hljs-string">&#x27;\r&#x27;</span> &#123;<br>s.nextch()  <span class="hljs-comment">// 获取待解析字符</span><br>&#125;<br><br>s.line, s.col = s.pos()<br>s.blank = s.line &gt; startLine || startCol == colbase<br>s.start()<br><span class="hljs-comment">// error check 异常检查</span><br><span class="hljs-keyword">if</span> isLetter(s.ch) || s.ch &gt;= utf8.RuneSelf &amp;&amp; s.atIdentChar(<span class="hljs-literal">true</span>) &#123;<br>s.nextch()<br>s.ident()<br><span class="hljs-keyword">return</span><br>&#125;<br><br>    <span class="hljs-comment">// switch-case 根据读取的字符，跳转到具体执行方法</span><br><span class="hljs-keyword">switch</span> s.ch &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>s.tok = _EOF    <span class="hljs-comment">// 文件末尾</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>:<br>s.number(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 匹配数字</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:           <span class="hljs-comment">// : 或者 :=</span><br>    s.nextch()<br>    <span class="hljs-keyword">if</span> s.ch == <span class="hljs-string">&#x27;=&#x27;</span> &#123;<br>    s.nextch()<br>    s.tok = _Define<br>    <span class="hljs-keyword">break</span><br>    &#125;<br>    s.tok = _Colon<br><br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结构体 <a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/syntax/source.go#L46">source</a> 采用了 buffer + index 设计，每次将源文件字符序列读取到 buf 中，提供  init(), pos(), nextch(), fill() 等方法去执行 初始化、获取位置信息、获取待解析字符、填充 buf 等操作<br>源码如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>                +------ content <span class="hljs-keyword">in</span> use -------+<br><span class="hljs-regexp">//</span>                v                             v<br><span class="hljs-regexp">//</span> buf [...read...|...segment...|ch|...unread...|s|...free...]<br><span class="hljs-regexp">//</span>                ^             ^  ^            ^<br><span class="hljs-regexp">//</span>                |             |  |            |<br><span class="hljs-regexp">//</span>                b         r-chw  r            e<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span> Invariant: -<span class="hljs-number">1</span> &lt;= b &lt; r &lt;= e &lt; len(buf) &amp;&amp; buf[e] == sentinel<br><span class="hljs-regexp">//</span> b -&gt; begin<br><span class="hljs-regexp">//</span> r -&gt; read<br><span class="hljs-regexp">//</span> e -&gt; end<br><span class="hljs-regexp">//</span> chw -&gt; the width of character<br>type source struct &#123;<br><span class="hljs-keyword">in</span>   io.Reader   <span class="hljs-regexp">//</span> io.Reader 读源码文件<br>errh <span class="hljs-keyword">func</span>(line, col uint, msg string)   <span class="hljs-regexp">//</span> 异常函数<br><br>buf       []byte <span class="hljs-regexp">//</span> 读取源码字符序列的 buffer<br>ioerr     error  <span class="hljs-regexp">//</span> nil、io异常处理<br>b, r, e   int    <span class="hljs-regexp">//</span> buffer index 操作缓冲区的索引，参考上方注释<br>line, col uint   <span class="hljs-regexp">//</span> ch 在源码文件中的位置信息<br>ch        rune   <span class="hljs-regexp">//</span> 最近待读取的字符<br>chw       int    <span class="hljs-regexp">//</span> ch 字符的宽度<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/syntax/source.go#L113">cmd/compile/internal/syntax/source/nextch()</a> nextch() 方法用于取 最近的未被解析的字符，代码逻辑为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 判断下一个字符是否为换行符<br><span class="hljs-bullet">2.</span> 处理最常见的情况，下一个字符包含完整的 ASCII 字符，直接读取<br><span class="hljs-bullet">3.</span> 考虑较为特殊的情况，下一个字符不完整，则需要填充 s.buf，参见 fill() 函数<br><span class="hljs-bullet">4.</span> 特殊情况处理：EOF &amp; BOM 文件<br></code></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func (s *source) nextch() &#123;<br><span class="hljs-attribute">redo</span>:<br>    // Case1: 是否为换行符<br>s<span class="hljs-variable">.col</span> += uint(s<span class="hljs-variable">.chw</span>)<br>if s<span class="hljs-variable">.ch</span> == &#x27;\n&#x27; &#123;<br>s<span class="hljs-variable">.line</span>++<br>s<span class="hljs-variable">.col</span> = 0<br>&#125;<br><br>// Case2: 能读取到 ASCII 字符<br>if s<span class="hljs-variable">.ch</span> = rune(s<span class="hljs-variable">.buf</span>[s<span class="hljs-variable">.r</span>]); <span class="hljs-attribute">s.ch &lt; sentinel &#123;</span><br><span class="hljs-attribute">s.r++</span><br><span class="hljs-attribute">s.chw = 1</span><br><span class="hljs-attribute">if s.ch == 0 &#123;</span><br><span class="hljs-attribute">s.error(&quot;invalid NUL character&quot;)</span><br><span class="hljs-attribute">goto redo</span><br><span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute">return</span><br><span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">// Case3</span>: buf 中的数据不是完整的 ASCII 字符，调用 fill() 填充<br>for s<span class="hljs-variable">.e-s</span><span class="hljs-variable">.r</span> &lt; utf8<span class="hljs-variable">.UTFMax</span> &amp;&amp; !utf8<span class="hljs-variable">.FullRune</span>(s<span class="hljs-variable">.buf</span>[s<span class="hljs-variable">.r</span>:s<span class="hljs-variable">.e</span>]) &amp;&amp; s<span class="hljs-variable">.ioerr</span> == nil &#123;<br>s<span class="hljs-variable">.fill</span>()<br>&#125;<br><br>    // Case4: 特殊情况处理<br>// EOF<br>if s<span class="hljs-variable">.r</span> == s<span class="hljs-variable">.e</span> &#123;<br>if s<span class="hljs-variable">.ioerr</span> != io<span class="hljs-variable">.EOF</span> &#123;<br>// ensure we never start with a &#x27;/&#x27; (e<span class="hljs-variable">.g</span>., rooted path) in the error message<br>s<span class="hljs-variable">.error</span>(&quot;I/O error: &quot; + s<span class="hljs-variable">.ioerr</span><span class="hljs-variable">.Error</span>())<br>s<span class="hljs-variable">.ioerr</span> = nil<br>&#125;<br>s<span class="hljs-variable">.ch</span> = -1<br>s<span class="hljs-variable">.chw</span> = 0<br>return<br>&#125;<br><br>s<span class="hljs-variable">.ch</span>, s<span class="hljs-variable">.chw</span> = utf8<span class="hljs-variable">.DecodeRune</span>(s<span class="hljs-variable">.buf</span>[s<span class="hljs-variable">.r</span>:s<span class="hljs-variable">.e</span>])<br>s<span class="hljs-variable">.r</span> += s<span class="hljs-variable">.chw</span><br><br>if s<span class="hljs-variable">.ch</span> == utf8<span class="hljs-variable">.RuneError</span> &amp;&amp; s<span class="hljs-variable">.chw</span> == 1 &#123;<br>s<span class="hljs-variable">.error</span>(&quot;invalid UTF-8 encoding&quot;)<br>goto redo<br>&#125;<br><br>// BOM&#x27;s are only allowed as the first character in a file<br>const BOM = 0xfeff<br>if s<span class="hljs-variable">.ch</span> == BOM &#123;<br>if s<span class="hljs-variable">.line</span> &gt; 0 || s<span class="hljs-variable">.col</span> &gt; 0 &#123;<br>s<span class="hljs-variable">.error</span>(&quot;invalid BOM in the middle of the file&quot;)<br>&#125;<br>goto redo<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/d902791b509b641683d4ec58b282180c56918aec/src/cmd/compile/internal/syntax/source.go#L169">src/compile/internal/syntax/source/fill()</a> fill() 用于读取更多的字节到 s.buf 中，代码逻辑为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>. 获取 s.<span class="hljs-keyword">buf </span>中剩余的 content<br><span class="hljs-number">2</span>. 当剩余的 content 超过 s.<span class="hljs-keyword">buf </span>长度的一半，将 s.<span class="hljs-keyword">buf </span>扩一倍；否则，仅移动 content<br><span class="hljs-number">3</span>. 读取数据到 s.<span class="hljs-keyword">buf，尝试 </span><span class="hljs-number">10</span> 次<br></code></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *source)</span> <span class="hljs-title">fill</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 获取 content</span><br>b := s.r<br><span class="hljs-keyword">if</span> s.b &gt;= <span class="hljs-number">0</span> &#123;<br>b = s.b<br>s.b = <span class="hljs-number">0</span> <span class="hljs-comment">// after buffer has grown or content has been moved down</span><br>&#125;<br>content := s.buf[b:s.e]<br><br><span class="hljs-comment">// 操作判断：扩容 or 移动</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content)*<span class="hljs-number">2</span> &gt; <span class="hljs-built_in">len</span>(s.buf) &#123;<br>s.buf = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, nextSize(<span class="hljs-built_in">len</span>(s.buf)))<br><span class="hljs-built_in">copy</span>(s.buf, content)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">copy</span>(s.buf, content)<br>&#125;<br>s.r -= b<br>s.e -= b<br><br><span class="hljs-comment">// 读取数据到 s.buf；尝试 10 次，读取到就返回</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span><br>n, s.ioerr = s.in.Read(s.buf[s.e : <span class="hljs-built_in">len</span>(s.buf)<span class="hljs-number">-1</span>]) <span class="hljs-comment">// -1 to leave space for sentinel</span><br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;negative read&quot;</span>) <span class="hljs-comment">// incorrect underlying io.Reader implementation</span><br>&#125;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> || s.ioerr != <span class="hljs-literal">nil</span> &#123;<br>s.e += n<br>s.buf[s.e] = sentinel<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// n == 0</span><br>&#125;<br><br>s.buf[s.e] = sentinel<br>s.ioerr = io.ErrNoProgress<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="conclusion">Conclusion</span></h3><ol><li>词法解析的过程是惰性的，只有在上层的解析器需要时才会被调用</li><li>早期的 Golang 使用 lex 通过 <strong>正则匹配</strong> 生成词法解析器，经过了多个版本的迭代后，用 Go 实现了词法分析器，用自己写的词法解析器来解析自己</li></ol>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.1 编译原理 -- 编译过程</title>
    <link href="/2021/12/30/2-1-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <url>/2021/12/30/2-1-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Golang 代码/项目 在运行之前需要通过编译器将其编译为二进制机器码，包含二进制机器码的文件才能够在机器上运行。</p><p>编译原理 是一门较为硬核的专业课，软工培养方案中没有（是我们太笨？还是这门课太难？）。</p><p>深入了解编译原理，推荐《编译原理（第2版）[龙书]》，该书的两位作者获得了 2020年图灵奖。</p><h2><span id="0-预备知识">0 预备知识</span></h2><h3><span id="01-ast-联想到了数据库语法分析amp词法分析-中的-ast">0.1 AST – 联想到了数据库语法分析&amp;词法分析 中的 AST</span></h3><p>抽象语法树（Abstract Syntax Tree、AST）：通过<strong>前序二叉树</strong>的方式对编程语言的语法结构进行了表示。AST 的每一个节点表示源代码中的一个元素，每一棵子树都表示一个语法元素。</p><p>可以在脑海中将 2 * 3 + 7 生成一个二叉树</p><p>AST 不包含一些不重要的字符、空格、分号、括号。</p><p>AST 在编译器执行完 语法分析 后生成。</p><h3><span id="02-ssa">0.2 SSA</span></h3><p>静态单赋值（Static Single Assignment、SSA）：中间代码的特性，每个变量只会被赋值一次，golang 使用 := 实现了静态单赋值。</p><p>eg：x, y 的值是多少？</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">## golang simple code</span><br>x := 1<br>x := 2<br>y := x<br></code></pre></td></tr></table></figure><p>实际结果为：x=2, y=2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">## SSA 优化后的中间代码</span><br><span class="hljs-attribute">x_1</span> := <span class="hljs-number">1</span><br><span class="hljs-attribute">x_2</span> := <span class="hljs-number">2</span><br><span class="hljs-attribute">y</span> = x_<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>SSA 本质上是一种中间代码优化方法。</p><h3><span id="03-指令集">0.3 指令集</span></h3><p>与 CPU 架构有关，编程语言为了兼容各 CPU 架构（如：x86, arm）往往需要根据架构不同将源码翻译为不同的机器码。</p><p>分为：CISC、RISC 两种，遵循了以下设计理念：<br>CISC（复杂指令集）: 通过增加指令的类型减少需要执行的指令数，如：x86<br>RISC（精简指令集）：使用更少的指令类型完成目标的计算任务，如：arm</p><h2><span id="1-编译过程">1 编译过程</span></h2><p>golang 编译器代码位置：<a href="https://github.com/golang/go/tree/master/src/cmd/compile">src/cmd/compile</a></p><p>编译原理中将编译器分为前后端：<br>编译器前端 -&gt; 词法、语法分析（Parsing）、类型检查&amp;中间代码生成（Type-checking and AST transformations）、通用 SSA 生成（Generic SSA）以及 机器码生成（Generating machine code）</p><h3><span id="11-parsing">1.1 Parsing</span></h3><p>golang 词法分析 &amp; 语法分析 具体代码实现：<a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/syntax">src/cmd/compile/internal/syntax</a> [lexer, parser, syntax tree]</p><p>词法分析：解析代码源文件，将其序列化为 Token 序列 -&gt; 词法解析器(lexer)</p><p>语法分析：按照顺序解析 Token 序列，按照编程语言定义好的 Grammar(文法) 自下而上或者自上而下的规约，将每一个 Go 源码文件归纳为一个 SourceFile 结构 -&gt; parser, syntax tree</p><p>语法树中包括了：包名、定义的常量、结构体、函数等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SourceFile</span> = PackageClause <span class="hljs-string">&quot;;&quot;</span> &#123; <span class="hljs-attribute">ImportDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125; &#123; <span class="hljs-attribute">TopLevelDecl</span> <span class="hljs-string">&quot;;&quot;</span> &#125; .<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"># main.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>Token 序列化：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">package</span>,main,<span class="hljs-keyword">import</span>,(,fmt,),func,main,(,),&#123;,fmt,Println,(,<span class="hljs-type">Hello</span>,<span class="hljs-type">World</span>),&#125;<br></code></pre></td></tr></table></figure><p>语法解析，生成 语法树：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-string">&quot;main.go&quot;</span>: <span class="hljs-class">SourceFile </span>&#123;<br><span class="hljs-symbol">    PackageName:</span> <span class="hljs-string">&quot;main&quot;</span>,<br><span class="hljs-symbol">    ImportDecl:</span> []Import&#123;<br>        <span class="hljs-string">&quot;fmt&quot;</span>,<br>    &#125;,<br><span class="hljs-symbol">    TopLevelDecl:</span> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>语法解析过程中发生的任何错误都会被 语法解析器发现并将消息打印到标准输出上（<strong>编译过程中，语法错误是语法解析器打出来的</strong>）。</p><h3><span id="12-type-checking-and-ast-transformations">1.2 Type-checking and AST transformations</span></h3><p>golang 类型检查 &amp; AST 转换 具体代码实现： <a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal/gc">src/cmd/compile/internel/gc</a></p><p>承接上一个步骤，编译器拿到了 源文件的 AST，然后对语法树中 定义和使用 的类型进行检查，类型检查步骤包括：</p><ol><li>常量、类型和函数名及类型</li><li>变量的赋值和初始化</li><li>函数、闭包</li><li>hash key-value 类型</li><li>函数体</li><li>外部声明</li></ol><p>通过对 AST 的遍历，所有的错误和不匹配 都会在这一节点被暴露出来（<strong>编译过程中，类型错误是当期步骤打出来的</strong>），如：<strong>结构体对接口的实现</strong>。</p><p>类型检查 还会去进行类型的推断，展开和改写内建的函数，如：<strong>make 关键字</strong></p><p>make 关键字会在当前阶段，根据子树的结构被替换为对应的函数:</p><ol><li>chan -&gt; <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/chan.go#L71">runtime.makechan</a></li><li>slice -&gt; <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/slice.go#L83">runtime.makeslice</a></li><li>map -&gt; <a href="https://github.com/golang/go/blob/41d8e61a6b9d8f9db912626eb2bbc535e929fefc/src/runtime/map.go#L303">runtime.makemap</a></li></ol><h3><span id="13-generic-ssa">1.3 Generic SSA</span></h3><p>golang 中间代码生成 具体代码实现： <a href="https://github.com/golang/go/blob/912262b806a432a29302e0cee45e4f42ef7038a2/src/cmd/compile/internal/gc/pgen.go#L358">src/cmd/compile/internal/gc/pgen.go#compileFunctions()</a></p><p>通过 词法、语法分析 以及 类型检查后，可以认为当前文件中的代码不存在语法错误 &amp; 类型错误，编译器会将 AST 转化为中间代码。</p><p>compileFunctions() ：代码逻辑</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">编译整个 <span class="hljs-type">Go</span> 项目中的全部函数<br>函数会在 compilequeue 编译队列中等待 nBackendWorkers 个 goroutine 的消费<br>（compilequeue <span class="hljs-operator">-</span> 生产者，goroutine <span class="hljs-operator">-</span> 消费者）<br>并发执行 compileSSA() 将函数的 <span class="hljs-type">AST</span> 转化为 中间代码 <span class="hljs-type">SSA</span><br>如果处于竞争模式下，compilequeue 中的 <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">会被随机调度</span></span><br><span class="hljs-function"></span>否则，会优先编译较长的函数<br></code></pre></td></tr></table></figure><h3><span id="14-generating-machine-code">1.4 Generating machine code</span></h3><p>golang 生成机器码的具体逻辑： <a href="https://github.com/golang/go/tree/master/src/cmd/compile/internal">src/cmd/compile/internal</a></p><p>golang 对不同平台生成机器码进行了实现，其中包括了：x86, arm, arm64, mips, mips64, ppc64, wsam 等</p><p>Go 经过编译可以运行主流机器上，可移植性强。</p><h2><span id="2-编译器入口">2 编译器入口</span></h2><p>编译器入口在 <a href="https://github.com/golang/go/blob/master/src/cmd/compile/internal/gc/main.go#L56">src/cmd/compile/internal/gc/main.go#Main()</a></p><p>gc.Main() 就是 Go 编译器的主程序入口</p><p>Main() ：代码逻辑</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>. 获取命令行传入的参数，更新编译选项和配置<br><span class="hljs-number">2</span>. 调用 src<span class="hljs-regexp">/cmd/</span><span class="hljs-keyword">compile</span><span class="hljs-regexp">/internal/g</span>c.parseFiles() 对输入的文件进行词法分析、语法分析得到对应文件的 AST<br><span class="hljs-number">3</span>. 分阶段对 AST 进行更新和编译：类型检查、中间代码生成、机器码生成（包括 <span class="hljs-number">9</span> 个子步骤）<br></code></pre></td></tr></table></figure><p>Step1: 检查常量、类型和函数的类型 -&gt; <strong>make 关键字，在此处展开和改写</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">// Phase <span class="hljs-number">1</span>: const, type, and names and types of funcs.<br><br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;top1&quot;</span>)<br>for i := <span class="hljs-number">0</span>; i &lt; len(xtop); i++ &#123;<br>n := xtop[i]<br>if op := n.Op; op != ODCL &amp;&amp; op != OAS &amp;&amp; op != OAS2 &amp;&amp; (op != ODCLTYPE || !n.Left.Name.Param.Alias) &#123;<br>xtop[i] = typecheck(n, ctxStmt)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step2: 进行变量的赋值</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coq">// Phase <span class="hljs-number">2</span>: <span class="hljs-keyword">Variable</span> assignments.<br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;top2&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; len(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> op := n.Op; op == ODCL |<span class="hljs-type">| op</span> == OAS |<span class="hljs-type">| op</span> == OAS2 |<span class="hljs-type">| op</span> == ODCLTYPE &amp;&amp; n.<span class="hljs-keyword">Left</span>.Name.Param.Alias &#123;<br>xtop[i] = typecheck(n, ctxStmt)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step3: 对函数体进行类型检查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Phase 3: Type check function bodies.</span><br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;typecheck&quot;</span>, <span class="hljs-string">&quot;func&quot;</span>)<br><span class="hljs-keyword">var</span> fcount <span class="hljs-keyword">int64</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> op := n.Op; op == ODCLFUNC || op == OCLOSURE &#123;<br>Curfn = n<br>decldepth = <span class="hljs-number">1</span><br>saveerrors()<br>typecheckslice(Curfn.Nbody.Slice(), ctxStmt)<br>checkreturn(Curfn)<br><span class="hljs-keyword">if</span> nerrors != <span class="hljs-number">0</span> &#123;<br>Curfn.Nbody.Set(<span class="hljs-literal">nil</span>) <span class="hljs-comment">// type errors; do not compile</span><br>&#125;<br><span class="hljs-comment">// Now that we&#x27;ve checked whether n terminates,</span><br><span class="hljs-comment">// we can eliminate some obviously dead code.</span><br>deadcode(Curfn)<br>fcount++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step4: 决定如何捕获变量（需在逃逸分析前进行）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Phase 4: Decide how to capture closed variables.</span><br>timings<span class="hljs-selector-class">.Start</span>(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;capturevars&quot;</span>)<br><span class="hljs-keyword">for</span> _, n := range xtop &#123;<br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == ODCLFUNC &amp;&amp; n<span class="hljs-selector-class">.Func</span><span class="hljs-selector-class">.Closure</span> != nil &#123;<br>Curfn = n<br>capturevars(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step5: 检查内联函数的类型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Phase <span class="hljs-number">5</span>: Inlining<br>timings.Start(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;inlining&quot;</span>)<br><span class="hljs-keyword">if</span> Debug_typecheckinl != <span class="hljs-number">0</span> &#123;<br><span class="hljs-regexp">//</span> Typecheck imported <span class="hljs-keyword">function</span> bodies <span class="hljs-keyword">if</span> debug[<span class="hljs-string">&#x27;l&#x27;</span>] &gt; <span class="hljs-number">1</span>,<br><span class="hljs-regexp">//</span> otherwise lazily when used or re-exported.<br><span class="hljs-keyword">for</span> _, n := range importlist &#123;<br><span class="hljs-keyword">if</span> n.Func.Inl != nil &#123;<br>saveerrors()<br>typecheckinl(n)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> nsavederrors+nerrors != <span class="hljs-number">0</span> &#123;<br>errorexit()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step6: <strong>逃逸分析</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Phase 6: Escape analysis.</span><br>timings<span class="hljs-selector-class">.Start</span>(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;escapes&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">escapes</span><span class="hljs-params">(xtop)</span></span><br></code></pre></td></tr></table></figure><p>Step7: 处理闭包函数体，将其转换为对捕获变量的引用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Phase 7: Transform closure bodies to properly reference captured variables.</span><br>timings<span class="hljs-selector-class">.Start</span>(<span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-string">&quot;xclosures&quot;</span>)<br><span class="hljs-keyword">for</span> _, n := range xtop &#123;<br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == ODCLFUNC &amp;&amp; n<span class="hljs-selector-class">.Func</span><span class="hljs-selector-class">.Closure</span> != nil &#123;<br>Curfn = n<br>transformclosure(n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step8: 编译顶层函数，生成中间码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Phase 8: Compile top level functions.</span><br>timings.Start(<span class="hljs-string">&quot;be&quot;</span>, <span class="hljs-string">&quot;compilefuncs&quot;</span>)<br>fcount = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xtop); i++ &#123;<br>n := xtop[i]<br><span class="hljs-keyword">if</span> n.Op == ODCLFUNC &#123;<br>funccompile(n)<br>fcount++<br>&#125;<br>&#125;<br>timings.AddEvent(fcount, <span class="hljs-string">&quot;funcs&quot;</span>)<br><br><span class="hljs-keyword">if</span> nsavederrors+nerrors == <span class="hljs-number">0</span> &#123;<br>fninit(xtop)<br>&#125;<br><br><span class="hljs-comment">// </span><br>compileFunctions()<br></code></pre></td></tr></table></figure><p>Step9: 检查外部依赖的声明</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Phase 9: Check external declarations.</span><br>timings<span class="hljs-selector-class">.Start</span>(<span class="hljs-string">&quot;be&quot;</span>, <span class="hljs-string">&quot;externaldcls&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span>, n := range externdcl &#123;<br><span class="hljs-keyword">if</span> n<span class="hljs-selector-class">.Op</span> == ONAME &#123;<br>externdcl<span class="hljs-selector-attr">[i]</span> = typecheck(externdcl<span class="hljs-selector-attr">[i]</span>, ctxExpr)<br>&#125;<br>&#125;<br><span class="hljs-comment">// Check the map keys again, since we typechecked the external</span><br><span class="hljs-comment">// declarations.</span><br><span class="hljs-function"><span class="hljs-title">checkMapKeys</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>在 Main() 最后，将编译生成的文件通过 dumpdata()、dumpobj() 输出到磁盘对应的目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Write object data to disk.</span><br>timings<span class="hljs-selector-class">.Start</span>(<span class="hljs-string">&quot;be&quot;</span>, <span class="hljs-string">&quot;dumpobj&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">dumpdata</span><span class="hljs-params">()</span></span><br>Ctxt<span class="hljs-selector-class">.NumberSyms</span>(false)<br><span class="hljs-function"><span class="hljs-title">dumpobj</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">if</span> asmhdr != <span class="hljs-string">&quot;&quot;</span> &#123;<br>dumpasmhdr()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.1 源码编译 &amp; 安装</title>
    <link href="/2021/12/30/1-1-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91-%E5%AE%89%E8%A3%85/"/>
    <url>/2021/12/30/1-1-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91-%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2><span id="1-准备工作">1. 准备工作</span></h2><p>Go 1.5 及以后的版本实现了 bootstrapping（自举），在编译 Go 1.5 以上版本时，首先应安装/编译 Go 1.4</p><h3><span id="11-bootstrapping">1.1 bootstrapping</span></h3><p>程序语言编译器使用自身的语言特性来编译自己，Go 1.5 支持了 通过 基于 Golang 实现的编译器来编译自己</p><p>Go, Rust 等都实现了 bootstrapping</p><h3><span id="12-centos-76-编译-golang-源码">1.2 CentOS 7.6 编译 Golang 源码</span></h3><p>Win10 编译 Go1.4 需要借助 MinGW，不如 Linux 下的 GCC 来的直接。  </p><p>首先需要配置 CentOS-Base 源 以及 /etc/resolv.conf 中的 nameserver 解析，然后安装 gcc：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> gcc<br></code></pre></td></tr></table></figure><p>下载 Go 1.4 源码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd /root<br>mkdir -p <span class="hljs-regexp">/root/g</span>o1.<span class="hljs-number">4</span>/<br><br>cd <span class="hljs-regexp">/root/g</span>o1.<span class="hljs-number">4</span><br><br><span class="hljs-comment"># 通过 wget 获取</span><br>wget https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/golang/g</span>o1.<span class="hljs-number">4</span>-bootstrap-<span class="hljs-number">20170531</span>.tar.gz<br><br><span class="hljs-comment"># 解压到当前目录</span><br>tar zxvf go1.<span class="hljs-number">4</span>-bootstrap-<span class="hljs-number">20170531</span>.tar.gz<br><br><span class="hljs-comment"># 切换到 /root/go1.4/go/src 目录下</span><br>cd <span class="hljs-regexp">/root/g</span>o1.<span class="hljs-number">4</span><span class="hljs-regexp">/go/</span>src<br><br><span class="hljs-comment"># 执行编译</span><br>./all.bash<br></code></pre></td></tr></table></figure><p>编译完成后，生成的二进制文件位于：**/root/go1.4/go/bin**, 通过执行以下命令检查版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># version check</span><br><span class="hljs-regexp">/root/g</span>o1.<span class="hljs-number">4</span><span class="hljs-regexp">/go/</span>bin/go version<br><br><span class="hljs-comment">### 输出信息 </span><br>go version go1.<span class="hljs-number">4</span>-bootstrap-<span class="hljs-number">20170531</span> linux/amd64<br></code></pre></td></tr></table></figure><h3><span id="13-通过-go-14-编译-go-15-及以上版本">1.3 通过 Go 1.4 编译 Go 1.5 及以上版本</span></h3><p>用 1.2 中编译好的 Go 1.4 编译 Go 1.17.4</p><p>首先通过 wget 获取到 go 1.17.4 源码包，并进行解压操作：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> -<span class="hljs-keyword">p</span> /root/<span class="hljs-keyword">go</span>-<span class="hljs-keyword">source</span>-code/ &amp;&amp; <span class="hljs-keyword">cd</span> /root/<span class="hljs-keyword">go</span>-<span class="hljs-keyword">source</span>-code/<br><br>wget http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">dl</span>.google.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">go</span>/go1.<span class="hljs-number">17.4</span>.src.tar.gz<br><br>tar zxvf <span class="hljs-keyword">go</span>-<span class="hljs-keyword">source</span>-code/<br></code></pre></td></tr></table></figure><p>通过 Go 1.14 编译 Go 1.17.4</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 设定 GOROOT_BOOTSTRAP 自举版本</span><br>export GOROOT_BOOTSTRAP=<span class="hljs-regexp">/root/g</span>o1.<span class="hljs-number">4</span>/go<br><br>cd <span class="hljs-regexp">/root/g</span>o-source-code<span class="hljs-regexp">/go/</span>src<br><br><span class="hljs-comment"># compile</span><br>./all.bash<br></code></pre></td></tr></table></figure><p>编译完成后的输出：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">##### ../misc/cgo/errors<br>PASS<br><br>##### ../misc/cgo/testsigfwd<br>ok      testsigfwd<br><br>##### ../test/bench/go1<br><br>##### ../test<br><br>##### API check<br>Go version is <span class="hljs-string">&quot;go1.17.4&quot;</span>, ignoring -next /root/go-source-<span class="hljs-keyword">code</span>/go/api/next.txt<br><br>ALL TESTS PASSED<br>---<br>Installed Go for linux/amd64 <span class="hljs-keyword">in</span> /root/go-source-<span class="hljs-keyword">code</span>/go<br>Installed commands <span class="hljs-keyword">in</span> /root/go-source-<span class="hljs-keyword">code</span>/go/bin<br>*** You need to add /root/go-source-<span class="hljs-keyword">code</span>/go/bin to your PATH.<br></code></pre></td></tr></table></figure><p>将编译后的 Go 1.17.4 加入到环境变量：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># go 1.17.4 config</span><br>export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/root/go-source-code/go/bin</span><br><br><span class="hljs-comment"># Go env sertting</span><br>export GOROOT=<span class="hljs-regexp">/root/go</span>-source-code/go<br>export GOPATH=<span class="hljs-regexp">/root/go</span>Code<br>export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$GOROOT</span>/<span class="hljs-symbol">bin:</span><span class="hljs-variable">$GOPATH</span>/bin<br><br><span class="hljs-comment"># 生效</span><br>source /etc/profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>读书笔记</category>
      
      <category>《Go语言设计与实现》</category>
      
    </categories>
    
    
    <tags>
      
      <tag>《Go语言设计与实现》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitMQ-Operator</title>
    <link href="/2021/12/30/rabbitMQ-Operator/"/>
    <url>/2021/12/30/rabbitMQ-Operator/</url>
    
    <content type="html"><![CDATA[<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/rabbitmq/cluster-operator">https://github.com/rabbitmq/cluster-operator</a></p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://www.rabbitmq.com/kubernetes/operator/using-operator.html">https://www.rabbitmq.com/kubernetes/operator/using-operator.html</a></p><h2 id="Introducation"><a href="#Introducation" class="headerlink" title="Introducation"></a>Introducation</h2><p>在 k8s 中部署高可用 rabbitmq 集群，包含文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">operator</span>.yml: 官方提供的 <span class="hljs-keyword">operator</span><br>rabbitmq.yaml: rbmq 集群配置<br></code></pre></td></tr></table></figure><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>实际上是将 rbmq 集群托管给 operator，很多集群或者有依赖的应用都采用了这种方式，如：iomesh,harbor等。</p><p>operator 能够保证在异常情况下（集群主机下电）服务的可用性</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f cluster-operator.yml<br>kubectl <span class="hljs-built_in">apply</span> -f rabbitmq.yaml<br></code></pre></td></tr></table></figure><h2 id="cluster-operator-yml"><a href="#cluster-operator-yml" class="headerlink" title="cluster-operator.yml"></a>cluster-operator.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br><span class="line">2917</span><br><span class="line">2918</span><br><span class="line">2919</span><br><span class="line">2920</span><br><span class="line">2921</span><br><span class="line">2922</span><br><span class="line">2923</span><br><span class="line">2924</span><br><span class="line">2925</span><br><span class="line">2926</span><br><span class="line">2927</span><br><span class="line">2928</span><br><span class="line">2929</span><br><span class="line">2930</span><br><span class="line">2931</span><br><span class="line">2932</span><br><span class="line">2933</span><br><span class="line">2934</span><br><span class="line">2935</span><br><span class="line">2936</span><br><span class="line">2937</span><br><span class="line">2938</span><br><span class="line">2939</span><br><span class="line">2940</span><br><span class="line">2941</span><br><span class="line">2942</span><br><span class="line">2943</span><br><span class="line">2944</span><br><span class="line">2945</span><br><span class="line">2946</span><br><span class="line">2947</span><br><span class="line">2948</span><br><span class="line">2949</span><br><span class="line">2950</span><br><span class="line">2951</span><br><span class="line">2952</span><br><span class="line">2953</span><br><span class="line">2954</span><br><span class="line">2955</span><br><span class="line">2956</span><br><span class="line">2957</span><br><span class="line">2958</span><br><span class="line">2959</span><br><span class="line">2960</span><br><span class="line">2961</span><br><span class="line">2962</span><br><span class="line">2963</span><br><span class="line">2964</span><br><span class="line">2965</span><br><span class="line">2966</span><br><span class="line">2967</span><br><span class="line">2968</span><br><span class="line">2969</span><br><span class="line">2970</span><br><span class="line">2971</span><br><span class="line">2972</span><br><span class="line">2973</span><br><span class="line">2974</span><br><span class="line">2975</span><br><span class="line">2976</span><br><span class="line">2977</span><br><span class="line">2978</span><br><span class="line">2979</span><br><span class="line">2980</span><br><span class="line">2981</span><br><span class="line">2982</span><br><span class="line">2983</span><br><span class="line">2984</span><br><span class="line">2985</span><br><span class="line">2986</span><br><span class="line">2987</span><br><span class="line">2988</span><br><span class="line">2989</span><br><span class="line">2990</span><br><span class="line">2991</span><br><span class="line">2992</span><br><span class="line">2993</span><br><span class="line">2994</span><br><span class="line">2995</span><br><span class="line">2996</span><br><span class="line">2997</span><br><span class="line">2998</span><br><span class="line">2999</span><br><span class="line">3000</span><br><span class="line">3001</span><br><span class="line">3002</span><br><span class="line">3003</span><br><span class="line">3004</span><br><span class="line">3005</span><br><span class="line">3006</span><br><span class="line">3007</span><br><span class="line">3008</span><br><span class="line">3009</span><br><span class="line">3010</span><br><span class="line">3011</span><br><span class="line">3012</span><br><span class="line">3013</span><br><span class="line">3014</span><br><span class="line">3015</span><br><span class="line">3016</span><br><span class="line">3017</span><br><span class="line">3018</span><br><span class="line">3019</span><br><span class="line">3020</span><br><span class="line">3021</span><br><span class="line">3022</span><br><span class="line">3023</span><br><span class="line">3024</span><br><span class="line">3025</span><br><span class="line">3026</span><br><span class="line">3027</span><br><span class="line">3028</span><br><span class="line">3029</span><br><span class="line">3030</span><br><span class="line">3031</span><br><span class="line">3032</span><br><span class="line">3033</span><br><span class="line">3034</span><br><span class="line">3035</span><br><span class="line">3036</span><br><span class="line">3037</span><br><span class="line">3038</span><br><span class="line">3039</span><br><span class="line">3040</span><br><span class="line">3041</span><br><span class="line">3042</span><br><span class="line">3043</span><br><span class="line">3044</span><br><span class="line">3045</span><br><span class="line">3046</span><br><span class="line">3047</span><br><span class="line">3048</span><br><span class="line">3049</span><br><span class="line">3050</span><br><span class="line">3051</span><br><span class="line">3052</span><br><span class="line">3053</span><br><span class="line">3054</span><br><span class="line">3055</span><br><span class="line">3056</span><br><span class="line">3057</span><br><span class="line">3058</span><br><span class="line">3059</span><br><span class="line">3060</span><br><span class="line">3061</span><br><span class="line">3062</span><br><span class="line">3063</span><br><span class="line">3064</span><br><span class="line">3065</span><br><span class="line">3066</span><br><span class="line">3067</span><br><span class="line">3068</span><br><span class="line">3069</span><br><span class="line">3070</span><br><span class="line">3071</span><br><span class="line">3072</span><br><span class="line">3073</span><br><span class="line">3074</span><br><span class="line">3075</span><br><span class="line">3076</span><br><span class="line">3077</span><br><span class="line">3078</span><br><span class="line">3079</span><br><span class="line">3080</span><br><span class="line">3081</span><br><span class="line">3082</span><br><span class="line">3083</span><br><span class="line">3084</span><br><span class="line">3085</span><br><span class="line">3086</span><br><span class="line">3087</span><br><span class="line">3088</span><br><span class="line">3089</span><br><span class="line">3090</span><br><span class="line">3091</span><br><span class="line">3092</span><br><span class="line">3093</span><br><span class="line">3094</span><br><span class="line">3095</span><br><span class="line">3096</span><br><span class="line">3097</span><br><span class="line">3098</span><br><span class="line">3099</span><br><span class="line">3100</span><br><span class="line">3101</span><br><span class="line">3102</span><br><span class="line">3103</span><br><span class="line">3104</span><br><span class="line">3105</span><br><span class="line">3106</span><br><span class="line">3107</span><br><span class="line">3108</span><br><span class="line">3109</span><br><span class="line">3110</span><br><span class="line">3111</span><br><span class="line">3112</span><br><span class="line">3113</span><br><span class="line">3114</span><br><span class="line">3115</span><br><span class="line">3116</span><br><span class="line">3117</span><br><span class="line">3118</span><br><span class="line">3119</span><br><span class="line">3120</span><br><span class="line">3121</span><br><span class="line">3122</span><br><span class="line">3123</span><br><span class="line">3124</span><br><span class="line">3125</span><br><span class="line">3126</span><br><span class="line">3127</span><br><span class="line">3128</span><br><span class="line">3129</span><br><span class="line">3130</span><br><span class="line">3131</span><br><span class="line">3132</span><br><span class="line">3133</span><br><span class="line">3134</span><br><span class="line">3135</span><br><span class="line">3136</span><br><span class="line">3137</span><br><span class="line">3138</span><br><span class="line">3139</span><br><span class="line">3140</span><br><span class="line">3141</span><br><span class="line">3142</span><br><span class="line">3143</span><br><span class="line">3144</span><br><span class="line">3145</span><br><span class="line">3146</span><br><span class="line">3147</span><br><span class="line">3148</span><br><span class="line">3149</span><br><span class="line">3150</span><br><span class="line">3151</span><br><span class="line">3152</span><br><span class="line">3153</span><br><span class="line">3154</span><br><span class="line">3155</span><br><span class="line">3156</span><br><span class="line">3157</span><br><span class="line">3158</span><br><span class="line">3159</span><br><span class="line">3160</span><br><span class="line">3161</span><br><span class="line">3162</span><br><span class="line">3163</span><br><span class="line">3164</span><br><span class="line">3165</span><br><span class="line">3166</span><br><span class="line">3167</span><br><span class="line">3168</span><br><span class="line">3169</span><br><span class="line">3170</span><br><span class="line">3171</span><br><span class="line">3172</span><br><span class="line">3173</span><br><span class="line">3174</span><br><span class="line">3175</span><br><span class="line">3176</span><br><span class="line">3177</span><br><span class="line">3178</span><br><span class="line">3179</span><br><span class="line">3180</span><br><span class="line">3181</span><br><span class="line">3182</span><br><span class="line">3183</span><br><span class="line">3184</span><br><span class="line">3185</span><br><span class="line">3186</span><br><span class="line">3187</span><br><span class="line">3188</span><br><span class="line">3189</span><br><span class="line">3190</span><br><span class="line">3191</span><br><span class="line">3192</span><br><span class="line">3193</span><br><span class="line">3194</span><br><span class="line">3195</span><br><span class="line">3196</span><br><span class="line">3197</span><br><span class="line">3198</span><br><span class="line">3199</span><br><span class="line">3200</span><br><span class="line">3201</span><br><span class="line">3202</span><br><span class="line">3203</span><br><span class="line">3204</span><br><span class="line">3205</span><br><span class="line">3206</span><br><span class="line">3207</span><br><span class="line">3208</span><br><span class="line">3209</span><br><span class="line">3210</span><br><span class="line">3211</span><br><span class="line">3212</span><br><span class="line">3213</span><br><span class="line">3214</span><br><span class="line">3215</span><br><span class="line">3216</span><br><span class="line">3217</span><br><span class="line">3218</span><br><span class="line">3219</span><br><span class="line">3220</span><br><span class="line">3221</span><br><span class="line">3222</span><br><span class="line">3223</span><br><span class="line">3224</span><br><span class="line">3225</span><br><span class="line">3226</span><br><span class="line">3227</span><br><span class="line">3228</span><br><span class="line">3229</span><br><span class="line">3230</span><br><span class="line">3231</span><br><span class="line">3232</span><br><span class="line">3233</span><br><span class="line">3234</span><br><span class="line">3235</span><br><span class="line">3236</span><br><span class="line">3237</span><br><span class="line">3238</span><br><span class="line">3239</span><br><span class="line">3240</span><br><span class="line">3241</span><br><span class="line">3242</span><br><span class="line">3243</span><br><span class="line">3244</span><br><span class="line">3245</span><br><span class="line">3246</span><br><span class="line">3247</span><br><span class="line">3248</span><br><span class="line">3249</span><br><span class="line">3250</span><br><span class="line">3251</span><br><span class="line">3252</span><br><span class="line">3253</span><br><span class="line">3254</span><br><span class="line">3255</span><br><span class="line">3256</span><br><span class="line">3257</span><br><span class="line">3258</span><br><span class="line">3259</span><br><span class="line">3260</span><br><span class="line">3261</span><br><span class="line">3262</span><br><span class="line">3263</span><br><span class="line">3264</span><br><span class="line">3265</span><br><span class="line">3266</span><br><span class="line">3267</span><br><span class="line">3268</span><br><span class="line">3269</span><br><span class="line">3270</span><br><span class="line">3271</span><br><span class="line">3272</span><br><span class="line">3273</span><br><span class="line">3274</span><br><span class="line">3275</span><br><span class="line">3276</span><br><span class="line">3277</span><br><span class="line">3278</span><br><span class="line">3279</span><br><span class="line">3280</span><br><span class="line">3281</span><br><span class="line">3282</span><br><span class="line">3283</span><br><span class="line">3284</span><br><span class="line">3285</span><br><span class="line">3286</span><br><span class="line">3287</span><br><span class="line">3288</span><br><span class="line">3289</span><br><span class="line">3290</span><br><span class="line">3291</span><br><span class="line">3292</span><br><span class="line">3293</span><br><span class="line">3294</span><br><span class="line">3295</span><br><span class="line">3296</span><br><span class="line">3297</span><br><span class="line">3298</span><br><span class="line">3299</span><br><span class="line">3300</span><br><span class="line">3301</span><br><span class="line">3302</span><br><span class="line">3303</span><br><span class="line">3304</span><br><span class="line">3305</span><br><span class="line">3306</span><br><span class="line">3307</span><br><span class="line">3308</span><br><span class="line">3309</span><br><span class="line">3310</span><br><span class="line">3311</span><br><span class="line">3312</span><br><span class="line">3313</span><br><span class="line">3314</span><br><span class="line">3315</span><br><span class="line">3316</span><br><span class="line">3317</span><br><span class="line">3318</span><br><span class="line">3319</span><br><span class="line">3320</span><br><span class="line">3321</span><br><span class="line">3322</span><br><span class="line">3323</span><br><span class="line">3324</span><br><span class="line">3325</span><br><span class="line">3326</span><br><span class="line">3327</span><br><span class="line">3328</span><br><span class="line">3329</span><br><span class="line">3330</span><br><span class="line">3331</span><br><span class="line">3332</span><br><span class="line">3333</span><br><span class="line">3334</span><br><span class="line">3335</span><br><span class="line">3336</span><br><span class="line">3337</span><br><span class="line">3338</span><br><span class="line">3339</span><br><span class="line">3340</span><br><span class="line">3341</span><br><span class="line">3342</span><br><span class="line">3343</span><br><span class="line">3344</span><br><span class="line">3345</span><br><span class="line">3346</span><br><span class="line">3347</span><br><span class="line">3348</span><br><span class="line">3349</span><br><span class="line">3350</span><br><span class="line">3351</span><br><span class="line">3352</span><br><span class="line">3353</span><br><span class="line">3354</span><br><span class="line">3355</span><br><span class="line">3356</span><br><span class="line">3357</span><br><span class="line">3358</span><br><span class="line">3359</span><br><span class="line">3360</span><br><span class="line">3361</span><br><span class="line">3362</span><br><span class="line">3363</span><br><span class="line">3364</span><br><span class="line">3365</span><br><span class="line">3366</span><br><span class="line">3367</span><br><span class="line">3368</span><br><span class="line">3369</span><br><span class="line">3370</span><br><span class="line">3371</span><br><span class="line">3372</span><br><span class="line">3373</span><br><span class="line">3374</span><br><span class="line">3375</span><br><span class="line">3376</span><br><span class="line">3377</span><br><span class="line">3378</span><br><span class="line">3379</span><br><span class="line">3380</span><br><span class="line">3381</span><br><span class="line">3382</span><br><span class="line">3383</span><br><span class="line">3384</span><br><span class="line">3385</span><br><span class="line">3386</span><br><span class="line">3387</span><br><span class="line">3388</span><br><span class="line">3389</span><br><span class="line">3390</span><br><span class="line">3391</span><br><span class="line">3392</span><br><span class="line">3393</span><br><span class="line">3394</span><br><span class="line">3395</span><br><span class="line">3396</span><br><span class="line">3397</span><br><span class="line">3398</span><br><span class="line">3399</span><br><span class="line">3400</span><br><span class="line">3401</span><br><span class="line">3402</span><br><span class="line">3403</span><br><span class="line">3404</span><br><span class="line">3405</span><br><span class="line">3406</span><br><span class="line">3407</span><br><span class="line">3408</span><br><span class="line">3409</span><br><span class="line">3410</span><br><span class="line">3411</span><br><span class="line">3412</span><br><span class="line">3413</span><br><span class="line">3414</span><br><span class="line">3415</span><br><span class="line">3416</span><br><span class="line">3417</span><br><span class="line">3418</span><br><span class="line">3419</span><br><span class="line">3420</span><br><span class="line">3421</span><br><span class="line">3422</span><br><span class="line">3423</span><br><span class="line">3424</span><br><span class="line">3425</span><br><span class="line">3426</span><br><span class="line">3427</span><br><span class="line">3428</span><br><span class="line">3429</span><br><span class="line">3430</span><br><span class="line">3431</span><br><span class="line">3432</span><br><span class="line">3433</span><br><span class="line">3434</span><br><span class="line">3435</span><br><span class="line">3436</span><br><span class="line">3437</span><br><span class="line">3438</span><br><span class="line">3439</span><br><span class="line">3440</span><br><span class="line">3441</span><br><span class="line">3442</span><br><span class="line">3443</span><br><span class="line">3444</span><br><span class="line">3445</span><br><span class="line">3446</span><br><span class="line">3447</span><br><span class="line">3448</span><br><span class="line">3449</span><br><span class="line">3450</span><br><span class="line">3451</span><br><span class="line">3452</span><br><span class="line">3453</span><br><span class="line">3454</span><br><span class="line">3455</span><br><span class="line">3456</span><br><span class="line">3457</span><br><span class="line">3458</span><br><span class="line">3459</span><br><span class="line">3460</span><br><span class="line">3461</span><br><span class="line">3462</span><br><span class="line">3463</span><br><span class="line">3464</span><br><span class="line">3465</span><br><span class="line">3466</span><br><span class="line">3467</span><br><span class="line">3468</span><br><span class="line">3469</span><br><span class="line">3470</span><br><span class="line">3471</span><br><span class="line">3472</span><br><span class="line">3473</span><br><span class="line">3474</span><br><span class="line">3475</span><br><span class="line">3476</span><br><span class="line">3477</span><br><span class="line">3478</span><br><span class="line">3479</span><br><span class="line">3480</span><br><span class="line">3481</span><br><span class="line">3482</span><br><span class="line">3483</span><br><span class="line">3484</span><br><span class="line">3485</span><br><span class="line">3486</span><br><span class="line">3487</span><br><span class="line">3488</span><br><span class="line">3489</span><br><span class="line">3490</span><br><span class="line">3491</span><br><span class="line">3492</span><br><span class="line">3493</span><br><span class="line">3494</span><br><span class="line">3495</span><br><span class="line">3496</span><br><span class="line">3497</span><br><span class="line">3498</span><br><span class="line">3499</span><br><span class="line">3500</span><br><span class="line">3501</span><br><span class="line">3502</span><br><span class="line">3503</span><br><span class="line">3504</span><br><span class="line">3505</span><br><span class="line">3506</span><br><span class="line">3507</span><br><span class="line">3508</span><br><span class="line">3509</span><br><span class="line">3510</span><br><span class="line">3511</span><br><span class="line">3512</span><br><span class="line">3513</span><br><span class="line">3514</span><br><span class="line">3515</span><br><span class="line">3516</span><br><span class="line">3517</span><br><span class="line">3518</span><br><span class="line">3519</span><br><span class="line">3520</span><br><span class="line">3521</span><br><span class="line">3522</span><br><span class="line">3523</span><br><span class="line">3524</span><br><span class="line">3525</span><br><span class="line">3526</span><br><span class="line">3527</span><br><span class="line">3528</span><br><span class="line">3529</span><br><span class="line">3530</span><br><span class="line">3531</span><br><span class="line">3532</span><br><span class="line">3533</span><br><span class="line">3534</span><br><span class="line">3535</span><br><span class="line">3536</span><br><span class="line">3537</span><br><span class="line">3538</span><br><span class="line">3539</span><br><span class="line">3540</span><br><span class="line">3541</span><br><span class="line">3542</span><br><span class="line">3543</span><br><span class="line">3544</span><br><span class="line">3545</span><br><span class="line">3546</span><br><span class="line">3547</span><br><span class="line">3548</span><br><span class="line">3549</span><br><span class="line">3550</span><br><span class="line">3551</span><br><span class="line">3552</span><br><span class="line">3553</span><br><span class="line">3554</span><br><span class="line">3555</span><br><span class="line">3556</span><br><span class="line">3557</span><br><span class="line">3558</span><br><span class="line">3559</span><br><span class="line">3560</span><br><span class="line">3561</span><br><span class="line">3562</span><br><span class="line">3563</span><br><span class="line">3564</span><br><span class="line">3565</span><br><span class="line">3566</span><br><span class="line">3567</span><br><span class="line">3568</span><br><span class="line">3569</span><br><span class="line">3570</span><br><span class="line">3571</span><br><span class="line">3572</span><br><span class="line">3573</span><br><span class="line">3574</span><br><span class="line">3575</span><br><span class="line">3576</span><br><span class="line">3577</span><br><span class="line">3578</span><br><span class="line">3579</span><br><span class="line">3580</span><br><span class="line">3581</span><br><span class="line">3582</span><br><span class="line">3583</span><br><span class="line">3584</span><br><span class="line">3585</span><br><span class="line">3586</span><br><span class="line">3587</span><br><span class="line">3588</span><br><span class="line">3589</span><br><span class="line">3590</span><br><span class="line">3591</span><br><span class="line">3592</span><br><span class="line">3593</span><br><span class="line">3594</span><br><span class="line">3595</span><br><span class="line">3596</span><br><span class="line">3597</span><br><span class="line">3598</span><br><span class="line">3599</span><br><span class="line">3600</span><br><span class="line">3601</span><br><span class="line">3602</span><br><span class="line">3603</span><br><span class="line">3604</span><br><span class="line">3605</span><br><span class="line">3606</span><br><span class="line">3607</span><br><span class="line">3608</span><br><span class="line">3609</span><br><span class="line">3610</span><br><span class="line">3611</span><br><span class="line">3612</span><br><span class="line">3613</span><br><span class="line">3614</span><br><span class="line">3615</span><br><span class="line">3616</span><br><span class="line">3617</span><br><span class="line">3618</span><br><span class="line">3619</span><br><span class="line">3620</span><br><span class="line">3621</span><br><span class="line">3622</span><br><span class="line">3623</span><br><span class="line">3624</span><br><span class="line">3625</span><br><span class="line">3626</span><br><span class="line">3627</span><br><span class="line">3628</span><br><span class="line">3629</span><br><span class="line">3630</span><br><span class="line">3631</span><br><span class="line">3632</span><br><span class="line">3633</span><br><span class="line">3634</span><br><span class="line">3635</span><br><span class="line">3636</span><br><span class="line">3637</span><br><span class="line">3638</span><br><span class="line">3639</span><br><span class="line">3640</span><br><span class="line">3641</span><br><span class="line">3642</span><br><span class="line">3643</span><br><span class="line">3644</span><br><span class="line">3645</span><br><span class="line">3646</span><br><span class="line">3647</span><br><span class="line">3648</span><br><span class="line">3649</span><br><span class="line">3650</span><br><span class="line">3651</span><br><span class="line">3652</span><br><span class="line">3653</span><br><span class="line">3654</span><br><span class="line">3655</span><br><span class="line">3656</span><br><span class="line">3657</span><br><span class="line">3658</span><br><span class="line">3659</span><br><span class="line">3660</span><br><span class="line">3661</span><br><span class="line">3662</span><br><span class="line">3663</span><br><span class="line">3664</span><br><span class="line">3665</span><br><span class="line">3666</span><br><span class="line">3667</span><br><span class="line">3668</span><br><span class="line">3669</span><br><span class="line">3670</span><br><span class="line">3671</span><br><span class="line">3672</span><br><span class="line">3673</span><br><span class="line">3674</span><br><span class="line">3675</span><br><span class="line">3676</span><br><span class="line">3677</span><br><span class="line">3678</span><br><span class="line">3679</span><br><span class="line">3680</span><br><span class="line">3681</span><br><span class="line">3682</span><br><span class="line">3683</span><br><span class="line">3684</span><br><span class="line">3685</span><br><span class="line">3686</span><br><span class="line">3687</span><br><span class="line">3688</span><br><span class="line">3689</span><br><span class="line">3690</span><br><span class="line">3691</span><br><span class="line">3692</span><br><span class="line">3693</span><br><span class="line">3694</span><br><span class="line">3695</span><br><span class="line">3696</span><br><span class="line">3697</span><br><span class="line">3698</span><br><span class="line">3699</span><br><span class="line">3700</span><br><span class="line">3701</span><br><span class="line">3702</span><br><span class="line">3703</span><br><span class="line">3704</span><br><span class="line">3705</span><br><span class="line">3706</span><br><span class="line">3707</span><br><span class="line">3708</span><br><span class="line">3709</span><br><span class="line">3710</span><br><span class="line">3711</span><br><span class="line">3712</span><br><span class="line">3713</span><br><span class="line">3714</span><br><span class="line">3715</span><br><span class="line">3716</span><br><span class="line">3717</span><br><span class="line">3718</span><br><span class="line">3719</span><br><span class="line">3720</span><br><span class="line">3721</span><br><span class="line">3722</span><br><span class="line">3723</span><br><span class="line">3724</span><br><span class="line">3725</span><br><span class="line">3726</span><br><span class="line">3727</span><br><span class="line">3728</span><br><span class="line">3729</span><br><span class="line">3730</span><br><span class="line">3731</span><br><span class="line">3732</span><br><span class="line">3733</span><br><span class="line">3734</span><br><span class="line">3735</span><br><span class="line">3736</span><br><span class="line">3737</span><br><span class="line">3738</span><br><span class="line">3739</span><br><span class="line">3740</span><br><span class="line">3741</span><br><span class="line">3742</span><br><span class="line">3743</span><br><span class="line">3744</span><br><span class="line">3745</span><br><span class="line">3746</span><br><span class="line">3747</span><br><span class="line">3748</span><br><span class="line">3749</span><br><span class="line">3750</span><br><span class="line">3751</span><br><span class="line">3752</span><br><span class="line">3753</span><br><span class="line">3754</span><br><span class="line">3755</span><br><span class="line">3756</span><br><span class="line">3757</span><br><span class="line">3758</span><br><span class="line">3759</span><br><span class="line">3760</span><br><span class="line">3761</span><br><span class="line">3762</span><br><span class="line">3763</span><br><span class="line">3764</span><br><span class="line">3765</span><br><span class="line">3766</span><br><span class="line">3767</span><br><span class="line">3768</span><br><span class="line">3769</span><br><span class="line">3770</span><br><span class="line">3771</span><br><span class="line">3772</span><br><span class="line">3773</span><br><span class="line">3774</span><br><span class="line">3775</span><br><span class="line">3776</span><br><span class="line">3777</span><br><span class="line">3778</span><br><span class="line">3779</span><br><span class="line">3780</span><br><span class="line">3781</span><br><span class="line">3782</span><br><span class="line">3783</span><br><span class="line">3784</span><br><span class="line">3785</span><br><span class="line">3786</span><br><span class="line">3787</span><br><span class="line">3788</span><br><span class="line">3789</span><br><span class="line">3790</span><br><span class="line">3791</span><br><span class="line">3792</span><br><span class="line">3793</span><br><span class="line">3794</span><br><span class="line">3795</span><br><span class="line">3796</span><br><span class="line">3797</span><br><span class="line">3798</span><br><span class="line">3799</span><br><span class="line">3800</span><br><span class="line">3801</span><br><span class="line">3802</span><br><span class="line">3803</span><br><span class="line">3804</span><br><span class="line">3805</span><br><span class="line">3806</span><br><span class="line">3807</span><br><span class="line">3808</span><br><span class="line">3809</span><br><span class="line">3810</span><br><span class="line">3811</span><br><span class="line">3812</span><br><span class="line">3813</span><br><span class="line">3814</span><br><span class="line">3815</span><br><span class="line">3816</span><br><span class="line">3817</span><br><span class="line">3818</span><br><span class="line">3819</span><br><span class="line">3820</span><br><span class="line">3821</span><br><span class="line">3822</span><br><span class="line">3823</span><br><span class="line">3824</span><br><span class="line">3825</span><br><span class="line">3826</span><br><span class="line">3827</span><br><span class="line">3828</span><br><span class="line">3829</span><br><span class="line">3830</span><br><span class="line">3831</span><br><span class="line">3832</span><br><span class="line">3833</span><br><span class="line">3834</span><br><span class="line">3835</span><br><span class="line">3836</span><br><span class="line">3837</span><br><span class="line">3838</span><br><span class="line">3839</span><br><span class="line">3840</span><br><span class="line">3841</span><br><span class="line">3842</span><br><span class="line">3843</span><br><span class="line">3844</span><br><span class="line">3845</span><br><span class="line">3846</span><br><span class="line">3847</span><br><span class="line">3848</span><br><span class="line">3849</span><br><span class="line">3850</span><br><span class="line">3851</span><br><span class="line">3852</span><br><span class="line">3853</span><br><span class="line">3854</span><br><span class="line">3855</span><br><span class="line">3856</span><br><span class="line">3857</span><br><span class="line">3858</span><br><span class="line">3859</span><br><span class="line">3860</span><br><span class="line">3861</span><br><span class="line">3862</span><br><span class="line">3863</span><br><span class="line">3864</span><br><span class="line">3865</span><br><span class="line">3866</span><br><span class="line">3867</span><br><span class="line">3868</span><br><span class="line">3869</span><br><span class="line">3870</span><br><span class="line">3871</span><br><span class="line">3872</span><br><span class="line">3873</span><br><span class="line">3874</span><br><span class="line">3875</span><br><span class="line">3876</span><br><span class="line">3877</span><br><span class="line">3878</span><br><span class="line">3879</span><br><span class="line">3880</span><br><span class="line">3881</span><br><span class="line">3882</span><br><span class="line">3883</span><br><span class="line">3884</span><br><span class="line">3885</span><br><span class="line">3886</span><br><span class="line">3887</span><br><span class="line">3888</span><br><span class="line">3889</span><br><span class="line">3890</span><br><span class="line">3891</span><br><span class="line">3892</span><br><span class="line">3893</span><br><span class="line">3894</span><br><span class="line">3895</span><br><span class="line">3896</span><br><span class="line">3897</span><br><span class="line">3898</span><br><span class="line">3899</span><br><span class="line">3900</span><br><span class="line">3901</span><br><span class="line">3902</span><br><span class="line">3903</span><br><span class="line">3904</span><br><span class="line">3905</span><br><span class="line">3906</span><br><span class="line">3907</span><br><span class="line">3908</span><br><span class="line">3909</span><br><span class="line">3910</span><br><span class="line">3911</span><br><span class="line">3912</span><br><span class="line">3913</span><br><span class="line">3914</span><br><span class="line">3915</span><br><span class="line">3916</span><br><span class="line">3917</span><br><span class="line">3918</span><br><span class="line">3919</span><br><span class="line">3920</span><br><span class="line">3921</span><br><span class="line">3922</span><br><span class="line">3923</span><br><span class="line">3924</span><br><span class="line">3925</span><br><span class="line">3926</span><br><span class="line">3927</span><br><span class="line">3928</span><br><span class="line">3929</span><br><span class="line">3930</span><br><span class="line">3931</span><br><span class="line">3932</span><br><span class="line">3933</span><br><span class="line">3934</span><br><span class="line">3935</span><br><span class="line">3936</span><br><span class="line">3937</span><br><span class="line">3938</span><br><span class="line">3939</span><br><span class="line">3940</span><br><span class="line">3941</span><br><span class="line">3942</span><br><span class="line">3943</span><br><span class="line">3944</span><br><span class="line">3945</span><br><span class="line">3946</span><br><span class="line">3947</span><br><span class="line">3948</span><br><span class="line">3949</span><br><span class="line">3950</span><br><span class="line">3951</span><br><span class="line">3952</span><br><span class="line">3953</span><br><span class="line">3954</span><br><span class="line">3955</span><br><span class="line">3956</span><br><span class="line">3957</span><br><span class="line">3958</span><br><span class="line">3959</span><br><span class="line">3960</span><br><span class="line">3961</span><br><span class="line">3962</span><br><span class="line">3963</span><br><span class="line">3964</span><br><span class="line">3965</span><br><span class="line">3966</span><br><span class="line">3967</span><br><span class="line">3968</span><br><span class="line">3969</span><br><span class="line">3970</span><br><span class="line">3971</span><br><span class="line">3972</span><br><span class="line">3973</span><br><span class="line">3974</span><br><span class="line">3975</span><br><span class="line">3976</span><br><span class="line">3977</span><br><span class="line">3978</span><br><span class="line">3979</span><br><span class="line">3980</span><br><span class="line">3981</span><br><span class="line">3982</span><br><span class="line">3983</span><br><span class="line">3984</span><br><span class="line">3985</span><br><span class="line">3986</span><br><span class="line">3987</span><br><span class="line">3988</span><br><span class="line">3989</span><br><span class="line">3990</span><br><span class="line">3991</span><br><span class="line">3992</span><br><span class="line">3993</span><br><span class="line">3994</span><br><span class="line">3995</span><br><span class="line">3996</span><br><span class="line">3997</span><br><span class="line">3998</span><br><span class="line">3999</span><br><span class="line">4000</span><br><span class="line">4001</span><br><span class="line">4002</span><br><span class="line">4003</span><br><span class="line">4004</span><br><span class="line">4005</span><br><span class="line">4006</span><br><span class="line">4007</span><br><span class="line">4008</span><br><span class="line">4009</span><br><span class="line">4010</span><br><span class="line">4011</span><br><span class="line">4012</span><br><span class="line">4013</span><br><span class="line">4014</span><br><span class="line">4015</span><br><span class="line">4016</span><br><span class="line">4017</span><br><span class="line">4018</span><br><span class="line">4019</span><br><span class="line">4020</span><br><span class="line">4021</span><br><span class="line">4022</span><br><span class="line">4023</span><br><span class="line">4024</span><br><span class="line">4025</span><br><span class="line">4026</span><br><span class="line">4027</span><br><span class="line">4028</span><br><span class="line">4029</span><br><span class="line">4030</span><br><span class="line">4031</span><br><span class="line">4032</span><br><span class="line">4033</span><br><span class="line">4034</span><br><span class="line">4035</span><br><span class="line">4036</span><br><span class="line">4037</span><br><span class="line">4038</span><br><span class="line">4039</span><br><span class="line">4040</span><br><span class="line">4041</span><br><span class="line">4042</span><br><span class="line">4043</span><br><span class="line">4044</span><br><span class="line">4045</span><br><span class="line">4046</span><br><span class="line">4047</span><br><span class="line">4048</span><br><span class="line">4049</span><br><span class="line">4050</span><br><span class="line">4051</span><br><span class="line">4052</span><br><span class="line">4053</span><br><span class="line">4054</span><br><span class="line">4055</span><br><span class="line">4056</span><br><span class="line">4057</span><br><span class="line">4058</span><br><span class="line">4059</span><br><span class="line">4060</span><br><span class="line">4061</span><br><span class="line">4062</span><br><span class="line">4063</span><br><span class="line">4064</span><br><span class="line">4065</span><br><span class="line">4066</span><br><span class="line">4067</span><br><span class="line">4068</span><br><span class="line">4069</span><br><span class="line">4070</span><br><span class="line">4071</span><br><span class="line">4072</span><br><span class="line">4073</span><br><span class="line">4074</span><br><span class="line">4075</span><br><span class="line">4076</span><br><span class="line">4077</span><br><span class="line">4078</span><br><span class="line">4079</span><br><span class="line">4080</span><br><span class="line">4081</span><br><span class="line">4082</span><br><span class="line">4083</span><br><span class="line">4084</span><br><span class="line">4085</span><br><span class="line">4086</span><br><span class="line">4087</span><br><span class="line">4088</span><br><span class="line">4089</span><br><span class="line">4090</span><br><span class="line">4091</span><br><span class="line">4092</span><br><span class="line">4093</span><br><span class="line">4094</span><br><span class="line">4095</span><br><span class="line">4096</span><br><span class="line">4097</span><br><span class="line">4098</span><br><span class="line">4099</span><br><span class="line">4100</span><br><span class="line">4101</span><br><span class="line">4102</span><br><span class="line">4103</span><br><span class="line">4104</span><br><span class="line">4105</span><br><span class="line">4106</span><br><span class="line">4107</span><br><span class="line">4108</span><br><span class="line">4109</span><br><span class="line">4110</span><br><span class="line">4111</span><br><span class="line">4112</span><br><span class="line">4113</span><br><span class="line">4114</span><br><span class="line">4115</span><br><span class="line">4116</span><br><span class="line">4117</span><br><span class="line">4118</span><br><span class="line">4119</span><br><span class="line">4120</span><br><span class="line">4121</span><br><span class="line">4122</span><br><span class="line">4123</span><br><span class="line">4124</span><br><span class="line">4125</span><br><span class="line">4126</span><br><span class="line">4127</span><br><span class="line">4128</span><br><span class="line">4129</span><br><span class="line">4130</span><br><span class="line">4131</span><br><span class="line">4132</span><br><span class="line">4133</span><br><span class="line">4134</span><br><span class="line">4135</span><br><span class="line">4136</span><br><span class="line">4137</span><br><span class="line">4138</span><br><span class="line">4139</span><br><span class="line">4140</span><br><span class="line">4141</span><br><span class="line">4142</span><br><span class="line">4143</span><br><span class="line">4144</span><br><span class="line">4145</span><br><span class="line">4146</span><br><span class="line">4147</span><br><span class="line">4148</span><br><span class="line">4149</span><br><span class="line">4150</span><br><span class="line">4151</span><br><span class="line">4152</span><br><span class="line">4153</span><br><span class="line">4154</span><br><span class="line">4155</span><br><span class="line">4156</span><br><span class="line">4157</span><br><span class="line">4158</span><br><span class="line">4159</span><br><span class="line">4160</span><br><span class="line">4161</span><br><span class="line">4162</span><br><span class="line">4163</span><br><span class="line">4164</span><br><span class="line">4165</span><br><span class="line">4166</span><br><span class="line">4167</span><br><span class="line">4168</span><br><span class="line">4169</span><br><span class="line">4170</span><br><span class="line">4171</span><br><span class="line">4172</span><br><span class="line">4173</span><br><span class="line">4174</span><br><span class="line">4175</span><br><span class="line">4176</span><br><span class="line">4177</span><br><span class="line">4178</span><br><span class="line">4179</span><br><span class="line">4180</span><br><span class="line">4181</span><br><span class="line">4182</span><br><span class="line">4183</span><br><span class="line">4184</span><br><span class="line">4185</span><br><span class="line">4186</span><br><span class="line">4187</span><br><span class="line">4188</span><br><span class="line">4189</span><br><span class="line">4190</span><br><span class="line">4191</span><br><span class="line">4192</span><br><span class="line">4193</span><br><span class="line">4194</span><br><span class="line">4195</span><br><span class="line">4196</span><br><span class="line">4197</span><br><span class="line">4198</span><br><span class="line">4199</span><br><span class="line">4200</span><br><span class="line">4201</span><br><span class="line">4202</span><br><span class="line">4203</span><br><span class="line">4204</span><br><span class="line">4205</span><br><span class="line">4206</span><br><span class="line">4207</span><br><span class="line">4208</span><br><span class="line">4209</span><br><span class="line">4210</span><br><span class="line">4211</span><br><span class="line">4212</span><br><span class="line">4213</span><br><span class="line">4214</span><br><span class="line">4215</span><br><span class="line">4216</span><br><span class="line">4217</span><br><span class="line">4218</span><br><span class="line">4219</span><br><span class="line">4220</span><br><span class="line">4221</span><br><span class="line">4222</span><br><span class="line">4223</span><br><span class="line">4224</span><br><span class="line">4225</span><br><span class="line">4226</span><br><span class="line">4227</span><br><span class="line">4228</span><br><span class="line">4229</span><br><span class="line">4230</span><br><span class="line">4231</span><br><span class="line">4232</span><br><span class="line">4233</span><br><span class="line">4234</span><br><span class="line">4235</span><br><span class="line">4236</span><br><span class="line">4237</span><br><span class="line">4238</span><br><span class="line">4239</span><br><span class="line">4240</span><br><span class="line">4241</span><br><span class="line">4242</span><br><span class="line">4243</span><br><span class="line">4244</span><br><span class="line">4245</span><br><span class="line">4246</span><br><span class="line">4247</span><br><span class="line">4248</span><br><span class="line">4249</span><br><span class="line">4250</span><br><span class="line">4251</span><br><span class="line">4252</span><br><span class="line">4253</span><br><span class="line">4254</span><br><span class="line">4255</span><br><span class="line">4256</span><br><span class="line">4257</span><br><span class="line">4258</span><br><span class="line">4259</span><br><span class="line">4260</span><br><span class="line">4261</span><br><span class="line">4262</span><br><span class="line">4263</span><br><span class="line">4264</span><br><span class="line">4265</span><br><span class="line">4266</span><br><span class="line">4267</span><br><span class="line">4268</span><br><span class="line">4269</span><br><span class="line">4270</span><br><span class="line">4271</span><br><span class="line">4272</span><br><span class="line">4273</span><br><span class="line">4274</span><br><span class="line">4275</span><br><span class="line">4276</span><br><span class="line">4277</span><br><span class="line">4278</span><br><span class="line">4279</span><br><span class="line">4280</span><br><span class="line">4281</span><br><span class="line">4282</span><br><span class="line">4283</span><br><span class="line">4284</span><br><span class="line">4285</span><br><span class="line">4286</span><br><span class="line">4287</span><br><span class="line">4288</span><br><span class="line">4289</span><br><span class="line">4290</span><br><span class="line">4291</span><br><span class="line">4292</span><br><span class="line">4293</span><br><span class="line">4294</span><br><span class="line">4295</span><br><span class="line">4296</span><br><span class="line">4297</span><br><span class="line">4298</span><br><span class="line">4299</span><br><span class="line">4300</span><br><span class="line">4301</span><br><span class="line">4302</span><br><span class="line">4303</span><br><span class="line">4304</span><br><span class="line">4305</span><br><span class="line">4306</span><br><span class="line">4307</span><br><span class="line">4308</span><br><span class="line">4309</span><br><span class="line">4310</span><br><span class="line">4311</span><br><span class="line">4312</span><br><span class="line">4313</span><br><span class="line">4314</span><br><span class="line">4315</span><br><span class="line">4316</span><br><span class="line">4317</span><br><span class="line">4318</span><br><span class="line">4319</span><br><span class="line">4320</span><br><span class="line">4321</span><br><span class="line">4322</span><br><span class="line">4323</span><br><span class="line">4324</span><br><span class="line">4325</span><br><span class="line">4326</span><br><span class="line">4327</span><br><span class="line">4328</span><br><span class="line">4329</span><br><span class="line">4330</span><br><span class="line">4331</span><br><span class="line">4332</span><br><span class="line">4333</span><br><span class="line">4334</span><br><span class="line">4335</span><br><span class="line">4336</span><br><span class="line">4337</span><br><span class="line">4338</span><br><span class="line">4339</span><br><span class="line">4340</span><br><span class="line">4341</span><br><span class="line">4342</span><br><span class="line">4343</span><br><span class="line">4344</span><br><span class="line">4345</span><br><span class="line">4346</span><br><span class="line">4347</span><br><span class="line">4348</span><br><span class="line">4349</span><br><span class="line">4350</span><br><span class="line">4351</span><br><span class="line">4352</span><br><span class="line">4353</span><br><span class="line">4354</span><br><span class="line">4355</span><br><span class="line">4356</span><br><span class="line">4357</span><br><span class="line">4358</span><br><span class="line">4359</span><br><span class="line">4360</span><br><span class="line">4361</span><br><span class="line">4362</span><br><span class="line">4363</span><br><span class="line">4364</span><br><span class="line">4365</span><br><span class="line">4366</span><br><span class="line">4367</span><br><span class="line">4368</span><br><span class="line">4369</span><br><span class="line">4370</span><br><span class="line">4371</span><br><span class="line">4372</span><br><span class="line">4373</span><br><span class="line">4374</span><br><span class="line">4375</span><br><span class="line">4376</span><br><span class="line">4377</span><br><span class="line">4378</span><br><span class="line">4379</span><br><span class="line">4380</span><br><span class="line">4381</span><br><span class="line">4382</span><br><span class="line">4383</span><br><span class="line">4384</span><br><span class="line">4385</span><br><span class="line">4386</span><br><span class="line">4387</span><br><span class="line">4388</span><br><span class="line">4389</span><br><span class="line">4390</span><br><span class="line">4391</span><br><span class="line">4392</span><br><span class="line">4393</span><br><span class="line">4394</span><br><span class="line">4395</span><br><span class="line">4396</span><br><span class="line">4397</span><br><span class="line">4398</span><br><span class="line">4399</span><br><span class="line">4400</span><br><span class="line">4401</span><br><span class="line">4402</span><br><span class="line">4403</span><br><span class="line">4404</span><br><span class="line">4405</span><br><span class="line">4406</span><br><span class="line">4407</span><br><span class="line">4408</span><br><span class="line">4409</span><br><span class="line">4410</span><br><span class="line">4411</span><br><span class="line">4412</span><br><span class="line">4413</span><br><span class="line">4414</span><br><span class="line">4415</span><br><span class="line">4416</span><br><span class="line">4417</span><br><span class="line">4418</span><br><span class="line">4419</span><br><span class="line">4420</span><br><span class="line">4421</span><br><span class="line">4422</span><br><span class="line">4423</span><br><span class="line">4424</span><br><span class="line">4425</span><br><span class="line">4426</span><br><span class="line">4427</span><br><span class="line">4428</span><br><span class="line">4429</span><br><span class="line">4430</span><br><span class="line">4431</span><br><span class="line">4432</span><br><span class="line">4433</span><br><span class="line">4434</span><br><span class="line">4435</span><br><span class="line">4436</span><br><span class="line">4437</span><br><span class="line">4438</span><br><span class="line">4439</span><br><span class="line">4440</span><br><span class="line">4441</span><br><span class="line">4442</span><br><span class="line">4443</span><br><span class="line">4444</span><br><span class="line">4445</span><br><span class="line">4446</span><br><span class="line">4447</span><br><span class="line">4448</span><br><span class="line">4449</span><br><span class="line">4450</span><br><span class="line">4451</span><br><span class="line">4452</span><br><span class="line">4453</span><br><span class="line">4454</span><br><span class="line">4455</span><br><span class="line">4456</span><br><span class="line">4457</span><br><span class="line">4458</span><br><span class="line">4459</span><br><span class="line">4460</span><br><span class="line">4461</span><br><span class="line">4462</span><br><span class="line">4463</span><br><span class="line">4464</span><br><span class="line">4465</span><br><span class="line">4466</span><br><span class="line">4467</span><br><span class="line">4468</span><br><span class="line">4469</span><br><span class="line">4470</span><br><span class="line">4471</span><br><span class="line">4472</span><br><span class="line">4473</span><br><span class="line">4474</span><br><span class="line">4475</span><br><span class="line">4476</span><br><span class="line">4477</span><br><span class="line">4478</span><br><span class="line">4479</span><br><span class="line">4480</span><br><span class="line">4481</span><br><span class="line">4482</span><br><span class="line">4483</span><br><span class="line">4484</span><br><span class="line">4485</span><br><span class="line">4486</span><br><span class="line">4487</span><br><span class="line">4488</span><br><span class="line">4489</span><br><span class="line">4490</span><br><span class="line">4491</span><br><span class="line">4492</span><br><span class="line">4493</span><br><span class="line">4494</span><br><span class="line">4495</span><br><span class="line">4496</span><br><span class="line">4497</span><br><span class="line">4498</span><br><span class="line">4499</span><br><span class="line">4500</span><br><span class="line">4501</span><br><span class="line">4502</span><br><span class="line">4503</span><br><span class="line">4504</span><br><span class="line">4505</span><br><span class="line">4506</span><br><span class="line">4507</span><br><span class="line">4508</span><br><span class="line">4509</span><br><span class="line">4510</span><br><span class="line">4511</span><br><span class="line">4512</span><br><span class="line">4513</span><br><span class="line">4514</span><br><span class="line">4515</span><br><span class="line">4516</span><br><span class="line">4517</span><br><span class="line">4518</span><br><span class="line">4519</span><br><span class="line">4520</span><br><span class="line">4521</span><br><span class="line">4522</span><br><span class="line">4523</span><br><span class="line">4524</span><br><span class="line">4525</span><br><span class="line">4526</span><br><span class="line">4527</span><br><span class="line">4528</span><br><span class="line">4529</span><br><span class="line">4530</span><br><span class="line">4531</span><br><span class="line">4532</span><br><span class="line">4533</span><br><span class="line">4534</span><br><span class="line">4535</span><br><span class="line">4536</span><br><span class="line">4537</span><br><span class="line">4538</span><br><span class="line">4539</span><br><span class="line">4540</span><br><span class="line">4541</span><br><span class="line">4542</span><br><span class="line">4543</span><br><span class="line">4544</span><br><span class="line">4545</span><br><span class="line">4546</span><br><span class="line">4547</span><br><span class="line">4548</span><br><span class="line">4549</span><br><span class="line">4550</span><br><span class="line">4551</span><br><span class="line">4552</span><br><span class="line">4553</span><br><span class="line">4554</span><br><span class="line">4555</span><br><span class="line">4556</span><br><span class="line">4557</span><br><span class="line">4558</span><br><span class="line">4559</span><br><span class="line">4560</span><br><span class="line">4561</span><br><span class="line">4562</span><br><span class="line">4563</span><br><span class="line">4564</span><br><span class="line">4565</span><br><span class="line">4566</span><br><span class="line">4567</span><br><span class="line">4568</span><br><span class="line">4569</span><br><span class="line">4570</span><br><span class="line">4571</span><br><span class="line">4572</span><br><span class="line">4573</span><br><span class="line">4574</span><br><span class="line">4575</span><br><span class="line">4576</span><br><span class="line">4577</span><br><span class="line">4578</span><br><span class="line">4579</span><br><span class="line">4580</span><br><span class="line">4581</span><br><span class="line">4582</span><br><span class="line">4583</span><br><span class="line">4584</span><br><span class="line">4585</span><br><span class="line">4586</span><br><span class="line">4587</span><br><span class="line">4588</span><br><span class="line">4589</span><br><span class="line">4590</span><br><span class="line">4591</span><br><span class="line">4592</span><br><span class="line">4593</span><br><span class="line">4594</span><br><span class="line">4595</span><br><span class="line">4596</span><br><span class="line">4597</span><br><span class="line">4598</span><br><span class="line">4599</span><br><span class="line">4600</span><br><span class="line">4601</span><br><span class="line">4602</span><br><span class="line">4603</span><br><span class="line">4604</span><br><span class="line">4605</span><br><span class="line">4606</span><br><span class="line">4607</span><br><span class="line">4608</span><br><span class="line">4609</span><br><span class="line">4610</span><br><span class="line">4611</span><br><span class="line">4612</span><br><span class="line">4613</span><br><span class="line">4614</span><br><span class="line">4615</span><br><span class="line">4616</span><br><span class="line">4617</span><br><span class="line">4618</span><br><span class="line">4619</span><br><span class="line">4620</span><br><span class="line">4621</span><br><span class="line">4622</span><br><span class="line">4623</span><br><span class="line">4624</span><br><span class="line">4625</span><br><span class="line">4626</span><br><span class="line">4627</span><br><span class="line">4628</span><br><span class="line">4629</span><br><span class="line">4630</span><br><span class="line">4631</span><br><span class="line">4632</span><br><span class="line">4633</span><br><span class="line">4634</span><br><span class="line">4635</span><br><span class="line">4636</span><br><span class="line">4637</span><br><span class="line">4638</span><br><span class="line">4639</span><br><span class="line">4640</span><br><span class="line">4641</span><br><span class="line">4642</span><br><span class="line">4643</span><br><span class="line">4644</span><br><span class="line">4645</span><br><span class="line">4646</span><br><span class="line">4647</span><br><span class="line">4648</span><br><span class="line">4649</span><br><span class="line">4650</span><br><span class="line">4651</span><br><span class="line">4652</span><br><span class="line">4653</span><br><span class="line">4654</span><br><span class="line">4655</span><br><span class="line">4656</span><br><span class="line">4657</span><br><span class="line">4658</span><br><span class="line">4659</span><br><span class="line">4660</span><br><span class="line">4661</span><br><span class="line">4662</span><br><span class="line">4663</span><br><span class="line">4664</span><br><span class="line">4665</span><br><span class="line">4666</span><br><span class="line">4667</span><br><span class="line">4668</span><br><span class="line">4669</span><br><span class="line">4670</span><br><span class="line">4671</span><br><span class="line">4672</span><br><span class="line">4673</span><br><span class="line">4674</span><br><span class="line">4675</span><br><span class="line">4676</span><br><span class="line">4677</span><br><span class="line">4678</span><br><span class="line">4679</span><br><span class="line">4680</span><br><span class="line">4681</span><br><span class="line">4682</span><br><span class="line">4683</span><br><span class="line">4684</span><br><span class="line">4685</span><br><span class="line">4686</span><br><span class="line">4687</span><br><span class="line">4688</span><br><span class="line">4689</span><br><span class="line">4690</span><br><span class="line">4691</span><br><span class="line">4692</span><br><span class="line">4693</span><br><span class="line">4694</span><br><span class="line">4695</span><br><span class="line">4696</span><br><span class="line">4697</span><br><span class="line">4698</span><br><span class="line">4699</span><br><span class="line">4700</span><br><span class="line">4701</span><br><span class="line">4702</span><br><span class="line">4703</span><br><span class="line">4704</span><br><span class="line">4705</span><br><span class="line">4706</span><br><span class="line">4707</span><br><span class="line">4708</span><br><span class="line">4709</span><br><span class="line">4710</span><br><span class="line">4711</span><br><span class="line">4712</span><br><span class="line">4713</span><br><span class="line">4714</span><br><span class="line">4715</span><br><span class="line">4716</span><br><span class="line">4717</span><br><span class="line">4718</span><br><span class="line">4719</span><br><span class="line">4720</span><br><span class="line">4721</span><br><span class="line">4722</span><br><span class="line">4723</span><br><span class="line">4724</span><br><span class="line">4725</span><br><span class="line">4726</span><br><span class="line">4727</span><br><span class="line">4728</span><br><span class="line">4729</span><br><span class="line">4730</span><br><span class="line">4731</span><br><span class="line">4732</span><br><span class="line">4733</span><br><span class="line">4734</span><br><span class="line">4735</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-system</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiextensions.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CustomResourceDefinition</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">controller-gen.kubebuilder.io/version:</span> <span class="hljs-string">v0.6.2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmqclusters.rabbitmq.com</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">rabbitmq.com</span><br>  <span class="hljs-attr">names:</span><br>    <span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">all</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">RabbitmqCluster</span><br>    <span class="hljs-attr">listKind:</span> <span class="hljs-string">RabbitmqClusterList</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">rabbitmqclusters</span><br>    <span class="hljs-attr">shortNames:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rmq</span><br>    <span class="hljs-attr">singular:</span> <span class="hljs-string">rabbitmqcluster</span><br>  <span class="hljs-attr">scope:</span> <span class="hljs-string">Namespaced</span><br>  <span class="hljs-attr">versions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">additionalPrinterColumns:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">jsonPath:</span> <span class="hljs-string">.status.conditions[?(@.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;AllReplicasReady&#x27;</span><span class="hljs-string">)].status</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">AllReplicasReady</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">jsonPath:</span> <span class="hljs-string">.status.conditions[?(@.type</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;ReconcileSuccess&#x27;</span><span class="hljs-string">)].status</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">ReconcileSuccess</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">jsonPath:</span> <span class="hljs-string">.metadata.creationTimestamp</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">Age</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">date</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">v1beta1</span><br>    <span class="hljs-attr">schema:</span><br>      <span class="hljs-attr">openAPIV3Schema:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">Schema</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">API.</span> <span class="hljs-string">Each</span><br>          <span class="hljs-string">instance</span> <span class="hljs-string">of</span> <span class="hljs-string">this</span> <span class="hljs-string">object</span> <span class="hljs-string">corresponds</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">cluster.</span><br>        <span class="hljs-attr">properties:</span><br>          <span class="hljs-attr">apiVersion:</span><br>            <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;APIVersion defines the versioned schema of this representation</span><br><span class="hljs-string">              of an object. Servers should convert recognized schemas to the latest</span><br><span class="hljs-string">              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&#x27;</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">kind:</span><br>            <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Kind is a string value representing the REST resource this</span><br><span class="hljs-string">              object represents. Servers may infer this from the endpoint the client</span><br><span class="hljs-string">              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&#x27;</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">metadata:</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>          <span class="hljs-attr">spec:</span><br>            <span class="hljs-attr">description:</span> <span class="hljs-string">Spec</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">desired</span> <span class="hljs-string">state</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">Custom</span> <span class="hljs-string">Resource.</span><br>            <span class="hljs-attr">properties:</span><br>              <span class="hljs-attr">affinity:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Affinity</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">rules</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">applied</span> <span class="hljs-string">on</span> <span class="hljs-string">created</span> <span class="hljs-string">Pods.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">nodeAffinity:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Describes</span> <span class="hljs-string">node</span> <span class="hljs-string">affinity</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">rules</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span><br>                      <span class="hljs-string">pod.</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">scheduler</span> <span class="hljs-string">will</span> <span class="hljs-string">prefer</span> <span class="hljs-string">to</span> <span class="hljs-string">schedule</span> <span class="hljs-string">pods</span> <span class="hljs-string">to</span><br>                          <span class="hljs-string">nodes</span> <span class="hljs-string">that</span> <span class="hljs-string">satisfy</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">expressions</span> <span class="hljs-string">specified</span> <span class="hljs-string">by</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field,</span> <span class="hljs-string">but</span> <span class="hljs-string">it</span> <span class="hljs-string">may</span> <span class="hljs-string">choose</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">violates</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span><br>                          <span class="hljs-string">more</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">expressions.</span> <span class="hljs-string">The</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">is</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred</span><br>                          <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">one</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">greatest</span> <span class="hljs-string">sum</span> <span class="hljs-string">of</span> <span class="hljs-string">weights,</span> <span class="hljs-string">i.e.</span> <span class="hljs-string">for</span> <span class="hljs-string">each</span><br>                          <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">meets</span> <span class="hljs-string">all</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">requirements</span> <span class="hljs-string">(resource</span><br>                          <span class="hljs-string">request,</span> <span class="hljs-string">requiredDuringScheduling</span> <span class="hljs-string">affinity</span> <span class="hljs-string">expressions,</span><br>                          <span class="hljs-string">etc.),</span> <span class="hljs-string">compute</span> <span class="hljs-string">a</span> <span class="hljs-string">sum</span> <span class="hljs-string">by</span> <span class="hljs-string">iterating</span> <span class="hljs-string">through</span> <span class="hljs-string">the</span> <span class="hljs-string">elements</span> <span class="hljs-string">of</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">adding</span> <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">sum</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">node</span> <span class="hljs-string">matches</span><br>                          <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">matchExpressions;</span> <span class="hljs-string">the</span> <span class="hljs-string">node(s)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span><br>                          <span class="hljs-string">highest</span> <span class="hljs-string">sum</span> <span class="hljs-string">are</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred.</span><br>                        <span class="hljs-attr">items:</span><br>                          <span class="hljs-attr">description:</span> <span class="hljs-string">An</span> <span class="hljs-string">empty</span> <span class="hljs-string">preferred</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">term</span> <span class="hljs-string">matches</span><br>                            <span class="hljs-string">all</span> <span class="hljs-string">objects</span> <span class="hljs-string">with</span> <span class="hljs-string">implicit</span> <span class="hljs-string">weight</span> <span class="hljs-number">0</span> <span class="hljs-string">(i.e.</span> <span class="hljs-string">it&#x27;s</span> <span class="hljs-string">a</span> <span class="hljs-literal">no</span><span class="hljs-string">-op).</span><br>                            <span class="hljs-string">A</span> <span class="hljs-literal">null</span> <span class="hljs-string">preferred</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">term</span> <span class="hljs-string">matches</span> <span class="hljs-literal">no</span> <span class="hljs-string">objects</span> <span class="hljs-string">(i.e.</span><br>                            <span class="hljs-string">is</span> <span class="hljs-string">also</span> <span class="hljs-string">a</span> <span class="hljs-literal">no</span><span class="hljs-string">-op).</span><br>                          <span class="hljs-attr">properties:</span><br>                            <span class="hljs-attr">preference:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">term,</span> <span class="hljs-string">associated</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span><br>                                <span class="hljs-string">corresponding</span> <span class="hljs-string">weight.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirements</span><br>                                    <span class="hljs-string">by</span> <span class="hljs-string">node&#x27;s</span> <span class="hljs-string">labels.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">selector</span><br>                                          <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">Represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists,</span> <span class="hljs-string">DoesNotExist.</span> <span class="hljs-string">Gt,</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">Lt.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">An</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span> <span class="hljs-string">values.</span> <span class="hljs-string">If</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span><br>                                          <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Gt</span> <span class="hljs-string">or</span><br>                                          <span class="hljs-string">Lt,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span><br>                                          <span class="hljs-string">element,</span> <span class="hljs-string">which</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">interpreted</span> <span class="hljs-string">as</span> <span class="hljs-string">an</span><br>                                          <span class="hljs-string">integer.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span><br>                                          <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchFields:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirements</span><br>                                    <span class="hljs-string">by</span> <span class="hljs-string">node&#x27;s</span> <span class="hljs-string">fields.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">selector</span><br>                                          <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">Represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists,</span> <span class="hljs-string">DoesNotExist.</span> <span class="hljs-string">Gt,</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">Lt.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">An</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span> <span class="hljs-string">values.</span> <span class="hljs-string">If</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span><br>                                          <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Gt</span> <span class="hljs-string">or</span><br>                                          <span class="hljs-string">Lt,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span><br>                                          <span class="hljs-string">element,</span> <span class="hljs-string">which</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">interpreted</span> <span class="hljs-string">as</span> <span class="hljs-string">an</span><br>                                          <span class="hljs-string">integer.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span><br>                                          <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">weight:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">Weight</span> <span class="hljs-string">associated</span> <span class="hljs-string">with</span> <span class="hljs-string">matching</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span><br>                                <span class="hljs-string">nodeSelectorTerm,</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">range</span> <span class="hljs-number">1</span><span class="hljs-number">-100</span><span class="hljs-string">.</span><br>                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                          <span class="hljs-attr">required:</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">preference</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">requirements</span> <span class="hljs-string">specified</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span><br>                          <span class="hljs-string">field</span> <span class="hljs-string">are</span> <span class="hljs-string">not</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">time,</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">will</span> <span class="hljs-string">not</span> <span class="hljs-string">be</span><br>                          <span class="hljs-string">scheduled</span> <span class="hljs-string">onto</span> <span class="hljs-string">the</span> <span class="hljs-string">node.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">requirements</span> <span class="hljs-string">specified</span><br>                          <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">cease</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">some</span> <span class="hljs-string">point</span> <span class="hljs-string">during</span> <span class="hljs-string">pod</span> <span class="hljs-string">execution</span><br>                          <span class="hljs-string">(e.g.</span> <span class="hljs-string">due</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">update),</span> <span class="hljs-string">the</span> <span class="hljs-string">system</span> <span class="hljs-string">may</span> <span class="hljs-string">or</span> <span class="hljs-string">may</span> <span class="hljs-string">not</span> <span class="hljs-string">try</span> <span class="hljs-string">to</span><br>                          <span class="hljs-string">eventually</span> <span class="hljs-string">evict</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">from</span> <span class="hljs-string">its</span> <span class="hljs-string">node.</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">nodeSelectorTerms:</span><br>                            <span class="hljs-attr">description:</span> <span class="hljs-string">Required.</span> <span class="hljs-string">A</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">terms.</span><br>                              <span class="hljs-string">The</span> <span class="hljs-string">terms</span> <span class="hljs-string">are</span> <span class="hljs-string">ORed.</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">term</span> <span class="hljs-string">matches</span><br>                                <span class="hljs-literal">no</span> <span class="hljs-string">objects.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">of</span> <span class="hljs-string">them</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span> <span class="hljs-string">The</span><br>                                <span class="hljs-string">TopologySelectorTerm</span> <span class="hljs-string">type</span> <span class="hljs-string">implements</span> <span class="hljs-string">a</span> <span class="hljs-string">subset</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span><br>                                <span class="hljs-string">NodeSelectorTerm.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirements</span><br>                                    <span class="hljs-string">by</span> <span class="hljs-string">node&#x27;s</span> <span class="hljs-string">labels.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">selector</span><br>                                          <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">Represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists,</span> <span class="hljs-string">DoesNotExist.</span> <span class="hljs-string">Gt,</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">Lt.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">An</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span> <span class="hljs-string">values.</span> <span class="hljs-string">If</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span><br>                                          <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Gt</span> <span class="hljs-string">or</span><br>                                          <span class="hljs-string">Lt,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span><br>                                          <span class="hljs-string">element,</span> <span class="hljs-string">which</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">interpreted</span> <span class="hljs-string">as</span> <span class="hljs-string">an</span><br>                                          <span class="hljs-string">integer.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span><br>                                          <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchFields:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirements</span><br>                                    <span class="hljs-string">by</span> <span class="hljs-string">node&#x27;s</span> <span class="hljs-string">fields.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">node</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">selector</span><br>                                          <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">Represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists,</span> <span class="hljs-string">DoesNotExist.</span> <span class="hljs-string">Gt,</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">Lt.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">An</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span> <span class="hljs-string">values.</span> <span class="hljs-string">If</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span><br>                                          <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Gt</span> <span class="hljs-string">or</span><br>                                          <span class="hljs-string">Lt,</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span><br>                                          <span class="hljs-string">element,</span> <span class="hljs-string">which</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">interpreted</span> <span class="hljs-string">as</span> <span class="hljs-string">an</span><br>                                          <span class="hljs-string">integer.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span><br>                                          <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                        <span class="hljs-attr">required:</span><br>                        <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelectorTerms</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">podAffinity:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Describes</span> <span class="hljs-string">pod</span> <span class="hljs-string">affinity</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">rules</span> <span class="hljs-string">(e.g.</span> <span class="hljs-string">co-locate</span><br>                      <span class="hljs-string">this</span> <span class="hljs-string">pod</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">node,</span> <span class="hljs-string">zone,</span> <span class="hljs-string">etc.</span> <span class="hljs-string">as</span> <span class="hljs-string">some</span> <span class="hljs-string">other</span> <span class="hljs-string">pod(s)).</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">scheduler</span> <span class="hljs-string">will</span> <span class="hljs-string">prefer</span> <span class="hljs-string">to</span> <span class="hljs-string">schedule</span> <span class="hljs-string">pods</span> <span class="hljs-string">to</span><br>                          <span class="hljs-string">nodes</span> <span class="hljs-string">that</span> <span class="hljs-string">satisfy</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">expressions</span> <span class="hljs-string">specified</span> <span class="hljs-string">by</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field,</span> <span class="hljs-string">but</span> <span class="hljs-string">it</span> <span class="hljs-string">may</span> <span class="hljs-string">choose</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">violates</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span><br>                          <span class="hljs-string">more</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">expressions.</span> <span class="hljs-string">The</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">is</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred</span><br>                          <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">one</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">greatest</span> <span class="hljs-string">sum</span> <span class="hljs-string">of</span> <span class="hljs-string">weights,</span> <span class="hljs-string">i.e.</span> <span class="hljs-string">for</span> <span class="hljs-string">each</span><br>                          <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">meets</span> <span class="hljs-string">all</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">requirements</span> <span class="hljs-string">(resource</span><br>                          <span class="hljs-string">request,</span> <span class="hljs-string">requiredDuringScheduling</span> <span class="hljs-string">affinity</span> <span class="hljs-string">expressions,</span><br>                          <span class="hljs-string">etc.),</span> <span class="hljs-string">compute</span> <span class="hljs-string">a</span> <span class="hljs-string">sum</span> <span class="hljs-string">by</span> <span class="hljs-string">iterating</span> <span class="hljs-string">through</span> <span class="hljs-string">the</span> <span class="hljs-string">elements</span> <span class="hljs-string">of</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">adding</span> <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">sum</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">node</span> <span class="hljs-string">has</span><br>                          <span class="hljs-string">pods</span> <span class="hljs-string">which</span> <span class="hljs-string">matches</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">podAffinityTerm;</span> <span class="hljs-string">the</span><br>                          <span class="hljs-string">node(s)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">highest</span> <span class="hljs-string">sum</span> <span class="hljs-string">are</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred.</span><br>                        <span class="hljs-attr">items:</span><br>                          <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">weights</span> <span class="hljs-string">of</span> <span class="hljs-string">all</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">matched</span> <span class="hljs-string">WeightedPodAffinityTerm</span><br>                            <span class="hljs-string">fields</span> <span class="hljs-string">are</span> <span class="hljs-string">added</span> <span class="hljs-string">per-node</span> <span class="hljs-string">to</span> <span class="hljs-string">find</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred</span> <span class="hljs-string">node(s)</span><br>                          <span class="hljs-attr">properties:</span><br>                            <span class="hljs-attr">podAffinityTerm:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">Required.</span> <span class="hljs-string">A</span> <span class="hljs-string">pod</span> <span class="hljs-string">affinity</span> <span class="hljs-string">term,</span> <span class="hljs-string">associated</span><br>                                <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">weight.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">labelSelector:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">resources,</span><br>                                    <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">case</span> <span class="hljs-string">pods.</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">matchExpressions:</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                        <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span><br>                                        <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span><br>                                          <span class="hljs-string">and</span> <span class="hljs-string">an</span> <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">values.</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">key:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">operator:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span><br>                                              <span class="hljs-string">relationship</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span><br>                                              <span class="hljs-string">operators</span> <span class="hljs-string">are</span> <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span><br>                                              <span class="hljs-string">DoesNotExist.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">values:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span><br>                                              <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span><br>                                              <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span><br>                                              <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">required:</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">matchLabels:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                        <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                        <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                        <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span><br>                                        <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span><br>                                        <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">namespaceSelector:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">namespaces</span><br>                                    <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span><br>                                    <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span><br>                                    <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">field.</span><br>                                    <span class="hljs-literal">null</span> <span class="hljs-string">selector</span> <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">An</span> <span class="hljs-string">empty</span> <span class="hljs-string">selector</span><br>                                    <span class="hljs-string">(&#123;&#125;)</span> <span class="hljs-string">matches</span> <span class="hljs-string">all</span> <span class="hljs-string">namespaces.</span> <span class="hljs-string">This</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">alpha-level</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">only</span> <span class="hljs-string">honored</span> <span class="hljs-string">when</span> <span class="hljs-string">PodAffinityNamespaceSelector</span><br>                                    <span class="hljs-string">feature</span> <span class="hljs-string">is</span> <span class="hljs-string">enabled.</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">matchExpressions:</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                        <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span><br>                                        <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span><br>                                          <span class="hljs-string">and</span> <span class="hljs-string">an</span> <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">values.</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">key:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">operator:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span><br>                                              <span class="hljs-string">relationship</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span><br>                                              <span class="hljs-string">operators</span> <span class="hljs-string">are</span> <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span><br>                                              <span class="hljs-string">DoesNotExist.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">values:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span><br>                                              <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span><br>                                              <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span><br>                                              <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">required:</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">matchLabels:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                        <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                        <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                        <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span><br>                                        <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span><br>                                        <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">namespaces:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">specifies</span> <span class="hljs-string">a</span> <span class="hljs-string">static</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">of</span> <span class="hljs-string">namespace</span> <span class="hljs-string">names</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span><br>                                    <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span><br>                                    <span class="hljs-string">namespaceSelector.</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">namespaceSelector</span> <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">topologyKey:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span><br>                                    <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">pods</span><br>                                    <span class="hljs-string">matching</span> <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">specified</span> <span class="hljs-string">namespaces,</span><br>                                    <span class="hljs-string">where</span> <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">topologyKey</span><br>                                    <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span> <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">any</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">selected</span><br>                                    <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running.</span> <span class="hljs-string">Empty</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                              <span class="hljs-attr">required:</span><br>                              <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">weight:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">weight</span> <span class="hljs-string">associated</span> <span class="hljs-string">with</span> <span class="hljs-string">matching</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span><br>                                <span class="hljs-string">podAffinityTerm,</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">range</span> <span class="hljs-number">1</span><span class="hljs-number">-100</span><span class="hljs-string">.</span><br>                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                          <span class="hljs-attr">required:</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">podAffinityTerm</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">requirements</span> <span class="hljs-string">specified</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span><br>                          <span class="hljs-string">field</span> <span class="hljs-string">are</span> <span class="hljs-string">not</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">time,</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">will</span> <span class="hljs-string">not</span> <span class="hljs-string">be</span><br>                          <span class="hljs-string">scheduled</span> <span class="hljs-string">onto</span> <span class="hljs-string">the</span> <span class="hljs-string">node.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">affinity</span> <span class="hljs-string">requirements</span> <span class="hljs-string">specified</span><br>                          <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">cease</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">some</span> <span class="hljs-string">point</span> <span class="hljs-string">during</span> <span class="hljs-string">pod</span> <span class="hljs-string">execution</span><br>                          <span class="hljs-string">(e.g.</span> <span class="hljs-string">due</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span> <span class="hljs-string">label</span> <span class="hljs-string">update),</span> <span class="hljs-string">the</span> <span class="hljs-string">system</span> <span class="hljs-string">may</span> <span class="hljs-string">or</span> <span class="hljs-string">may</span><br>                          <span class="hljs-string">not</span> <span class="hljs-string">try</span> <span class="hljs-string">to</span> <span class="hljs-string">eventually</span> <span class="hljs-string">evict</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">from</span> <span class="hljs-string">its</span> <span class="hljs-string">node.</span> <span class="hljs-string">When</span><br>                          <span class="hljs-string">there</span> <span class="hljs-string">are</span> <span class="hljs-string">multiple</span> <span class="hljs-string">elements,</span> <span class="hljs-string">the</span> <span class="hljs-string">lists</span> <span class="hljs-string">of</span> <span class="hljs-string">nodes</span> <span class="hljs-string">corresponding</span><br>                          <span class="hljs-string">to</span> <span class="hljs-string">each</span> <span class="hljs-string">podAffinityTerm</span> <span class="hljs-string">are</span> <span class="hljs-string">intersected,</span> <span class="hljs-string">i.e.</span> <span class="hljs-string">all</span> <span class="hljs-string">terms</span><br>                          <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">satisfied.</span><br>                        <span class="hljs-attr">items:</span><br>                          <span class="hljs-attr">description:</span> <span class="hljs-string">Defines</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">pods</span> <span class="hljs-string">(namely</span> <span class="hljs-string">those</span> <span class="hljs-string">matching</span><br>                            <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">relative</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">given</span> <span class="hljs-string">namespace(s))</span><br>                            <span class="hljs-string">that</span> <span class="hljs-string">this</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span> <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span><br>                            <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with,</span> <span class="hljs-string">where</span> <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span><br>                            <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">whose</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">&lt;topologyKey&gt;</span><br>                            <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span> <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span><br>                            <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>                          <span class="hljs-attr">properties:</span><br>                            <span class="hljs-attr">labelSelector:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">resources,</span><br>                                <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">case</span> <span class="hljs-string">pods.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                    <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span> <span class="hljs-string">DoesNotExist.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span><br>                                          <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchLabels:</span><br>                                  <span class="hljs-attr">additionalProperties:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                    <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                    <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">namespaceSelector:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">namespaces</span><br>                                <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span><br>                                <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span><br>                                <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">field.</span> <span class="hljs-literal">null</span> <span class="hljs-string">selector</span><br>                                <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span> <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s</span><br><span class="hljs-string">                                namespace&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">An</span> <span class="hljs-string">empty</span> <span class="hljs-string">selector</span> <span class="hljs-string">(&#123;&#125;)</span> <span class="hljs-string">matches</span> <span class="hljs-string">all</span> <span class="hljs-string">namespaces.</span><br>                                <span class="hljs-string">This</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">alpha-level</span> <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">only</span> <span class="hljs-string">honored</span> <span class="hljs-string">when</span><br>                                <span class="hljs-string">PodAffinityNamespaceSelector</span> <span class="hljs-string">feature</span> <span class="hljs-string">is</span> <span class="hljs-string">enabled.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                    <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span> <span class="hljs-string">DoesNotExist.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span><br>                                          <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchLabels:</span><br>                                  <span class="hljs-attr">additionalProperties:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                    <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                    <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">namespaces:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">specifies</span> <span class="hljs-string">a</span> <span class="hljs-string">static</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">namespace</span><br>                                <span class="hljs-string">names</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span><br>                                <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span><br>                                <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">namespaceSelector.</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span><br>                                <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span> <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">namespaceSelector</span> <span class="hljs-string">means</span><br>                                <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><br>                              <span class="hljs-attr">items:</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                            <span class="hljs-attr">topologyKey:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span><br>                                <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">pods</span> <span class="hljs-string">matching</span><br>                                <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">specified</span> <span class="hljs-string">namespaces,</span> <span class="hljs-string">where</span><br>                                <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">whose</span> <span class="hljs-string">value</span><br>                                <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span><br>                                <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">any</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">selected</span> <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running.</span><br>                                <span class="hljs-string">Empty</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed.</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">required:</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">podAntiAffinity:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Describes</span> <span class="hljs-string">pod</span> <span class="hljs-string">anti-affinity</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">rules</span> <span class="hljs-string">(e.g.</span><br>                      <span class="hljs-string">avoid</span> <span class="hljs-string">putting</span> <span class="hljs-string">this</span> <span class="hljs-string">pod</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">node,</span> <span class="hljs-string">zone,</span> <span class="hljs-string">etc.</span> <span class="hljs-string">as</span> <span class="hljs-string">some</span><br>                      <span class="hljs-string">other</span> <span class="hljs-string">pod(s)).</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">scheduler</span> <span class="hljs-string">will</span> <span class="hljs-string">prefer</span> <span class="hljs-string">to</span> <span class="hljs-string">schedule</span> <span class="hljs-string">pods</span> <span class="hljs-string">to</span><br>                          <span class="hljs-string">nodes</span> <span class="hljs-string">that</span> <span class="hljs-string">satisfy</span> <span class="hljs-string">the</span> <span class="hljs-string">anti-affinity</span> <span class="hljs-string">expressions</span> <span class="hljs-string">specified</span><br>                          <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field,</span> <span class="hljs-string">but</span> <span class="hljs-string">it</span> <span class="hljs-string">may</span> <span class="hljs-string">choose</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">violates</span> <span class="hljs-string">one</span><br>                          <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">expressions.</span> <span class="hljs-string">The</span> <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">is</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred</span><br>                          <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">one</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">greatest</span> <span class="hljs-string">sum</span> <span class="hljs-string">of</span> <span class="hljs-string">weights,</span> <span class="hljs-string">i.e.</span> <span class="hljs-string">for</span> <span class="hljs-string">each</span><br>                          <span class="hljs-string">node</span> <span class="hljs-string">that</span> <span class="hljs-string">meets</span> <span class="hljs-string">all</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">requirements</span> <span class="hljs-string">(resource</span><br>                          <span class="hljs-string">request,</span> <span class="hljs-string">requiredDuringScheduling</span> <span class="hljs-string">anti-affinity</span> <span class="hljs-string">expressions,</span><br>                          <span class="hljs-string">etc.),</span> <span class="hljs-string">compute</span> <span class="hljs-string">a</span> <span class="hljs-string">sum</span> <span class="hljs-string">by</span> <span class="hljs-string">iterating</span> <span class="hljs-string">through</span> <span class="hljs-string">the</span> <span class="hljs-string">elements</span> <span class="hljs-string">of</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">adding</span> <span class="hljs-string">&quot;weight&quot;</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">sum</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">node</span> <span class="hljs-string">has</span><br>                          <span class="hljs-string">pods</span> <span class="hljs-string">which</span> <span class="hljs-string">matches</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">podAffinityTerm;</span> <span class="hljs-string">the</span><br>                          <span class="hljs-string">node(s)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">highest</span> <span class="hljs-string">sum</span> <span class="hljs-string">are</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred.</span><br>                        <span class="hljs-attr">items:</span><br>                          <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">weights</span> <span class="hljs-string">of</span> <span class="hljs-string">all</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">matched</span> <span class="hljs-string">WeightedPodAffinityTerm</span><br>                            <span class="hljs-string">fields</span> <span class="hljs-string">are</span> <span class="hljs-string">added</span> <span class="hljs-string">per-node</span> <span class="hljs-string">to</span> <span class="hljs-string">find</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">preferred</span> <span class="hljs-string">node(s)</span><br>                          <span class="hljs-attr">properties:</span><br>                            <span class="hljs-attr">podAffinityTerm:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">Required.</span> <span class="hljs-string">A</span> <span class="hljs-string">pod</span> <span class="hljs-string">affinity</span> <span class="hljs-string">term,</span> <span class="hljs-string">associated</span><br>                                <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">weight.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">labelSelector:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">resources,</span><br>                                    <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">case</span> <span class="hljs-string">pods.</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">matchExpressions:</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                        <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span><br>                                        <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span><br>                                          <span class="hljs-string">and</span> <span class="hljs-string">an</span> <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">values.</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">key:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">operator:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span><br>                                              <span class="hljs-string">relationship</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span><br>                                              <span class="hljs-string">operators</span> <span class="hljs-string">are</span> <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span><br>                                              <span class="hljs-string">DoesNotExist.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">values:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span><br>                                              <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span><br>                                              <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span><br>                                              <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">required:</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">matchLabels:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                        <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                        <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                        <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span><br>                                        <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span><br>                                        <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">namespaceSelector:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">namespaces</span><br>                                    <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span><br>                                    <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span><br>                                    <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">field.</span><br>                                    <span class="hljs-literal">null</span> <span class="hljs-string">selector</span> <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">An</span> <span class="hljs-string">empty</span> <span class="hljs-string">selector</span><br>                                    <span class="hljs-string">(&#123;&#125;)</span> <span class="hljs-string">matches</span> <span class="hljs-string">all</span> <span class="hljs-string">namespaces.</span> <span class="hljs-string">This</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">alpha-level</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">only</span> <span class="hljs-string">honored</span> <span class="hljs-string">when</span> <span class="hljs-string">PodAffinityNamespaceSelector</span><br>                                    <span class="hljs-string">feature</span> <span class="hljs-string">is</span> <span class="hljs-string">enabled.</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">matchExpressions:</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                        <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span><br>                                        <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span><br>                                          <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span><br>                                          <span class="hljs-string">and</span> <span class="hljs-string">an</span> <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span><br>                                          <span class="hljs-string">values.</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">key:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">operator:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span><br>                                              <span class="hljs-string">relationship</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span><br>                                              <span class="hljs-string">operators</span> <span class="hljs-string">are</span> <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span><br>                                              <span class="hljs-string">DoesNotExist.</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">values:</span><br>                                            <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span><br>                                              <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span><br>                                              <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span><br>                                              <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span><br>                                              <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">required:</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">matchLabels:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                        <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                        <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                        <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span><br>                                        <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span><br>                                        <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">namespaces:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">specifies</span> <span class="hljs-string">a</span> <span class="hljs-string">static</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">of</span> <span class="hljs-string">namespace</span> <span class="hljs-string">names</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span><br>                                    <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span><br>                                    <span class="hljs-string">namespaceSelector.</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">namespaceSelector</span> <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">topologyKey:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span><br>                                    <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">pods</span><br>                                    <span class="hljs-string">matching</span> <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">specified</span> <span class="hljs-string">namespaces,</span><br>                                    <span class="hljs-string">where</span> <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">topologyKey</span><br>                                    <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span> <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">any</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">selected</span><br>                                    <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running.</span> <span class="hljs-string">Empty</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                              <span class="hljs-attr">required:</span><br>                              <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">weight:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">weight</span> <span class="hljs-string">associated</span> <span class="hljs-string">with</span> <span class="hljs-string">matching</span> <span class="hljs-string">the</span> <span class="hljs-string">corresponding</span><br>                                <span class="hljs-string">podAffinityTerm,</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">range</span> <span class="hljs-number">1</span><span class="hljs-number">-100</span><span class="hljs-string">.</span><br>                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                          <span class="hljs-attr">required:</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">podAffinityTerm</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">anti-affinity</span> <span class="hljs-string">requirements</span> <span class="hljs-string">specified</span> <span class="hljs-string">by</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">are</span> <span class="hljs-string">not</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">scheduling</span> <span class="hljs-string">time,</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">will</span><br>                          <span class="hljs-string">not</span> <span class="hljs-string">be</span> <span class="hljs-string">scheduled</span> <span class="hljs-string">onto</span> <span class="hljs-string">the</span> <span class="hljs-string">node.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">anti-affinity</span> <span class="hljs-string">requirements</span><br>                          <span class="hljs-string">specified</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">cease</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">met</span> <span class="hljs-string">at</span> <span class="hljs-string">some</span> <span class="hljs-string">point</span> <span class="hljs-string">during</span><br>                          <span class="hljs-string">pod</span> <span class="hljs-string">execution</span> <span class="hljs-string">(e.g.</span> <span class="hljs-string">due</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span> <span class="hljs-string">label</span> <span class="hljs-string">update),</span> <span class="hljs-string">the</span> <span class="hljs-string">system</span><br>                          <span class="hljs-string">may</span> <span class="hljs-string">or</span> <span class="hljs-string">may</span> <span class="hljs-string">not</span> <span class="hljs-string">try</span> <span class="hljs-string">to</span> <span class="hljs-string">eventually</span> <span class="hljs-string">evict</span> <span class="hljs-string">the</span> <span class="hljs-string">pod</span> <span class="hljs-string">from</span> <span class="hljs-string">its</span><br>                          <span class="hljs-string">node.</span> <span class="hljs-string">When</span> <span class="hljs-string">there</span> <span class="hljs-string">are</span> <span class="hljs-string">multiple</span> <span class="hljs-string">elements,</span> <span class="hljs-string">the</span> <span class="hljs-string">lists</span> <span class="hljs-string">of</span> <span class="hljs-string">nodes</span><br>                          <span class="hljs-string">corresponding</span> <span class="hljs-string">to</span> <span class="hljs-string">each</span> <span class="hljs-string">podAffinityTerm</span> <span class="hljs-string">are</span> <span class="hljs-string">intersected,</span> <span class="hljs-string">i.e.</span><br>                          <span class="hljs-string">all</span> <span class="hljs-string">terms</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">satisfied.</span><br>                        <span class="hljs-attr">items:</span><br>                          <span class="hljs-attr">description:</span> <span class="hljs-string">Defines</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">pods</span> <span class="hljs-string">(namely</span> <span class="hljs-string">those</span> <span class="hljs-string">matching</span><br>                            <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">relative</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">given</span> <span class="hljs-string">namespace(s))</span><br>                            <span class="hljs-string">that</span> <span class="hljs-string">this</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span> <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span><br>                            <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with,</span> <span class="hljs-string">where</span> <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span><br>                            <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">whose</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">&lt;topologyKey&gt;</span><br>                            <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span> <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span><br>                            <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>                          <span class="hljs-attr">properties:</span><br>                            <span class="hljs-attr">labelSelector:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">resources,</span><br>                                <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">case</span> <span class="hljs-string">pods.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                    <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span> <span class="hljs-string">DoesNotExist.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span><br>                                          <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchLabels:</span><br>                                  <span class="hljs-attr">additionalProperties:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                    <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                    <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">namespaceSelector:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">query</span> <span class="hljs-string">over</span> <span class="hljs-string">the</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">namespaces</span><br>                                <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span><br>                                <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">and</span><br>                                <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">field.</span> <span class="hljs-literal">null</span> <span class="hljs-string">selector</span><br>                                <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span> <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span> <span class="hljs-string">means</span> <span class="hljs-string">&quot;this pod&#x27;s</span><br><span class="hljs-string">                                namespace&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">An</span> <span class="hljs-string">empty</span> <span class="hljs-string">selector</span> <span class="hljs-string">(&#123;&#125;)</span> <span class="hljs-string">matches</span> <span class="hljs-string">all</span> <span class="hljs-string">namespaces.</span><br>                                <span class="hljs-string">This</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">alpha-level</span> <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">only</span> <span class="hljs-string">honored</span> <span class="hljs-string">when</span><br>                                <span class="hljs-string">PodAffinityNamespaceSelector</span> <span class="hljs-string">feature</span> <span class="hljs-string">is</span> <span class="hljs-string">enabled.</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">matchExpressions:</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchExpressions</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">label</span><br>                                    <span class="hljs-string">selector</span> <span class="hljs-string">requirements.</span> <span class="hljs-string">The</span> <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">items:</span><br>                                    <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">label</span> <span class="hljs-string">selector</span> <span class="hljs-string">requirement</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span><br>                                      <span class="hljs-string">selector</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">values,</span> <span class="hljs-string">a</span> <span class="hljs-string">key,</span> <span class="hljs-string">and</span> <span class="hljs-string">an</span><br>                                      <span class="hljs-string">operator</span> <span class="hljs-string">that</span> <span class="hljs-string">relates</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">and</span> <span class="hljs-string">values.</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">key:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">selector</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">operator:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span><br>                                          <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">set</span> <span class="hljs-string">of</span> <span class="hljs-string">values.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span><br>                                          <span class="hljs-string">In,</span> <span class="hljs-string">NotIn,</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span> <span class="hljs-string">DoesNotExist.</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">values:</span><br>                                        <span class="hljs-attr">description:</span> <span class="hljs-string">values</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">array</span> <span class="hljs-string">of</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-string">values.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">In</span> <span class="hljs-string">or</span> <span class="hljs-string">NotIn,</span><br>                                          <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">non-empty.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists</span> <span class="hljs-string">or</span> <span class="hljs-string">DoesNotExist,</span> <span class="hljs-string">the</span><br>                                          <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">empty.</span> <span class="hljs-string">This</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span><br>                                          <span class="hljs-string">replaced</span> <span class="hljs-string">during</span> <span class="hljs-string">a</span> <span class="hljs-string">strategic</span> <span class="hljs-string">merge</span> <span class="hljs-string">patch.</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">required:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">matchLabels:</span><br>                                  <span class="hljs-attr">additionalProperties:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">description:</span> <span class="hljs-string">matchLabels</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">map</span> <span class="hljs-string">of</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125;<br>                                    <span class="hljs-string">pairs.</span> <span class="hljs-string">A</span> <span class="hljs-string">single</span> &#123;<span class="hljs-string">key</span>,<span class="hljs-string">value</span>&#125; <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">matchLabels</span><br>                                    <span class="hljs-string">map</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">element</span> <span class="hljs-string">of</span> <span class="hljs-string">matchExpressions,</span><br>                                    <span class="hljs-string">whose</span> <span class="hljs-string">key</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;key&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">&quot;In&quot;</span><span class="hljs-string">,</span><br>                                    <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">values</span> <span class="hljs-string">array</span> <span class="hljs-string">contains</span> <span class="hljs-string">only</span> <span class="hljs-string">&quot;value&quot;</span><span class="hljs-string">.</span> <span class="hljs-string">The</span><br>                                    <span class="hljs-string">requirements</span> <span class="hljs-string">are</span> <span class="hljs-string">ANDed.</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">namespaces:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">specifies</span> <span class="hljs-string">a</span> <span class="hljs-string">static</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">namespace</span><br>                                <span class="hljs-string">names</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">term</span> <span class="hljs-string">applies</span> <span class="hljs-string">to.</span> <span class="hljs-string">The</span> <span class="hljs-string">term</span> <span class="hljs-string">is</span> <span class="hljs-string">applied</span><br>                                <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">union</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">listed</span> <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span><br>                                <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">ones</span> <span class="hljs-string">selected</span> <span class="hljs-string">by</span> <span class="hljs-string">namespaceSelector.</span> <span class="hljs-literal">null</span> <span class="hljs-string">or</span><br>                                <span class="hljs-string">empty</span> <span class="hljs-string">namespaces</span> <span class="hljs-string">list</span> <span class="hljs-string">and</span> <span class="hljs-literal">null</span> <span class="hljs-string">namespaceSelector</span> <span class="hljs-string">means</span><br>                                <span class="hljs-string">&quot;this pod&#x27;s namespace&quot;</span><br>                              <span class="hljs-attr">items:</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                            <span class="hljs-attr">topologyKey:</span><br>                              <span class="hljs-attr">description:</span> <span class="hljs-string">This</span> <span class="hljs-string">pod</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(affinity)</span><br>                                <span class="hljs-string">or</span> <span class="hljs-string">not</span> <span class="hljs-string">co-located</span> <span class="hljs-string">(anti-affinity)</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">pods</span> <span class="hljs-string">matching</span><br>                                <span class="hljs-string">the</span> <span class="hljs-string">labelSelector</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">specified</span> <span class="hljs-string">namespaces,</span> <span class="hljs-string">where</span><br>                                <span class="hljs-string">co-located</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span> <span class="hljs-string">as</span> <span class="hljs-string">running</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">node</span> <span class="hljs-string">whose</span> <span class="hljs-string">value</span><br>                                <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">label</span> <span class="hljs-string">with</span> <span class="hljs-string">key</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">of</span><br>                                <span class="hljs-string">any</span> <span class="hljs-string">node</span> <span class="hljs-string">on</span> <span class="hljs-string">which</span> <span class="hljs-string">any</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">selected</span> <span class="hljs-string">pods</span> <span class="hljs-string">is</span> <span class="hljs-string">running.</span><br>                                <span class="hljs-string">Empty</span> <span class="hljs-string">topologyKey</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed.</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">required:</span><br>                          <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">image:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Image</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">name</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">to</span> <span class="hljs-string">use</span><br>                  <span class="hljs-string">for</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">nodes</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster.</span> <span class="hljs-string">Must</span> <span class="hljs-string">be</span> <span class="hljs-string">provided</span> <span class="hljs-string">together</span><br>                  <span class="hljs-string">with</span> <span class="hljs-string">ImagePullSecrets</span> <span class="hljs-string">in</span> <span class="hljs-string">order</span> <span class="hljs-string">to</span> <span class="hljs-string">use</span> <span class="hljs-string">an</span> <span class="hljs-string">image</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">private</span> <span class="hljs-string">registry.</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>              <span class="hljs-attr">imagePullSecrets:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">List</span> <span class="hljs-string">of</span> <span class="hljs-string">Secret</span> <span class="hljs-string">resource</span> <span class="hljs-string">containing</span> <span class="hljs-string">access</span> <span class="hljs-string">credentials</span><br>                  <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">registry</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">image.</span> <span class="hljs-string">Required</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">docker</span> <span class="hljs-string">registry</span><br>                  <span class="hljs-string">is</span> <span class="hljs-string">private.</span><br>                <span class="hljs-attr">items:</span><br>                  <span class="hljs-attr">description:</span> <span class="hljs-string">LocalObjectReference</span> <span class="hljs-string">contains</span> <span class="hljs-string">enough</span> <span class="hljs-string">information</span> <span class="hljs-string">to</span><br>                    <span class="hljs-string">let</span> <span class="hljs-string">you</span> <span class="hljs-string">locate</span> <span class="hljs-string">the</span> <span class="hljs-string">referenced</span> <span class="hljs-string">object</span> <span class="hljs-string">inside</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">namespace.</span><br>                  <span class="hljs-attr">properties:</span><br>                    <span class="hljs-attr">name:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</span><br><span class="hljs-string">                        TODO: Add other useful fields. apiVersion, kind, uid?&#x27;</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>              <span class="hljs-attr">override:</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">service:</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">metadata:</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">annotations:</span><br>                            <span class="hljs-attr">additionalProperties:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">labels:</span><br>                            <span class="hljs-attr">additionalProperties:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                      <span class="hljs-attr">spec:</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">allocateLoadBalancerNodePorts:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                          <span class="hljs-attr">clusterIP:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">clusterIPs:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                            <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">atomic</span><br>                          <span class="hljs-attr">externalIPs:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                          <span class="hljs-attr">externalName:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">externalTrafficPolicy:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">healthCheckNodePort:</span><br>                            <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                          <span class="hljs-attr">internalTrafficPolicy:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">ipFamilies:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                            <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">atomic</span><br>                          <span class="hljs-attr">ipFamilyPolicy:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">loadBalancerClass:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">loadBalancerIP:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">loadBalancerSourceRanges:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                          <span class="hljs-attr">ports:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">appProtocol:</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">name:</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">nodePort:</span><br>                                  <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                <span class="hljs-attr">port:</span><br>                                  <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                <span class="hljs-attr">protocol:</span><br>                                  <span class="hljs-attr">default:</span> <span class="hljs-string">TCP</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">targetPort:</span><br>                                  <span class="hljs-attr">anyOf:</span><br>                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                              <span class="hljs-attr">required:</span><br>                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                            <span class="hljs-attr">x-kubernetes-list-map-keys:</span><br>                            <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                            <span class="hljs-bullet">-</span> <span class="hljs-string">protocol</span><br>                            <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">map</span><br>                          <span class="hljs-attr">publishNotReadyAddresses:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                          <span class="hljs-attr">selector:</span><br>                            <span class="hljs-attr">additionalProperties:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">sessionAffinity:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">sessionAffinityConfig:</span><br>                            <span class="hljs-attr">properties:</span><br>                              <span class="hljs-attr">clientIP:</span><br>                                <span class="hljs-attr">properties:</span><br>                                  <span class="hljs-attr">timeoutSeconds:</span><br>                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">topologyKeys:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                          <span class="hljs-attr">type:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">statefulSet:</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">metadata:</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">annotations:</span><br>                            <span class="hljs-attr">additionalProperties:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">labels:</span><br>                            <span class="hljs-attr">additionalProperties:</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                      <span class="hljs-attr">spec:</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">podManagementPolicy:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">replicas:</span><br>                            <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                          <span class="hljs-attr">selector:</span><br>                            <span class="hljs-attr">properties:</span><br>                              <span class="hljs-attr">matchExpressions:</span><br>                                <span class="hljs-attr">items:</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">key:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">operator:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">values:</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">required:</span><br>                                  <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                  <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                              <span class="hljs-attr">matchLabels:</span><br>                                <span class="hljs-attr">additionalProperties:</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">serviceName:</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">template:</span><br>                            <span class="hljs-attr">properties:</span><br>                              <span class="hljs-attr">metadata:</span><br>                                <span class="hljs-attr">properties:</span><br>                                  <span class="hljs-attr">annotations:</span><br>                                    <span class="hljs-attr">additionalProperties:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">labels:</span><br>                                    <span class="hljs-attr">additionalProperties:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">name:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">namespace:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">spec:</span><br>                                <span class="hljs-attr">properties:</span><br>                                  <span class="hljs-attr">activeDeadlineSeconds:</span><br>                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                  <span class="hljs-attr">affinity:</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">nodeAffinity:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">preference:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchFields:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">weight:</span><br>                                                  <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">preference</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">nodeSelectorTerms:</span><br>                                                <span class="hljs-attr">items:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchFields:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelectorTerms</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">podAffinity:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">podAffinityTerm:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">labelSelector:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">matchExpressions:</span><br>                                                          <span class="hljs-attr">items:</span><br>                                                            <span class="hljs-attr">properties:</span><br>                                                              <span class="hljs-attr">key:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">operator:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">values:</span><br>                                                                <span class="hljs-attr">items:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                            <span class="hljs-attr">required:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">matchLabels:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">namespaceSelector:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">matchExpressions:</span><br>                                                          <span class="hljs-attr">items:</span><br>                                                            <span class="hljs-attr">properties:</span><br>                                                              <span class="hljs-attr">key:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">operator:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">values:</span><br>                                                                <span class="hljs-attr">items:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                            <span class="hljs-attr">required:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">matchLabels:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">namespaces:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">topologyKey:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">weight:</span><br>                                                  <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">podAffinityTerm</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">labelSelector:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchLabels:</span><br>                                                      <span class="hljs-attr">additionalProperties:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">namespaceSelector:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchLabels:</span><br>                                                      <span class="hljs-attr">additionalProperties:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">namespaces:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">topologyKey:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">podAntiAffinity:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">podAffinityTerm:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">labelSelector:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">matchExpressions:</span><br>                                                          <span class="hljs-attr">items:</span><br>                                                            <span class="hljs-attr">properties:</span><br>                                                              <span class="hljs-attr">key:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">operator:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">values:</span><br>                                                                <span class="hljs-attr">items:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                            <span class="hljs-attr">required:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">matchLabels:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">namespaceSelector:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">matchExpressions:</span><br>                                                          <span class="hljs-attr">items:</span><br>                                                            <span class="hljs-attr">properties:</span><br>                                                              <span class="hljs-attr">key:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">operator:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">values:</span><br>                                                                <span class="hljs-attr">items:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                            <span class="hljs-attr">required:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">matchLabels:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">namespaces:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">topologyKey:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">weight:</span><br>                                                  <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">podAffinityTerm</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">weight</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">labelSelector:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchLabels:</span><br>                                                      <span class="hljs-attr">additionalProperties:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">namespaceSelector:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">matchExpressions:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">key:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">operator:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">values:</span><br>                                                            <span class="hljs-attr">items:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">matchLabels:</span><br>                                                      <span class="hljs-attr">additionalProperties:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">namespaces:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">topologyKey:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">automountServiceAccountToken:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">containers:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">args:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">command:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">env:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">value:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">valueFrom:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">configMapKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">fieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">apiVersion:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">fieldPath:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">fieldPath</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">resourceFieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">containerName:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">divisor:</span><br>                                                        <span class="hljs-attr">anyOf:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                        <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                      <span class="hljs-attr">resource:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">resource</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">secretKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">envFrom:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">configMapRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">prefix:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">secretRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">image:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">imagePullPolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">lifecycle:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">postStart:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">preStop:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">livenessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">ports:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">containerPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">hostIP:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">hostPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">protocol:</span><br>                                                <span class="hljs-attr">default:</span> <span class="hljs-string">TCP</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">x-kubernetes-list-map-keys:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">protocol</span><br>                                          <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">map</span><br>                                        <span class="hljs-attr">readinessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">resources:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">limits:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">requests:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">securityContext:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">allowPrivilegeEscalation:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">capabilities:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">add:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">drop:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">privileged:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">procMount:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnlyRootFilesystem:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsGroup:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">runAsNonRoot:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsUser:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">seLinuxOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">level:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">role:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">user:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">seccompProfile:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">localhostProfile:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">type</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">windowsOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">gmsaCredentialSpec:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">gmsaCredentialSpecName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">runAsUserName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">startupProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">stdin:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">stdinOnce:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">terminationMessagePath:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">terminationMessagePolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">tty:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">volumeDevices:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">devicePath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">devicePath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">volumeMounts:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">mountPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">mountPropagation:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">readOnly:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                              <span class="hljs-attr">subPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">subPathExpr:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">workingDir:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">dnsConfig:</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">nameservers:</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                      <span class="hljs-attr">options:</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">name:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">value:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                      <span class="hljs-attr">searches:</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">dnsPolicy:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">enableServiceLinks:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">ephemeralContainers:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">args:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">command:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">env:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">value:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">valueFrom:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">configMapKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">fieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">apiVersion:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">fieldPath:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">fieldPath</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">resourceFieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">containerName:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">divisor:</span><br>                                                        <span class="hljs-attr">anyOf:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                        <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                      <span class="hljs-attr">resource:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">resource</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">secretKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">envFrom:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">configMapRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">prefix:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">secretRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">image:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">imagePullPolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">lifecycle:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">postStart:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">preStop:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">livenessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">ports:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">containerPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">hostIP:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">hostPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">protocol:</span><br>                                                <span class="hljs-attr">default:</span> <span class="hljs-string">TCP</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">readinessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">resources:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">limits:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">requests:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">securityContext:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">allowPrivilegeEscalation:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">capabilities:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">add:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">drop:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">privileged:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">procMount:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnlyRootFilesystem:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsGroup:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">runAsNonRoot:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsUser:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">seLinuxOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">level:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">role:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">user:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">seccompProfile:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">localhostProfile:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">type</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">windowsOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">gmsaCredentialSpec:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">gmsaCredentialSpecName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">runAsUserName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">startupProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">stdin:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">stdinOnce:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">targetContainerName:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">terminationMessagePath:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">terminationMessagePolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">tty:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">volumeDevices:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">devicePath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">devicePath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">volumeMounts:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">mountPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">mountPropagation:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">readOnly:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                              <span class="hljs-attr">subPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">subPathExpr:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">workingDir:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">hostAliases:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">hostnames:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">ip:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">hostIPC:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">hostNetwork:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">hostPID:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">hostname:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">imagePullSecrets:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">initContainers:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">args:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">command:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">env:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">value:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">valueFrom:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">configMapKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">fieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">apiVersion:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">fieldPath:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">fieldPath</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">resourceFieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">containerName:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">divisor:</span><br>                                                        <span class="hljs-attr">anyOf:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                        <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                      <span class="hljs-attr">resource:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">resource</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">secretKeyRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">key:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">envFrom:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">configMapRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">prefix:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">secretRef:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">name:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">optional:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">image:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">imagePullPolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">lifecycle:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">postStart:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">preStop:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">exec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">command:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">httpGet:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">httpHeaders:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">properties:</span><br>                                                          <span class="hljs-attr">name:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">value:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">required:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">path:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                    <span class="hljs-attr">scheme:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">tcpSocket:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">host:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">port:</span><br>                                                      <span class="hljs-attr">anyOf:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                  <span class="hljs-attr">required:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">livenessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">ports:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">containerPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">hostIP:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">hostPort:</span><br>                                                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">protocol:</span><br>                                                <span class="hljs-attr">default:</span> <span class="hljs-string">TCP</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">x-kubernetes-list-map-keys:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">protocol</span><br>                                          <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">map</span><br>                                        <span class="hljs-attr">readinessProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">resources:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">limits:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">requests:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">anyOf:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">securityContext:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">allowPrivilegeEscalation:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">capabilities:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">add:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">drop:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">privileged:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">procMount:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnlyRootFilesystem:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsGroup:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">runAsNonRoot:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">runAsUser:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">seLinuxOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">level:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">role:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">user:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">seccompProfile:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">localhostProfile:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">type</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">windowsOptions:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">gmsaCredentialSpec:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">gmsaCredentialSpecName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">runAsUserName:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">startupProbe:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">exec:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">command:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">failureThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">httpGet:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">httpHeaders:</span><br>                                                  <span class="hljs-attr">items:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">value:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">path:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                <span class="hljs-attr">scheme:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">initialDelaySeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">periodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">successThreshold:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">tcpSocket:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">host:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">port:</span><br>                                                  <span class="hljs-attr">anyOf:</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">port</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">timeoutSeconds:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">stdin:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">stdinOnce:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">terminationMessagePath:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">terminationMessagePolicy:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">tty:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                        <span class="hljs-attr">volumeDevices:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">devicePath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">devicePath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">volumeMounts:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">mountPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">mountPropagation:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">name:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">readOnly:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                              <span class="hljs-attr">subPath:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">subPathExpr:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">mountPath</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">workingDir:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">nodeName:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">nodeSelector:</span><br>                                    <span class="hljs-attr">additionalProperties:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">overhead:</span><br>                                    <span class="hljs-attr">additionalProperties:</span><br>                                      <span class="hljs-attr">anyOf:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">preemptionPolicy:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">priority:</span><br>                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                  <span class="hljs-attr">priorityClassName:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">readinessGates:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">conditionType:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">conditionType</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">restartPolicy:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">runtimeClassName:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">schedulerName:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">securityContext:</span><br>                                    <span class="hljs-attr">properties:</span><br>                                      <span class="hljs-attr">fsGroup:</span><br>                                        <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                      <span class="hljs-attr">fsGroupChangePolicy:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">runAsGroup:</span><br>                                        <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                      <span class="hljs-attr">runAsNonRoot:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                      <span class="hljs-attr">runAsUser:</span><br>                                        <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                      <span class="hljs-attr">seLinuxOptions:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">level:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">role:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">user:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">seccompProfile:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">localhostProfile:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">required:</span><br>                                        <span class="hljs-bullet">-</span> <span class="hljs-string">type</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">supplementalGroups:</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                      <span class="hljs-attr">sysctls:</span><br>                                        <span class="hljs-attr">items:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">name:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">value:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">value</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                      <span class="hljs-attr">windowsOptions:</span><br>                                        <span class="hljs-attr">properties:</span><br>                                          <span class="hljs-attr">gmsaCredentialSpec:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">gmsaCredentialSpecName:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">runAsUserName:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                  <span class="hljs-attr">serviceAccount:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">serviceAccountName:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">setHostnameAsFQDN:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">shareProcessNamespace:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                  <span class="hljs-attr">subdomain:</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                  <span class="hljs-attr">tolerations:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">effect:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">key:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">operator:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">tolerationSeconds:</span><br>                                          <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                        <span class="hljs-attr">value:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                  <span class="hljs-attr">topologySpreadConstraints:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">labelSelector:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">matchExpressions:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">key:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">operator:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">values:</span><br>                                                    <span class="hljs-attr">items:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                <span class="hljs-attr">required:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">matchLabels:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">maxSkew:</span><br>                                          <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                        <span class="hljs-attr">topologyKey:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">whenUnsatisfiable:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">maxSkew</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">whenUnsatisfiable</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">x-kubernetes-list-map-keys:</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">topologyKey</span><br>                                    <span class="hljs-bullet">-</span> <span class="hljs-string">whenUnsatisfiable</span><br>                                    <span class="hljs-attr">x-kubernetes-list-type:</span> <span class="hljs-string">map</span><br>                                  <span class="hljs-attr">volumes:</span><br>                                    <span class="hljs-attr">items:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">awsElasticBlockStore:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">partition:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">volumeID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">volumeID</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">azureDisk:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">cachingMode:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">diskName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">diskURI:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">kind:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">diskName</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">diskURI</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">azureFile:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">shareName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">secretName</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">shareName</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">cephfs:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">monitors:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">path:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretFile:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">user:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">monitors</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">cinder:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">volumeID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">volumeID</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">configMap:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">defaultMode:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">key:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">mode:</span><br>                                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-attr">path:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">required:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">name:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">optional:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">csi:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">driver:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">nodePublishSecretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">volumeAttributes:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">driver</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">downwardAPI:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">defaultMode:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">fieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">apiVersion:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">fieldPath:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">fieldPath</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">mode:</span><br>                                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-attr">path:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">resourceFieldRef:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">containerName:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">divisor:</span><br>                                                        <span class="hljs-attr">anyOf:</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                        <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                      <span class="hljs-attr">resource:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">resource</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">required:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">emptyDir:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">medium:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">sizeLimit:</span><br>                                              <span class="hljs-attr">anyOf:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                              <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">ephemeral:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">volumeClaimTemplate:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">metadata:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">spec:</span><br>                                                  <span class="hljs-attr">properties:</span><br>                                                    <span class="hljs-attr">accessModes:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">dataSource:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">apiGroup:</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">kind:</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                        <span class="hljs-attr">name:</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">required:</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-string">kind</span><br>                                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">resources:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">limits:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">anyOf:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                            <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                        <span class="hljs-attr">requests:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">anyOf:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                            <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">selector:</span><br>                                                      <span class="hljs-attr">properties:</span><br>                                                        <span class="hljs-attr">matchExpressions:</span><br>                                                          <span class="hljs-attr">items:</span><br>                                                            <span class="hljs-attr">properties:</span><br>                                                              <span class="hljs-attr">key:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">operator:</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">values:</span><br>                                                                <span class="hljs-attr">items:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                            <span class="hljs-attr">required:</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                        <span class="hljs-attr">matchLabels:</span><br>                                                          <span class="hljs-attr">additionalProperties:</span><br>                                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                    <span class="hljs-attr">storageClassName:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">volumeMode:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">volumeName:</span><br>                                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">required:</span><br>                                              <span class="hljs-bullet">-</span> <span class="hljs-string">spec</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">fc:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">lun:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">targetWWNs:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">wwids:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">flexVolume:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">driver:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">options:</span><br>                                              <span class="hljs-attr">additionalProperties:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">driver</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">flocker:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">datasetName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">datasetUUID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">gcePersistentDisk:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">partition:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">pdName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">pdName</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">gitRepo:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">directory:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">repository:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">revision:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">repository</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">glusterfs:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">endpoints:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">path:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">hostPath:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">path:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">type:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">iscsi:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">chapAuthDiscovery:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">chapAuthSession:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">initiatorName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">iqn:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">iscsiInterface:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">lun:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">portals:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">targetPortal:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">iqn</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">lun</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">targetPortal</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">nfs:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">path:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">server:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">server</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">persistentVolumeClaim:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">claimName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">claimName</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">photonPersistentDisk:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">pdID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">pdID</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">portworxVolume:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">volumeID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">volumeID</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">projected:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">defaultMode:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">sources:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">configMap:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">items:</span><br>                                                          <span class="hljs-attr">properties:</span><br>                                                            <span class="hljs-attr">key:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">mode:</span><br>                                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                            <span class="hljs-attr">path:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">required:</span><br>                                                          <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">downwardAPI:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">items:</span><br>                                                          <span class="hljs-attr">properties:</span><br>                                                            <span class="hljs-attr">fieldRef:</span><br>                                                              <span class="hljs-attr">properties:</span><br>                                                                <span class="hljs-attr">apiVersion:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">fieldPath:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">required:</span><br>                                                              <span class="hljs-bullet">-</span> <span class="hljs-string">fieldPath</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                            <span class="hljs-attr">mode:</span><br>                                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                            <span class="hljs-attr">path:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">resourceFieldRef:</span><br>                                                              <span class="hljs-attr">properties:</span><br>                                                                <span class="hljs-attr">containerName:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                <span class="hljs-attr">divisor:</span><br>                                                                  <span class="hljs-attr">anyOf:</span><br>                                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                                  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                                  <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                                                  <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                                                <span class="hljs-attr">resource:</span><br>                                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                              <span class="hljs-attr">required:</span><br>                                                              <span class="hljs-bullet">-</span> <span class="hljs-string">resource</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                          <span class="hljs-attr">required:</span><br>                                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">secret:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">items:</span><br>                                                        <span class="hljs-attr">items:</span><br>                                                          <span class="hljs-attr">properties:</span><br>                                                            <span class="hljs-attr">key:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                            <span class="hljs-attr">mode:</span><br>                                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                            <span class="hljs-attr">path:</span><br>                                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                          <span class="hljs-attr">required:</span><br>                                                          <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                          <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                                      <span class="hljs-attr">name:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">optional:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                  <span class="hljs-attr">serviceAccountToken:</span><br>                                                    <span class="hljs-attr">properties:</span><br>                                                      <span class="hljs-attr">audience:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                      <span class="hljs-attr">expirationSeconds:</span><br>                                                        <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                      <span class="hljs-attr">path:</span><br>                                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                    <span class="hljs-attr">required:</span><br>                                                    <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">quobyte:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">group:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">registry:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">tenant:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">user:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">volume:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">registry</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">volume</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">rbd:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">image:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">keyring:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">monitors:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">pool:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">user:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">image</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">monitors</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">scaleIO:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">gateway:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">protectionDomain:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">sslEnabled:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">storageMode:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">storagePool:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">system:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">volumeName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">gateway</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">secretRef</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">system</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">secret:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">defaultMode:</span><br>                                              <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-attr">items:</span><br>                                              <span class="hljs-attr">items:</span><br>                                                <span class="hljs-attr">properties:</span><br>                                                  <span class="hljs-attr">key:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                  <span class="hljs-attr">mode:</span><br>                                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                                  <span class="hljs-attr">path:</span><br>                                                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">required:</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                                <span class="hljs-bullet">-</span> <span class="hljs-string">path</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">optional:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">storageos:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">readOnly:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                                            <span class="hljs-attr">secretRef:</span><br>                                              <span class="hljs-attr">properties:</span><br>                                                <span class="hljs-attr">name:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                            <span class="hljs-attr">volumeName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">volumeNamespace:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">vsphereVolume:</span><br>                                          <span class="hljs-attr">properties:</span><br>                                            <span class="hljs-attr">fsType:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">storagePolicyID:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">storagePolicyName:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">volumePath:</span><br>                                              <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">required:</span><br>                                          <span class="hljs-bullet">-</span> <span class="hljs-string">volumePath</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                <span class="hljs-attr">required:</span><br>                                <span class="hljs-bullet">-</span> <span class="hljs-string">containers</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">updateStrategy:</span><br>                            <span class="hljs-attr">properties:</span><br>                              <span class="hljs-attr">rollingUpdate:</span><br>                                <span class="hljs-attr">properties:</span><br>                                  <span class="hljs-attr">partition:</span><br>                                    <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                                    <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span><br>                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                          <span class="hljs-attr">volumeClaimTemplates:</span><br>                            <span class="hljs-attr">items:</span><br>                              <span class="hljs-attr">properties:</span><br>                                <span class="hljs-attr">apiVersion:</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">kind:</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                <span class="hljs-attr">metadata:</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">annotations:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">labels:</span><br>                                      <span class="hljs-attr">additionalProperties:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">name:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">namespace:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                <span class="hljs-attr">spec:</span><br>                                  <span class="hljs-attr">properties:</span><br>                                    <span class="hljs-attr">accessModes:</span><br>                                      <span class="hljs-attr">items:</span><br>                                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                    <span class="hljs-attr">dataSource:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">apiGroup:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">kind:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                        <span class="hljs-attr">name:</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                      <span class="hljs-attr">required:</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">kind</span><br>                                      <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">resources:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">limits:</span><br>                                          <span class="hljs-attr">additionalProperties:</span><br>                                            <span class="hljs-attr">anyOf:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                            <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                        <span class="hljs-attr">requests:</span><br>                                          <span class="hljs-attr">additionalProperties:</span><br>                                            <span class="hljs-attr">anyOf:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                            <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                                            <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">selector:</span><br>                                      <span class="hljs-attr">properties:</span><br>                                        <span class="hljs-attr">matchExpressions:</span><br>                                          <span class="hljs-attr">items:</span><br>                                            <span class="hljs-attr">properties:</span><br>                                              <span class="hljs-attr">key:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">operator:</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                              <span class="hljs-attr">values:</span><br>                                                <span class="hljs-attr">items:</span><br>                                                  <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                            <span class="hljs-attr">required:</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">key</span><br>                                            <span class="hljs-bullet">-</span> <span class="hljs-string">operator</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                                        <span class="hljs-attr">matchLabels:</span><br>                                          <span class="hljs-attr">additionalProperties:</span><br>                                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                          <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                                    <span class="hljs-attr">storageClassName:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">volumeMode:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                    <span class="hljs-attr">volumeName:</span><br>                                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                              <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">persistence:</span><br>                <span class="hljs-attr">default:</span><br>                  <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">desired</span> <span class="hljs-string">persistent</span> <span class="hljs-string">storage</span> <span class="hljs-string">configuration</span> <span class="hljs-string">for</span> <span class="hljs-string">each</span><br>                  <span class="hljs-string">Pod</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">storage:</span><br>                    <span class="hljs-attr">anyOf:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">default:</span> <span class="hljs-string">10Gi</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">requested</span> <span class="hljs-string">size</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">persistent</span> <span class="hljs-string">volume</span> <span class="hljs-string">attached</span><br>                      <span class="hljs-string">to</span> <span class="hljs-string">each</span> <span class="hljs-string">Pod</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster.</span> <span class="hljs-string">The</span> <span class="hljs-string">format</span> <span class="hljs-string">of</span> <span class="hljs-string">this</span> <span class="hljs-string">field</span><br>                      <span class="hljs-string">matches</span> <span class="hljs-string">that</span> <span class="hljs-string">defined</span> <span class="hljs-string">by</span> <span class="hljs-string">kubernetes/apimachinery.</span> <span class="hljs-string">See</span> <span class="hljs-string">https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity</span><br>                      <span class="hljs-string">for</span> <span class="hljs-string">more</span> <span class="hljs-string">info</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">format</span> <span class="hljs-string">of</span> <span class="hljs-string">this</span> <span class="hljs-string">field.</span><br>                    <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                    <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                  <span class="hljs-attr">storageClassName:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">name</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">StorageClass</span> <span class="hljs-string">to</span> <span class="hljs-string">claim</span> <span class="hljs-string">a</span> <span class="hljs-string">PersistentVolume</span><br>                      <span class="hljs-string">from.</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">rabbitmq:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">options</span> <span class="hljs-string">for</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">Pods</span> <span class="hljs-string">created</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span><br>                  <span class="hljs-string">cluster.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">additionalConfig:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Modify</span> <span class="hljs-string">to</span> <span class="hljs-string">add</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">rabbitmq.conf</span> <span class="hljs-string">file</span> <span class="hljs-string">in</span> <span class="hljs-string">addition</span><br>                      <span class="hljs-string">to</span> <span class="hljs-string">default</span> <span class="hljs-string">configurations</span> <span class="hljs-string">set</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">operator.</span> <span class="hljs-string">Modifying</span> <span class="hljs-string">this</span><br>                      <span class="hljs-string">property</span> <span class="hljs-string">on</span> <span class="hljs-string">an</span> <span class="hljs-string">existing</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">will</span> <span class="hljs-string">trigger</span> <span class="hljs-string">a</span> <span class="hljs-string">StatefulSet</span><br>                      <span class="hljs-string">rolling</span> <span class="hljs-string">restart</span> <span class="hljs-string">and</span> <span class="hljs-string">will</span> <span class="hljs-string">cause</span> <span class="hljs-string">rabbitmq</span> <span class="hljs-string">downtime.</span> <span class="hljs-string">For</span> <span class="hljs-string">more</span> <span class="hljs-string">information</span><br>                      <span class="hljs-string">on</span> <span class="hljs-string">this</span> <span class="hljs-string">config,</span> <span class="hljs-string">see</span> <span class="hljs-string">https://www.rabbitmq.com/configure.html#config-file</span><br>                    <span class="hljs-attr">maxLength:</span> <span class="hljs-number">2000</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">additionalPlugins:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;List of plugins to enable in addition to essential</span><br><span class="hljs-string">                      plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.&#x27;</span><br>                    <span class="hljs-attr">items:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Plugin</span> <span class="hljs-string">to</span> <span class="hljs-string">enable</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster.</span><br>                      <span class="hljs-attr">maxLength:</span> <span class="hljs-number">100</span><br>                      <span class="hljs-attr">pattern:</span> <span class="hljs-string">^\w+$</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">maxItems:</span> <span class="hljs-number">100</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>                  <span class="hljs-attr">advancedConfig:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Specify</span> <span class="hljs-string">any</span> <span class="hljs-string">rabbitmq</span> <span class="hljs-string">advanced.config</span> <span class="hljs-string">configurations</span><br>                      <span class="hljs-string">to</span> <span class="hljs-string">apply</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster.</span> <span class="hljs-string">For</span> <span class="hljs-string">more</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">advanced</span> <span class="hljs-string">config,</span><br>                      <span class="hljs-string">see</span> <span class="hljs-string">https://www.rabbitmq.com/configure.html#advanced-config-file</span><br>                    <span class="hljs-attr">maxLength:</span> <span class="hljs-number">100000</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">envConfig:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Modify</span> <span class="hljs-string">to</span> <span class="hljs-string">add</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">rabbitmq-env.conf</span> <span class="hljs-string">file.</span> <span class="hljs-string">Modifying</span><br>                      <span class="hljs-string">this</span> <span class="hljs-string">property</span> <span class="hljs-string">on</span> <span class="hljs-string">an</span> <span class="hljs-string">existing</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">will</span> <span class="hljs-string">trigger</span> <span class="hljs-string">a</span><br>                      <span class="hljs-string">StatefulSet</span> <span class="hljs-string">rolling</span> <span class="hljs-string">restart</span> <span class="hljs-string">and</span> <span class="hljs-string">will</span> <span class="hljs-string">cause</span> <span class="hljs-string">rabbitmq</span> <span class="hljs-string">downtime.</span><br>                      <span class="hljs-string">For</span> <span class="hljs-string">more</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">env</span> <span class="hljs-string">config,</span> <span class="hljs-string">see</span> <span class="hljs-string">https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html</span><br>                    <span class="hljs-attr">maxLength:</span> <span class="hljs-number">100000</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">replicas:</span><br>                <span class="hljs-attr">default:</span> <span class="hljs-number">1</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Replicas</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">nodes</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">cluster.</span><br>                  <span class="hljs-string">Each</span> <span class="hljs-string">node</span> <span class="hljs-string">is</span> <span class="hljs-string">deployed</span> <span class="hljs-string">as</span> <span class="hljs-string">a</span> <span class="hljs-string">Replica</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">StatefulSet.</span> <span class="hljs-string">Only</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span><br>                  <span class="hljs-number">5</span> <span class="hljs-string">replicas</span> <span class="hljs-string">clusters</span> <span class="hljs-string">are</span> <span class="hljs-string">tested.</span> <span class="hljs-string">This</span> <span class="hljs-string">value</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">an</span> <span class="hljs-string">odd</span> <span class="hljs-string">number</span><br>                  <span class="hljs-string">to</span> <span class="hljs-string">ensure</span> <span class="hljs-string">the</span> <span class="hljs-string">resultant</span> <span class="hljs-string">cluster</span> <span class="hljs-string">can</span> <span class="hljs-string">establish</span> <span class="hljs-string">exactly</span> <span class="hljs-string">one</span> <span class="hljs-string">quorum</span><br>                  <span class="hljs-string">of</span> <span class="hljs-string">nodes</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">event</span> <span class="hljs-string">of</span> <span class="hljs-string">a</span> <span class="hljs-string">fragmenting</span> <span class="hljs-string">network</span> <span class="hljs-string">partition.</span><br>                <span class="hljs-attr">format:</span> <span class="hljs-string">int32</span><br>                <span class="hljs-attr">minimum:</span> <span class="hljs-number">0</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>              <span class="hljs-attr">resources:</span><br>                <span class="hljs-attr">default:</span><br>                  <span class="hljs-attr">limits:</span><br>                    <span class="hljs-attr">cpu:</span> <span class="hljs-string">2000m</span><br>                    <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>                  <span class="hljs-attr">requests:</span><br>                    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>                    <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">desired</span> <span class="hljs-string">compute</span> <span class="hljs-string">resource</span> <span class="hljs-string">requirements</span> <span class="hljs-string">of</span> <span class="hljs-string">Pods</span> <span class="hljs-string">in</span><br>                  <span class="hljs-string">the</span> <span class="hljs-string">cluster.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">limits:</span><br>                    <span class="hljs-attr">additionalProperties:</span><br>                      <span class="hljs-attr">anyOf:</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Limits describes the maximum amount of compute resources</span><br><span class="hljs-string">                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/&#x27;</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">requests:</span><br>                    <span class="hljs-attr">additionalProperties:</span><br>                      <span class="hljs-attr">anyOf:</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">pattern:</span> <span class="hljs-string">^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br>                      <span class="hljs-attr">x-kubernetes-int-or-string:</span> <span class="hljs-literal">true</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Requests describes the minimum amount of compute</span><br><span class="hljs-string">                      resources required. If Requests is omitted for a container,</span><br><span class="hljs-string">                      it defaults to Limits if that is explicitly specified, otherwise</span><br><span class="hljs-string">                      to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/&#x27;</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">secretBackend:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Secret</span> <span class="hljs-string">backend</span> <span class="hljs-string">configuration</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster.</span><br>                  <span class="hljs-string">Enables</span> <span class="hljs-string">to</span> <span class="hljs-string">fetch</span> <span class="hljs-string">default</span> <span class="hljs-string">user</span> <span class="hljs-string">credentials</span> <span class="hljs-string">and</span> <span class="hljs-string">certificates</span> <span class="hljs-string">from</span><br>                  <span class="hljs-string">K8s</span> <span class="hljs-string">external</span> <span class="hljs-string">secret</span> <span class="hljs-string">stores.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">vault:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">VaultSpec</span> <span class="hljs-string">will</span> <span class="hljs-string">add</span> <span class="hljs-string">Vault</span> <span class="hljs-string">annotations</span> <span class="hljs-string">(see</span> <span class="hljs-string">https://www.vaultproject.io/docs/platform/k8s/injector/annotations)</span><br>                      <span class="hljs-string">to</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">Pods.</span> <span class="hljs-string">It</span> <span class="hljs-string">requires</span> <span class="hljs-string">a</span> <span class="hljs-string">Vault</span> <span class="hljs-string">Agent</span> <span class="hljs-string">Sidecar</span> <span class="hljs-string">Injector</span><br>                      <span class="hljs-string">(https://www.vaultproject.io/docs/platform/k8s/injector)</span> <span class="hljs-string">to</span><br>                      <span class="hljs-string">be</span> <span class="hljs-string">installed</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">K8s</span> <span class="hljs-string">cluster.</span> <span class="hljs-string">The</span> <span class="hljs-string">injector</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">K8s</span> <span class="hljs-string">Mutation</span><br>                      <span class="hljs-string">Webhook</span> <span class="hljs-string">Controller</span> <span class="hljs-string">that</span> <span class="hljs-string">alters</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">Pod</span> <span class="hljs-string">specifications</span> <span class="hljs-string">(based</span><br>                      <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">added</span> <span class="hljs-string">Vault</span> <span class="hljs-string">annotations)</span> <span class="hljs-string">to</span> <span class="hljs-string">include</span> <span class="hljs-string">Vault</span> <span class="hljs-string">Agent</span> <span class="hljs-string">containers</span><br>                      <span class="hljs-string">that</span> <span class="hljs-string">render</span> <span class="hljs-string">Vault</span> <span class="hljs-string">secrets</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">volume.</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">annotations:</span><br>                        <span class="hljs-attr">additionalProperties:</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Vault</span> <span class="hljs-string">annotations</span> <span class="hljs-string">that</span> <span class="hljs-string">override</span> <span class="hljs-string">the</span> <span class="hljs-string">Vault</span> <span class="hljs-string">annotations</span><br>                          <span class="hljs-string">set</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster-operator.</span> <span class="hljs-string">For</span> <span class="hljs-string">a</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">valid</span> <span class="hljs-string">Vault</span> <span class="hljs-string">annotations,</span><br>                          <span class="hljs-string">see</span> <span class="hljs-string">https://www.vaultproject.io/docs/platform/k8s/injector/annotations</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                      <span class="hljs-attr">defaultUserPath:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Path</span> <span class="hljs-string">in</span> <span class="hljs-string">Vault</span> <span class="hljs-string">to</span> <span class="hljs-string">access</span> <span class="hljs-string">a</span> <span class="hljs-string">KV</span> <span class="hljs-string">(Key-Value)</span> <span class="hljs-string">secret</span><br>                          <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">fields</span> <span class="hljs-string">username</span> <span class="hljs-string">and</span> <span class="hljs-string">password</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span> <span class="hljs-string">user.</span><br>                          <span class="hljs-string">For</span> <span class="hljs-string">example</span> <span class="hljs-string">&quot;secret/data/rabbitmq/config&quot;</span><span class="hljs-string">.</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">defaultUserUpdaterImage:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Sidecar</span> <span class="hljs-string">container</span> <span class="hljs-string">that</span> <span class="hljs-string">updates</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span> <span class="hljs-string">user&#x27;s</span><br>                          <span class="hljs-string">password</span> <span class="hljs-string">in</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">when</span> <span class="hljs-string">it</span> <span class="hljs-string">changes</span> <span class="hljs-string">in</span> <span class="hljs-string">Vault.</span> <span class="hljs-string">Additionally,</span><br>                          <span class="hljs-string">it</span> <span class="hljs-string">updates</span> <span class="hljs-string">/var/lib/rabbitmq/.rabbitmqadmin.conf</span> <span class="hljs-string">(used</span> <span class="hljs-string">by</span><br>                          <span class="hljs-string">rabbitmqadmin</span> <span class="hljs-string">CLI).</span> <span class="hljs-string">Set</span> <span class="hljs-string">to</span> <span class="hljs-string">empty</span> <span class="hljs-string">string</span> <span class="hljs-string">to</span> <span class="hljs-string">disable</span> <span class="hljs-string">the</span> <span class="hljs-string">sidecar</span><br>                          <span class="hljs-string">container.</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">role:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Role</span> <span class="hljs-string">in</span> <span class="hljs-string">Vault.</span> <span class="hljs-string">If</span> <span class="hljs-string">vault.defaultUserPath</span> <span class="hljs-string">is</span> <span class="hljs-string">set,</span><br>                          <span class="hljs-string">this</span> <span class="hljs-string">role</span> <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">capability</span> <span class="hljs-string">to</span> <span class="hljs-string">read</span> <span class="hljs-string">the</span> <span class="hljs-string">pre-created</span> <span class="hljs-string">default</span><br>                          <span class="hljs-string">user</span> <span class="hljs-string">credential</span> <span class="hljs-string">in</span> <span class="hljs-string">Vault.</span> <span class="hljs-string">If</span> <span class="hljs-string">vault.tls</span> <span class="hljs-string">is</span> <span class="hljs-string">set,</span> <span class="hljs-string">this</span> <span class="hljs-string">role</span><br>                          <span class="hljs-string">must</span> <span class="hljs-string">have</span> <span class="hljs-string">capability</span> <span class="hljs-string">to</span> <span class="hljs-string">create</span> <span class="hljs-string">and</span> <span class="hljs-string">update</span> <span class="hljs-string">certificates</span> <span class="hljs-string">in</span><br>                          <span class="hljs-string">the</span> <span class="hljs-string">Vault</span> <span class="hljs-string">PKI</span> <span class="hljs-string">engine</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">domains</span> <span class="hljs-string">&quot;&lt;namespace&gt;&quot;</span> <span class="hljs-string">and</span> <span class="hljs-string">&quot;&lt;namespace&gt;.svc&quot;</span><span class="hljs-string">.</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">tls:</span><br>                        <span class="hljs-attr">properties:</span><br>                          <span class="hljs-attr">altNames:</span><br>                            <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Specifies the requested Subject Alternative</span><br><span class="hljs-string">                              Names (SANs), in a comma-delimited list. These will</span><br><span class="hljs-string">                              be appended to the SANs added by the cluster-operator.</span><br><span class="hljs-string">                              The cluster-operator will add SANs: &quot;&lt;RabbitmqCluster</span><br><span class="hljs-string">                              name&gt;-server-&lt;index&gt;.&lt;RabbitmqCluster name&gt;-nodes.&lt;namespace&gt;&quot;</span><br><span class="hljs-string">                              for each pod, e.g. &quot;myrabbit-server-0.myrabbit-nodes.default&quot;.&#x27;</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">commonName:</span><br>                            <span class="hljs-attr">description:</span> <span class="hljs-string">Specifies</span> <span class="hljs-string">the</span> <span class="hljs-string">requested</span> <span class="hljs-string">certificate</span> <span class="hljs-string">Common</span><br>                              <span class="hljs-string">Name</span> <span class="hljs-string">(CN).</span> <span class="hljs-string">Defaults</span> <span class="hljs-string">to</span> <span class="hljs-string">&lt;serviceName&gt;.&lt;namespace&gt;.svc</span><br>                              <span class="hljs-string">if</span> <span class="hljs-string">not</span> <span class="hljs-string">provided.</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">ipSans:</span><br>                            <span class="hljs-attr">description:</span> <span class="hljs-string">Specifies</span> <span class="hljs-string">the</span> <span class="hljs-string">requested</span> <span class="hljs-string">IP</span> <span class="hljs-string">Subject</span> <span class="hljs-string">Alternative</span><br>                              <span class="hljs-string">Names,</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">comma-delimited</span> <span class="hljs-string">list.</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                          <span class="hljs-attr">pkiIssuerPath:</span><br>                            <span class="hljs-attr">description:</span> <span class="hljs-string">Path</span> <span class="hljs-string">in</span> <span class="hljs-string">Vault</span> <span class="hljs-string">PKI</span> <span class="hljs-string">engine.</span> <span class="hljs-string">For</span> <span class="hljs-string">example</span> <span class="hljs-string">&quot;pki/issue/hashicorp-com&quot;</span><span class="hljs-string">.</span><br>                              <span class="hljs-string">required</span><br>                            <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">default:</span><br>                  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">desired</span> <span class="hljs-string">state</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">Service</span> <span class="hljs-string">to</span> <span class="hljs-string">create</span><br>                  <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">annotations:</span><br>                    <span class="hljs-attr">additionalProperties:</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Annotations</span> <span class="hljs-string">to</span> <span class="hljs-string">add</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Service.</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">type:</span><br>                    <span class="hljs-attr">default:</span> <span class="hljs-string">ClusterIP</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Type of Service to create for the cluster. Must</span><br><span class="hljs-string">                      be one of: ClusterIP, LoadBalancer, NodePort. For more info</span><br><span class="hljs-string">                      see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType&#x27;</span><br>                    <span class="hljs-attr">enum:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">ClusterIP</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">LoadBalancer</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">NodePort</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">skipPostDeploySteps:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">If</span> <span class="hljs-string">unset,</span> <span class="hljs-string">or</span> <span class="hljs-string">set</span> <span class="hljs-string">to</span> <span class="hljs-literal">false</span><span class="hljs-string">,</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster</span> <span class="hljs-string">will</span> <span class="hljs-string">run</span> <span class="hljs-string">`rabbitmq-queues</span><br>                  <span class="hljs-string">rebalance</span> <span class="hljs-string">all`</span> <span class="hljs-string">whenever</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster</span> <span class="hljs-string">is</span> <span class="hljs-string">updated.</span> <span class="hljs-string">Set</span> <span class="hljs-string">to</span> <span class="hljs-literal">true</span> <span class="hljs-string">to</span> <span class="hljs-string">prevent</span><br>                  <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">rebalancing</span> <span class="hljs-string">queue</span> <span class="hljs-string">leaders</span> <span class="hljs-string">after</span> <span class="hljs-string">a</span> <span class="hljs-string">cluster</span> <span class="hljs-string">update.</span> <span class="hljs-string">Has</span><br>                  <span class="hljs-literal">no</span> <span class="hljs-string">effect</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster</span> <span class="hljs-string">only</span> <span class="hljs-string">consists</span> <span class="hljs-string">of</span> <span class="hljs-string">one</span> <span class="hljs-string">node.</span> <span class="hljs-string">For</span> <span class="hljs-string">more</span> <span class="hljs-string">information,</span><br>                  <span class="hljs-string">see</span> <span class="hljs-string">https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>              <span class="hljs-attr">terminationGracePeriodSeconds:</span><br>                <span class="hljs-attr">default:</span> <span class="hljs-number">604800</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;TerminationGracePeriodSeconds is the timeout that each</span><br><span class="hljs-string">                  rabbitmqcluster pod will have to terminate gracefully. It defaults</span><br><span class="hljs-string">                  to 604800 seconds ( a week long) to ensure that the container preStop</span><br><span class="hljs-string">                  lifecycle hook can finish running. For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md&#x27;</span><br>                <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                <span class="hljs-attr">minimum:</span> <span class="hljs-number">0</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>              <span class="hljs-attr">tls:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">TLS-related</span> <span class="hljs-string">configuration</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitMQ</span> <span class="hljs-string">cluster.</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">caSecretName:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Name</span> <span class="hljs-string">of</span> <span class="hljs-string">a</span> <span class="hljs-string">Secret</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">Namespace</span> <span class="hljs-string">as</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster,</span><br>                      <span class="hljs-string">containing</span> <span class="hljs-string">the</span> <span class="hljs-string">Certificate</span> <span class="hljs-string">Authority&#x27;s</span> <span class="hljs-string">public</span> <span class="hljs-string">certificate</span> <span class="hljs-string">for</span><br>                      <span class="hljs-string">TLS.</span> <span class="hljs-string">The</span> <span class="hljs-string">Secret</span> <span class="hljs-string">must</span> <span class="hljs-string">store</span> <span class="hljs-string">this</span> <span class="hljs-string">as</span> <span class="hljs-string">ca.crt.</span> <span class="hljs-string">This</span> <span class="hljs-string">Secret</span> <span class="hljs-string">can</span> <span class="hljs-string">be</span><br>                      <span class="hljs-string">created</span> <span class="hljs-string">by</span> <span class="hljs-string">running</span> <span class="hljs-string">`kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">secret</span> <span class="hljs-string">generic</span> <span class="hljs-string">ca-secret</span><br>                      <span class="hljs-string">--from-file=ca.crt=path/to/ca.cert`</span> <span class="hljs-string">Used</span> <span class="hljs-string">for</span> <span class="hljs-string">mTLS,</span> <span class="hljs-string">and</span> <span class="hljs-string">TLS</span> <span class="hljs-string">for</span><br>                      <span class="hljs-string">rabbitmq_web_stomp</span> <span class="hljs-string">and</span> <span class="hljs-string">rabbitmq_web_mqtt.</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">disableNonTLSListeners:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;When set to true, the RabbitmqCluster disables non-TLS</span><br><span class="hljs-string">                      listeners for RabbitMQ, management plugin and for any enabled</span><br><span class="hljs-string">                      plugins in the following list: stomp, mqtt, web_stomp, web_mqtt.</span><br><span class="hljs-string">                      Only TLS-enabled clients will be able to connect.&#x27;</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>                  <span class="hljs-attr">secretName:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Name</span> <span class="hljs-string">of</span> <span class="hljs-string">a</span> <span class="hljs-string">Secret</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">Namespace</span> <span class="hljs-string">as</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster,</span><br>                      <span class="hljs-string">containing</span> <span class="hljs-string">the</span> <span class="hljs-string">server&#x27;s</span> <span class="hljs-string">private</span> <span class="hljs-string">key</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">public</span> <span class="hljs-string">certificate</span> <span class="hljs-string">for</span><br>                      <span class="hljs-string">TLS.</span> <span class="hljs-string">The</span> <span class="hljs-string">Secret</span> <span class="hljs-string">must</span> <span class="hljs-string">store</span> <span class="hljs-string">these</span> <span class="hljs-string">as</span> <span class="hljs-string">tls.key</span> <span class="hljs-string">and</span> <span class="hljs-string">tls.crt,</span> <span class="hljs-string">respectively.</span><br>                      <span class="hljs-string">This</span> <span class="hljs-string">Secret</span> <span class="hljs-string">can</span> <span class="hljs-string">be</span> <span class="hljs-string">created</span> <span class="hljs-string">by</span> <span class="hljs-string">running</span> <span class="hljs-string">`kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">secret</span><br>                      <span class="hljs-string">tls</span> <span class="hljs-string">tls-secret</span> <span class="hljs-string">--cert=path/to/tls.cert</span> <span class="hljs-string">--key=path/to/tls.key`</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">tolerations:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Tolerations</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">list</span> <span class="hljs-string">of</span> <span class="hljs-string">Toleration</span> <span class="hljs-string">resources</span> <span class="hljs-string">attached</span><br>                  <span class="hljs-string">to</span> <span class="hljs-string">each</span> <span class="hljs-string">Pod</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster.</span><br>                <span class="hljs-attr">items:</span><br>                  <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">pod</span> <span class="hljs-string">this</span> <span class="hljs-string">Toleration</span> <span class="hljs-string">is</span> <span class="hljs-string">attached</span> <span class="hljs-string">to</span> <span class="hljs-string">tolerates</span> <span class="hljs-string">any</span><br>                    <span class="hljs-string">taint</span> <span class="hljs-string">that</span> <span class="hljs-string">matches</span> <span class="hljs-string">the</span> <span class="hljs-string">triple</span> <span class="hljs-string">&lt;key,value,effect&gt;</span> <span class="hljs-string">using</span> <span class="hljs-string">the</span> <span class="hljs-string">matching</span><br>                    <span class="hljs-string">operator</span> <span class="hljs-string">&lt;operator&gt;.</span><br>                  <span class="hljs-attr">properties:</span><br>                    <span class="hljs-attr">effect:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Effect</span> <span class="hljs-string">indicates</span> <span class="hljs-string">the</span> <span class="hljs-string">taint</span> <span class="hljs-string">effect</span> <span class="hljs-string">to</span> <span class="hljs-string">match.</span> <span class="hljs-string">Empty</span><br>                        <span class="hljs-string">means</span> <span class="hljs-string">match</span> <span class="hljs-string">all</span> <span class="hljs-string">taint</span> <span class="hljs-string">effects.</span> <span class="hljs-string">When</span> <span class="hljs-string">specified,</span> <span class="hljs-string">allowed</span> <span class="hljs-string">values</span><br>                        <span class="hljs-string">are</span> <span class="hljs-string">NoSchedule,</span> <span class="hljs-string">PreferNoSchedule</span> <span class="hljs-string">and</span> <span class="hljs-string">NoExecute.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">key:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Key</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">taint</span> <span class="hljs-string">key</span> <span class="hljs-string">that</span> <span class="hljs-string">the</span> <span class="hljs-string">toleration</span> <span class="hljs-string">applies</span><br>                        <span class="hljs-string">to.</span> <span class="hljs-string">Empty</span> <span class="hljs-string">means</span> <span class="hljs-string">match</span> <span class="hljs-string">all</span> <span class="hljs-string">taint</span> <span class="hljs-string">keys.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">key</span> <span class="hljs-string">is</span> <span class="hljs-string">empty,</span><br>                        <span class="hljs-string">operator</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">Exists;</span> <span class="hljs-string">this</span> <span class="hljs-string">combination</span> <span class="hljs-string">means</span> <span class="hljs-string">to</span> <span class="hljs-string">match</span> <span class="hljs-string">all</span><br>                        <span class="hljs-string">values</span> <span class="hljs-string">and</span> <span class="hljs-string">all</span> <span class="hljs-string">keys.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">operator:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Operator</span> <span class="hljs-string">represents</span> <span class="hljs-string">a</span> <span class="hljs-string">key&#x27;s</span> <span class="hljs-string">relationship</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span><br>                        <span class="hljs-string">value.</span> <span class="hljs-string">Valid</span> <span class="hljs-string">operators</span> <span class="hljs-string">are</span> <span class="hljs-string">Exists</span> <span class="hljs-string">and</span> <span class="hljs-string">Equal.</span> <span class="hljs-string">Defaults</span> <span class="hljs-string">to</span> <span class="hljs-string">Equal.</span><br>                        <span class="hljs-string">Exists</span> <span class="hljs-string">is</span> <span class="hljs-string">equivalent</span> <span class="hljs-string">to</span> <span class="hljs-string">wildcard</span> <span class="hljs-string">for</span> <span class="hljs-string">value,</span> <span class="hljs-string">so</span> <span class="hljs-string">that</span> <span class="hljs-string">a</span> <span class="hljs-string">pod</span><br>                        <span class="hljs-string">can</span> <span class="hljs-string">tolerate</span> <span class="hljs-string">all</span> <span class="hljs-string">taints</span> <span class="hljs-string">of</span> <span class="hljs-string">a</span> <span class="hljs-string">particular</span> <span class="hljs-string">category.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">tolerationSeconds:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">TolerationSeconds</span> <span class="hljs-string">represents</span> <span class="hljs-string">the</span> <span class="hljs-string">period</span> <span class="hljs-string">of</span> <span class="hljs-string">time</span><br>                        <span class="hljs-string">the</span> <span class="hljs-string">toleration</span> <span class="hljs-string">(which</span> <span class="hljs-string">must</span> <span class="hljs-string">be</span> <span class="hljs-string">of</span> <span class="hljs-string">effect</span> <span class="hljs-string">NoExecute,</span> <span class="hljs-string">otherwise</span><br>                        <span class="hljs-string">this</span> <span class="hljs-string">field</span> <span class="hljs-string">is</span> <span class="hljs-string">ignored)</span> <span class="hljs-string">tolerates</span> <span class="hljs-string">the</span> <span class="hljs-string">taint.</span> <span class="hljs-string">By</span> <span class="hljs-string">default,</span> <span class="hljs-string">it</span><br>                        <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">set,</span> <span class="hljs-string">which</span> <span class="hljs-string">means</span> <span class="hljs-string">tolerate</span> <span class="hljs-string">the</span> <span class="hljs-string">taint</span> <span class="hljs-string">forever</span> <span class="hljs-string">(do</span> <span class="hljs-string">not</span><br>                        <span class="hljs-string">evict).</span> <span class="hljs-string">Zero</span> <span class="hljs-string">and</span> <span class="hljs-string">negative</span> <span class="hljs-string">values</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">treated</span> <span class="hljs-string">as</span> <span class="hljs-number">0</span> <span class="hljs-string">(evict</span><br>                        <span class="hljs-string">immediately)</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">system.</span><br>                      <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>                    <span class="hljs-attr">value:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Value</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">taint</span> <span class="hljs-string">value</span> <span class="hljs-string">the</span> <span class="hljs-string">toleration</span> <span class="hljs-string">matches</span><br>                        <span class="hljs-string">to.</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">operator</span> <span class="hljs-string">is</span> <span class="hljs-string">Exists,</span> <span class="hljs-string">the</span> <span class="hljs-string">value</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-string">empty,</span><br>                        <span class="hljs-string">otherwise</span> <span class="hljs-string">just</span> <span class="hljs-string">a</span> <span class="hljs-string">regular</span> <span class="hljs-string">string.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>          <span class="hljs-attr">status:</span><br>            <span class="hljs-attr">description:</span> <span class="hljs-string">Status</span> <span class="hljs-string">presents</span> <span class="hljs-string">the</span> <span class="hljs-string">observed</span> <span class="hljs-string">state</span> <span class="hljs-string">of</span> <span class="hljs-string">RabbitmqCluster</span><br>            <span class="hljs-attr">properties:</span><br>              <span class="hljs-attr">binding:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Binding exposes a secret containing the binding information</span><br><span class="hljs-string">                  for this RabbitmqCluster. It implements the service binding Provisioned</span><br><span class="hljs-string">                  Service duck type. See: https://github.com/servicebinding/spec#provisioned-service&#x27;</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">name:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</span><br><span class="hljs-string">                      TODO: Add other useful fields. apiVersion, kind, uid?&#x27;</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">conditions:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Set</span> <span class="hljs-string">of</span> <span class="hljs-string">Conditions</span> <span class="hljs-string">describing</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">state</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span><br>                  <span class="hljs-string">RabbitmqCluster</span><br>                <span class="hljs-attr">items:</span><br>                  <span class="hljs-attr">properties:</span><br>                    <span class="hljs-attr">lastTransitionTime:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">The</span> <span class="hljs-string">last</span> <span class="hljs-string">time</span> <span class="hljs-string">this</span> <span class="hljs-string">Condition</span> <span class="hljs-string">type</span> <span class="hljs-string">changed.</span><br>                      <span class="hljs-attr">format:</span> <span class="hljs-string">date-time</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">message:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Full</span> <span class="hljs-string">text</span> <span class="hljs-string">reason</span> <span class="hljs-string">for</span> <span class="hljs-string">current</span> <span class="hljs-string">status</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">condition.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">reason:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">One</span> <span class="hljs-string">word,</span> <span class="hljs-string">camel-case</span> <span class="hljs-string">reason</span> <span class="hljs-string">for</span> <span class="hljs-string">current</span> <span class="hljs-string">status</span><br>                        <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">condition.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">status:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span> <span class="hljs-literal">False</span><span class="hljs-string">,</span> <span class="hljs-string">or</span> <span class="hljs-string">Unknown</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">type:</span><br>                      <span class="hljs-attr">description:</span> <span class="hljs-string">Type</span> <span class="hljs-string">indicates</span> <span class="hljs-string">the</span> <span class="hljs-string">scope</span> <span class="hljs-string">of</span> <span class="hljs-string">RabbitmqCluster</span> <span class="hljs-string">status</span><br>                        <span class="hljs-string">addressed</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">condition.</span><br>                      <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                  <span class="hljs-attr">required:</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">status</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">type</span><br>                  <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">array</span><br>              <span class="hljs-attr">defaultUser:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">Identifying</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">internal</span> <span class="hljs-string">resources</span><br>                <span class="hljs-attr">properties:</span><br>                  <span class="hljs-attr">secretReference:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Reference</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">Secret</span> <span class="hljs-string">containing</span> <span class="hljs-string">the</span><br>                      <span class="hljs-string">credentials</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span> <span class="hljs-string">user.</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">keys:</span><br>                        <span class="hljs-attr">additionalProperties:</span><br>                          <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Key-value</span> <span class="hljs-string">pairs</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">Secret</span> <span class="hljs-string">corresponding</span> <span class="hljs-string">to</span><br>                          <span class="hljs-string">`username`,</span> <span class="hljs-string">`password`,</span> <span class="hljs-string">`host`,</span> <span class="hljs-string">and</span> <span class="hljs-string">`port`</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                      <span class="hljs-attr">name:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Name</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Secret</span> <span class="hljs-string">containing</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span> <span class="hljs-string">user</span><br>                          <span class="hljs-string">credentials</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">namespace:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Namespace</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Secret</span> <span class="hljs-string">containing</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span><br>                          <span class="hljs-string">user</span> <span class="hljs-string">credentials</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">required:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">keys</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">namespace</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                  <span class="hljs-attr">serviceReference:</span><br>                    <span class="hljs-attr">description:</span> <span class="hljs-string">Reference</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">Service</span> <span class="hljs-string">serving</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster.</span><br>                    <span class="hljs-attr">properties:</span><br>                      <span class="hljs-attr">name:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Name</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Service</span> <span class="hljs-string">serving</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                      <span class="hljs-attr">namespace:</span><br>                        <span class="hljs-attr">description:</span> <span class="hljs-string">Namespace</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Service</span> <span class="hljs-string">serving</span> <span class="hljs-string">the</span> <span class="hljs-string">cluster</span><br>                        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>                    <span class="hljs-attr">required:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">name</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-string">namespace</span><br>                    <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>              <span class="hljs-attr">observedGeneration:</span><br>                <span class="hljs-attr">description:</span> <span class="hljs-string">observedGeneration</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">most</span> <span class="hljs-string">recent</span> <span class="hljs-string">successful</span> <span class="hljs-string">generation</span><br>                  <span class="hljs-string">observed</span> <span class="hljs-string">for</span> <span class="hljs-string">this</span> <span class="hljs-string">RabbitmqCluster.</span> <span class="hljs-string">It</span> <span class="hljs-string">corresponds</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">RabbitmqCluster&#x27;s</span><br>                  <span class="hljs-string">generation,</span> <span class="hljs-string">which</span> <span class="hljs-string">is</span> <span class="hljs-string">updated</span> <span class="hljs-string">on</span> <span class="hljs-string">mutation</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">API</span> <span class="hljs-string">Server.</span><br>                <span class="hljs-attr">format:</span> <span class="hljs-string">int64</span><br>                <span class="hljs-attr">type:</span> <span class="hljs-string">integer</span><br>            <span class="hljs-attr">required:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">conditions</span><br>            <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">object</span><br>    <span class="hljs-attr">served:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">subresources:</span><br>      <span class="hljs-attr">status:</span> &#123;&#125;<br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">acceptedNames:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">plural:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">conditions:</span> []<br>  <span class="hljs-attr">storedVersions:</span> []<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-leader-election-role</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">coordination.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">leases</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">events</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator-role</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">events</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">patch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">persistentvolumeclaims</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods/exec</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">secrets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">serviceaccounts</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">apps</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">statefulsets</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmq.com</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmqclusters</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmq.com</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmqclusters/finalizers</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmq.com</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmqclusters/status</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rolebindings</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">roles</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">create</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">update</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-leader-election-rolebinding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-leader-election-role</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator-rolebinding</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator-role</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>    <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app.kubernetes.io/component:</span> <span class="hljs-string">rabbitmq-operator</span><br>        <span class="hljs-attr">app.kubernetes.io/name:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>        <span class="hljs-attr">app.kubernetes.io/part-of:</span> <span class="hljs-string">rabbitmq</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-comment"># 节点选择</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">openstack-control-plane:</span> <span class="hljs-string">enabled</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/manager</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">OPERATOR_NAMESPACE</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">fieldRef:</span><br>              <span class="hljs-attr">fieldPath:</span> <span class="hljs-string">metadata.namespace</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">rabbitmqoperator/cluster-operator:1.10.0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">operator</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9782</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">rabbitmq-cluster-operator</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="自定义-rbmq-集群-rabbitmq-yaml"><a href="#自定义-rbmq-集群-rabbitmq-yaml" class="headerlink" title="自定义 rbmq 集群 rabbitmq.yaml"></a>自定义 rbmq 集群 rabbitmq.yaml</h2><p>可根据实际集群配置修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rabbitmq.com/v1beta1</span><br><span class="hljs-comment"># operator中对 RabbitmqCluster 进行了定义</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RabbitmqCluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello-world</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">rabbitmq-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">rbmq</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># 副本数</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-comment"># 持久化存储卷设置 -- 此处使用了 kadalu-glusterfs</span><br>  <span class="hljs-attr">persistence:</span><br>    <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">kadalu.ext</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">20Gi</span><br>  <span class="hljs-comment"># 根据实际集群配置 重写 sts 配置</span><br>  <span class="hljs-attr">override:</span><br>    <span class="hljs-attr">statefulSet:</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">template:</span><br>          <span class="hljs-attr">metadata:</span><br>            <span class="hljs-attr">labels:</span><br>              <span class="hljs-attr">app:</span> <span class="hljs-string">rabbitmq</span><br>          <span class="hljs-attr">spec:</span><br>            <span class="hljs-comment"># 节点选择--标签</span><br>            <span class="hljs-attr">nodeSelector:</span><br>              <span class="hljs-attr">openstack-control-plane:</span> <span class="hljs-string">enabled</span><br>            <span class="hljs-comment"># 调度策略 -- 保证一个主机只有一个 rbmq 实例</span><br>            <span class="hljs-attr">affinity:</span><br>              <span class="hljs-attr">podAntiAffinity:</span><br>                <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 硬策略</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>                      <span class="hljs-attr">matchExpressions:</span><br>                        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>                          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                          <span class="hljs-attr">values:</span><br>                            <span class="hljs-bullet">-</span> <span class="hljs-string">rabbitmq</span><br>                    <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>                    <span class="hljs-attr">namespaces:</span><br>                      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;rabbitmq-system&quot;</span><br>            <span class="hljs-comment"># 容器设置 -- 镜像，资源限制，探针，port 等</span><br>            <span class="hljs-attr">containers:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rabbitmq</span><br>                <span class="hljs-attr">image:</span> <span class="hljs-string">registry-harbor:5000/openstack/rabbitmq:3.8.7-alpine</span><br>                <span class="hljs-attr">resources:</span><br>                  <span class="hljs-attr">requests:</span><br>                    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>                    <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>                  <span class="hljs-attr">limits:</span><br>                    <span class="hljs-attr">cpu:</span> <span class="hljs-string">1000m</span><br>                    <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>K8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K8s Operator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/21/hello-world/"/>
    <url>/2021/12/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
